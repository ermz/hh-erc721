{"id":"fc1be3a8276436dbc0fb3d0c0c590925","_format":"hh-sol-build-info-1","solcVersion":"0.8.8","solcLongVersion":"0.8.8+commit.dddeac2f","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"},"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/RandomIpfsNft.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\nerror RandomIpfsNft__RangeOutOfBounds();\n\ncontract RandomIpfsNft is VRFConsumerBaseV2, ERC721 {\n    // when we mint an NFT, we will trigger a Chainlinkg VRF call to get us a random number\n    // using that number, we will get a random NFT\n    // Pug, Shiba Inu, St. Bernard\n    // Shiba Inu super rare\n    // Pug kinda rare\n    // St. Bernanrd common\n\n    // Type Declaration\n    enum Breed{\n        SHIBA_INU,\n        PUG,\n        ST_BERNARD\n    }\n\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    uint64 private immutable i_subscriptionId;\n    bytes32 private immutable i_gasLane;\n    uint32 private immutable i_callbackGasLimit;\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\n    uint32 private constant NUM_WORDS = 1;\n\n    // Chainlink VRF Helpers\n    mapping(uint256 => address) public s_requestIdToSender;\n\n    // NFT variables\n    uint256 public s_tokenCounter;\n    uint256 internal constant MAX_CHANCE_VALUE = 100;\n\n    constructor(\n        address vrfCoordinatorV2,\n        uint64 subscriptionId,\n        bytes32 gasLane,\n        uint32 callbackGasLimit\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) ERC721(\"Random IPFS NFT\", \"RIN\") {\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n        i_subscriptionId = subscriptionId;\n        i_gasLane = gasLane;\n        i_callbackGasLimit = callbackGasLimit;\n    }\n\n    function requestNft() public returns (uint256 requestId) {\n        requestId = i_vrfCoordinator.requestRandomWords(\n            i_gasLane,\n            i_subscriptionId,\n            REQUEST_CONFIRMATIONS,\n            i_callbackGasLimit,\n            NUM_WORDS\n        );\n        s_requestIdToSender[requestId] = msg.sender;\n    }\n\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\n        address dogOwner = s_requestIdToSender[requestId];\n        uint256 newTokenId = s_tokenCounter;\n        // What does the token look like?\n        \n        uint256 moddedRng = randomWords[0] % MAX_CHANCE_VALUE;\n        // Get number between 0-99\n\n        Breed dogBreed = getBreedFromModdedRng(moddedRng);\n        _safeMint(dogOwner, newTokenId);\n    }\n\n    function getBreedFromModdedRng(uint256 moddedRng) public pure returns (Breed) {\n        uint256 cumulativeSum = 0;\n        uint256[3] memory chanceArray = getChanceArray();\n        for(uint256 i = 0; i < chanceArray.length; i++) {\n            if (moddedRng >= cumulativeSum && moddedRng < cumulativeSum + chanceArray[i]) {\n                return Breed(i);\n            }\n            cumulativeSum += chanceArray[i];\n        }\n        revert RandomIpfsNft__RangeOutOfBounds();\n    }\n\n    function getChanceArray() public pure returns(uint256[3] memory) {\n        return [10, 30, MAX_CHANCE_VALUE];\n    }\n\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n\n    }\n}"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"2072","formattedMessage":"Warning: Unused local variable.\n  --> contracts/RandomIpfsNft.sol:70:9:\n   |\n70 |         Breed dogBreed = getBreedFromModdedRng(moddedRng);\n   |         ^^^^^^^^^^^^^^\n\n","message":"Unused local variable.","severity":"warning","sourceLocation":{"end":2336,"file":"contracts/RandomIpfsNft.sol","start":2322},"type":"Warning"}],"sources":{"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","exportedSymbols":{"VRFConsumerBaseV2":[57]},"id":58,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"57:5275:0","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."},"fullyImplemented":false,"id":57,"linearizedBaseContracts":[57],"name":"VRFConsumerBaseV2","nameLocation":"5351:17:0","nodeType":"ContractDefinition","nodes":[{"id":8,"name":"OnlyCoordinatorCanFulfill","nameLocation":"5379:25:0","nodeType":"ErrorDefinition","parameters":{"id":7,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4,"mutability":"mutable","name":"have","nameLocation":"5413:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5405:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3,"name":"address","nodeType":"ElementaryTypeName","src":"5405:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6,"mutability":"mutable","name":"want","nameLocation":"5427:4:0","nodeType":"VariableDeclaration","scope":8,"src":"5419:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5,"name":"address","nodeType":"ElementaryTypeName","src":"5419:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5404:28:0"},"src":"5373:60:0"},{"constant":false,"id":10,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"5462:14:0","nodeType":"VariableDeclaration","scope":57,"src":"5436:40:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"5436:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":20,"nodeType":"Block","src":"5593:43:0","statements":[{"expression":{"id":18,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":16,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"5599:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":17,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"5616:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5599:32:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":19,"nodeType":"ExpressionStatement","src":"5599:32:0"}]},"documentation":{"id":11,"nodeType":"StructuredDocumentation","src":"5481:72:0","text":" @param _vrfCoordinator address of VRFCoordinator contract"},"id":21,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[{"constant":false,"id":13,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"5576:15:0","nodeType":"VariableDeclaration","scope":21,"src":"5568:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":12,"name":"address","nodeType":"ElementaryTypeName","src":"5568:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5567:25:0"},"returnParameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"5593:0:0"},"scope":57,"src":"5556:80:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":22,"nodeType":"StructuredDocumentation","src":"5640:686:0","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"},"id":30,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"6338:18:0","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":24,"mutability":"mutable","name":"requestId","nameLocation":"6365:9:0","nodeType":"VariableDeclaration","scope":30,"src":"6357:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":23,"name":"uint256","nodeType":"ElementaryTypeName","src":"6357:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":27,"mutability":"mutable","name":"randomWords","nameLocation":"6393:11:0","nodeType":"VariableDeclaration","scope":30,"src":"6376:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":25,"name":"uint256","nodeType":"ElementaryTypeName","src":"6376:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":26,"nodeType":"ArrayTypeName","src":"6376:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6356:49:0"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"6422:0:0"},"scope":57,"src":"6329:94:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":55,"nodeType":"Block","src":"6707:167:0","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":38,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6717:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":39,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6717:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":40,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6731:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6717:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":49,"nodeType":"IfStatement","src":"6713:109:0","trueBody":{"id":48,"nodeType":"Block","src":"6747:75:0","statements":[{"errorCall":{"arguments":[{"expression":{"id":43,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6788:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6788:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":45,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"6800:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":42,"name":"OnlyCoordinatorCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"6762:25:0","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6762:53:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":47,"nodeType":"RevertStatement","src":"6755:60:0"}]}},{"expression":{"arguments":[{"id":51,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"6846:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":52,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":35,"src":"6857:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":50,"name":"fulfillRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"6827:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory)"}},"id":53,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6827:42:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":54,"nodeType":"ExpressionStatement","src":"6827:42:0"}]},"functionSelector":"1fe543e3","id":56,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomWords","nameLocation":"6627:21:0","nodeType":"FunctionDefinition","parameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"requestId","nameLocation":"6657:9:0","nodeType":"VariableDeclaration","scope":56,"src":"6649:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":31,"name":"uint256","nodeType":"ElementaryTypeName","src":"6649:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":35,"mutability":"mutable","name":"randomWords","nameLocation":"6685:11:0","nodeType":"VariableDeclaration","scope":56,"src":"6668:28:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":33,"name":"uint256","nodeType":"ElementaryTypeName","src":"6668:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":34,"nodeType":"ArrayTypeName","src":"6668:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6648:49:0"},"returnParameters":{"id":37,"nodeType":"ParameterList","parameters":[],"src":"6707:0:0"},"scope":57,"src":"6618:256:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":58,"src":"5333:1543:0","usedErrors":[8]}],"src":"32:6845:0"},"id":0},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","exportedSymbols":{"VRFCoordinatorV2Interface":[153]},"id":154,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":59,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:1"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":153,"linearizedBaseContracts":[153],"name":"VRFCoordinatorV2Interface","nameLocation":"67:25:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":60,"nodeType":"StructuredDocumentation","src":"97:267:1","text":" @notice Get configuration relevant for making requests\n @return minimumRequestConfirmations global min for request confirmations\n @return maxGasLimit global max for request gas limit\n @return s_provingKeyHashes list of registered key hashes"},"functionSelector":"00012291","id":70,"implemented":false,"kind":"function","modifiers":[],"name":"getRequestConfig","nameLocation":"376:16:1","nodeType":"FunctionDefinition","parameters":{"id":61,"nodeType":"ParameterList","parameters":[],"src":"392:2:1"},"returnParameters":{"id":69,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":70,"src":"437:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":62,"name":"uint16","nodeType":"ElementaryTypeName","src":"437:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":65,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":70,"src":"451:6:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":64,"name":"uint32","nodeType":"ElementaryTypeName","src":"451:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":68,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":70,"src":"465:16:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":66,"name":"bytes32","nodeType":"ElementaryTypeName","src":"465:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":67,"nodeType":"ArrayTypeName","src":"465:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"429:58:1"},"scope":153,"src":"367:121:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":71,"nodeType":"StructuredDocumentation","src":"492:1511:1","text":" @notice Request a set of random words.\n @param keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n @param subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n @param minimumRequestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n @param callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n @param numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."},"functionSelector":"5d3b1d30","id":86,"implemented":false,"kind":"function","modifiers":[],"name":"requestRandomWords","nameLocation":"2015:18:1","nodeType":"FunctionDefinition","parameters":{"id":82,"nodeType":"ParameterList","parameters":[{"constant":false,"id":73,"mutability":"mutable","name":"keyHash","nameLocation":"2047:7:1","nodeType":"VariableDeclaration","scope":86,"src":"2039:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":72,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2039:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":75,"mutability":"mutable","name":"subId","nameLocation":"2067:5:1","nodeType":"VariableDeclaration","scope":86,"src":"2060:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":74,"name":"uint64","nodeType":"ElementaryTypeName","src":"2060:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":77,"mutability":"mutable","name":"minimumRequestConfirmations","nameLocation":"2085:27:1","nodeType":"VariableDeclaration","scope":86,"src":"2078:34:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":76,"name":"uint16","nodeType":"ElementaryTypeName","src":"2078:6:1","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":79,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2125:16:1","nodeType":"VariableDeclaration","scope":86,"src":"2118:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":78,"name":"uint32","nodeType":"ElementaryTypeName","src":"2118:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":81,"mutability":"mutable","name":"numWords","nameLocation":"2154:8:1","nodeType":"VariableDeclaration","scope":86,"src":"2147:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":80,"name":"uint32","nodeType":"ElementaryTypeName","src":"2147:6:1","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2033:133:1"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":84,"mutability":"mutable","name":"requestId","nameLocation":"2193:9:1","nodeType":"VariableDeclaration","scope":86,"src":"2185:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":83,"name":"uint256","nodeType":"ElementaryTypeName","src":"2185:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2184:19:1"},"scope":153,"src":"2006:198:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":87,"nodeType":"StructuredDocumentation","src":"2208:384:1","text":" @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));"},"functionSelector":"a21a23e4","id":92,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"2604:18:1","nodeType":"FunctionDefinition","parameters":{"id":88,"nodeType":"ParameterList","parameters":[],"src":"2622:2:1"},"returnParameters":{"id":91,"nodeType":"ParameterList","parameters":[{"constant":false,"id":90,"mutability":"mutable","name":"subId","nameLocation":"2650:5:1","nodeType":"VariableDeclaration","scope":92,"src":"2643:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":89,"name":"uint64","nodeType":"ElementaryTypeName","src":"2643:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2642:14:1"},"scope":153,"src":"2595:62:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":93,"nodeType":"StructuredDocumentation","src":"2661:381:1","text":" @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return reqCount - number of requests for this subscription, determines fee tier.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."},"functionSelector":"a47c7696","id":107,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"3054:15:1","nodeType":"FunctionDefinition","parameters":{"id":96,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95,"mutability":"mutable","name":"subId","nameLocation":"3077:5:1","nodeType":"VariableDeclaration","scope":107,"src":"3070:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":94,"name":"uint64","nodeType":"ElementaryTypeName","src":"3070:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3069:14:1"},"returnParameters":{"id":106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":98,"mutability":"mutable","name":"balance","nameLocation":"3133:7:1","nodeType":"VariableDeclaration","scope":107,"src":"3126:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":97,"name":"uint96","nodeType":"ElementaryTypeName","src":"3126:6:1","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":100,"mutability":"mutable","name":"reqCount","nameLocation":"3155:8:1","nodeType":"VariableDeclaration","scope":107,"src":"3148:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":99,"name":"uint64","nodeType":"ElementaryTypeName","src":"3148:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":102,"mutability":"mutable","name":"owner","nameLocation":"3179:5:1","nodeType":"VariableDeclaration","scope":107,"src":"3171:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":101,"name":"address","nodeType":"ElementaryTypeName","src":"3171:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":105,"mutability":"mutable","name":"consumers","nameLocation":"3209:9:1","nodeType":"VariableDeclaration","scope":107,"src":"3192:26:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":103,"name":"address","nodeType":"ElementaryTypeName","src":"3192:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ArrayTypeName","src":"3192:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3118:106:1"},"scope":153,"src":"3045:180:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":108,"nodeType":"StructuredDocumentation","src":"3229:164:1","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"},"functionSelector":"04c357cb","id":115,"implemented":false,"kind":"function","modifiers":[],"name":"requestSubscriptionOwnerTransfer","nameLocation":"3405:32:1","nodeType":"FunctionDefinition","parameters":{"id":113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":110,"mutability":"mutable","name":"subId","nameLocation":"3445:5:1","nodeType":"VariableDeclaration","scope":115,"src":"3438:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":109,"name":"uint64","nodeType":"ElementaryTypeName","src":"3438:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":112,"mutability":"mutable","name":"newOwner","nameLocation":"3460:8:1","nodeType":"VariableDeclaration","scope":115,"src":"3452:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"3452:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3437:32:1"},"returnParameters":{"id":114,"nodeType":"ParameterList","parameters":[],"src":"3478:0:1"},"scope":153,"src":"3396:83:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"3483:212:1","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."},"functionSelector":"82359740","id":121,"implemented":false,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"3707:31:1","nodeType":"FunctionDefinition","parameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"mutability":"mutable","name":"subId","nameLocation":"3746:5:1","nodeType":"VariableDeclaration","scope":121,"src":"3739:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":117,"name":"uint64","nodeType":"ElementaryTypeName","src":"3739:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3738:14:1"},"returnParameters":{"id":120,"nodeType":"ParameterList","parameters":[],"src":"3761:0:1"},"scope":153,"src":"3698:64:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":122,"nodeType":"StructuredDocumentation","src":"3766:170:1","text":" @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"},"functionSelector":"7341c10c","id":129,"implemented":false,"kind":"function","modifiers":[],"name":"addConsumer","nameLocation":"3948:11:1","nodeType":"FunctionDefinition","parameters":{"id":127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":124,"mutability":"mutable","name":"subId","nameLocation":"3967:5:1","nodeType":"VariableDeclaration","scope":129,"src":"3960:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":123,"name":"uint64","nodeType":"ElementaryTypeName","src":"3960:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":126,"mutability":"mutable","name":"consumer","nameLocation":"3982:8:1","nodeType":"VariableDeclaration","scope":129,"src":"3974:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":125,"name":"address","nodeType":"ElementaryTypeName","src":"3974:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3959:32:1"},"returnParameters":{"id":128,"nodeType":"ParameterList","parameters":[],"src":"4000:0:1"},"scope":153,"src":"3939:62:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":130,"nodeType":"StructuredDocumentation","src":"4005:172:1","text":" @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"},"functionSelector":"9f87fad7","id":137,"implemented":false,"kind":"function","modifiers":[],"name":"removeConsumer","nameLocation":"4189:14:1","nodeType":"FunctionDefinition","parameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":132,"mutability":"mutable","name":"subId","nameLocation":"4211:5:1","nodeType":"VariableDeclaration","scope":137,"src":"4204:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":131,"name":"uint64","nodeType":"ElementaryTypeName","src":"4204:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":134,"mutability":"mutable","name":"consumer","nameLocation":"4226:8:1","nodeType":"VariableDeclaration","scope":137,"src":"4218:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":133,"name":"address","nodeType":"ElementaryTypeName","src":"4218:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4203:32:1"},"returnParameters":{"id":136,"nodeType":"ParameterList","parameters":[],"src":"4244:0:1"},"scope":153,"src":"4180:65:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":138,"nodeType":"StructuredDocumentation","src":"4249:140:1","text":" @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"},"functionSelector":"d7ae1d30","id":145,"implemented":false,"kind":"function","modifiers":[],"name":"cancelSubscription","nameLocation":"4401:18:1","nodeType":"FunctionDefinition","parameters":{"id":143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":140,"mutability":"mutable","name":"subId","nameLocation":"4427:5:1","nodeType":"VariableDeclaration","scope":145,"src":"4420:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":139,"name":"uint64","nodeType":"ElementaryTypeName","src":"4420:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":142,"mutability":"mutable","name":"to","nameLocation":"4442:2:1","nodeType":"VariableDeclaration","scope":145,"src":"4434:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":141,"name":"address","nodeType":"ElementaryTypeName","src":"4434:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4419:26:1"},"returnParameters":{"id":144,"nodeType":"ParameterList","parameters":[],"src":"4454:0:1"},"scope":153,"src":"4392:63:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e82ad7d4","id":152,"implemented":false,"kind":"function","modifiers":[],"name":"pendingRequestExists","nameLocation":"4760:20:1","nodeType":"FunctionDefinition","parameters":{"id":148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":147,"mutability":"mutable","name":"subId","nameLocation":"4788:5:1","nodeType":"VariableDeclaration","scope":152,"src":"4781:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":146,"name":"uint64","nodeType":"ElementaryTypeName","src":"4781:6:1","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4780:14:1"},"returnParameters":{"id":151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":150,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":152,"src":"4818:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":149,"name":"bool","nodeType":"ElementaryTypeName","src":"4818:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4817:6:1"},"scope":153,"src":"4751:73:1","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":154,"src":"57:4769:1","usedErrors":[]}],"src":"32:4795:1"},"id":1},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Address":[1589],"Context":[1611],"ERC165":[1810],"ERC721":[1098],"IERC165":[1822],"IERC721":[1214],"IERC721Metadata":[1259],"IERC721Receiver":[1232],"Math":[2687],"Strings":[1786]},"id":1099,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":155,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:2"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":156,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1099,"sourceUnit":1215,"src":"132:23:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":157,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1099,"sourceUnit":1233,"src":"156:31:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":158,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1099,"sourceUnit":1260,"src":"188:42:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":159,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1099,"sourceUnit":1590,"src":"231:33:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":160,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1099,"sourceUnit":1612,"src":"265:33:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":161,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1099,"sourceUnit":1787,"src":"299:33:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":162,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1099,"sourceUnit":1811,"src":"333:46:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":164,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":1611,"src":"647:7:2"},"id":165,"nodeType":"InheritanceSpecifier","src":"647:7:2"},{"baseName":{"id":166,"name":"ERC165","nodeType":"IdentifierPath","referencedDeclaration":1810,"src":"656:6:2"},"id":167,"nodeType":"InheritanceSpecifier","src":"656:6:2"},{"baseName":{"id":168,"name":"IERC721","nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"664:7:2"},"id":169,"nodeType":"InheritanceSpecifier","src":"664:7:2"},{"baseName":{"id":170,"name":"IERC721Metadata","nodeType":"IdentifierPath","referencedDeclaration":1259,"src":"673:15:2"},"id":171,"nodeType":"InheritanceSpecifier","src":"673:15:2"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":163,"nodeType":"StructuredDocumentation","src":"381:246:2","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":1098,"linearizedBaseContracts":[1098,1259,1214,1810,1822,1611],"name":"ERC721","nameLocation":"637:6:2","nodeType":"ContractDefinition","nodes":[{"id":174,"libraryName":{"id":172,"name":"Address","nodeType":"IdentifierPath","referencedDeclaration":1589,"src":"701:7:2"},"nodeType":"UsingForDirective","src":"695:26:2","typeName":{"id":173,"name":"address","nodeType":"ElementaryTypeName","src":"713:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"id":177,"libraryName":{"id":175,"name":"Strings","nodeType":"IdentifierPath","referencedDeclaration":1786,"src":"732:7:2"},"nodeType":"UsingForDirective","src":"726:26:2","typeName":{"id":176,"name":"uint256","nodeType":"ElementaryTypeName","src":"744:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":179,"mutability":"mutable","name":"_name","nameLocation":"791:5:2","nodeType":"VariableDeclaration","scope":1098,"src":"776:20:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":178,"name":"string","nodeType":"ElementaryTypeName","src":"776:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":181,"mutability":"mutable","name":"_symbol","nameLocation":"838:7:2","nodeType":"VariableDeclaration","scope":1098,"src":"823:22:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":180,"name":"string","nodeType":"ElementaryTypeName","src":"823:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":185,"mutability":"mutable","name":"_owners","nameLocation":"934:7:2","nodeType":"VariableDeclaration","scope":1098,"src":"898:43:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":184,"keyType":{"id":182,"name":"uint256","nodeType":"ElementaryTypeName","src":"906:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"898:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":183,"name":"address","nodeType":"ElementaryTypeName","src":"917:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":189,"mutability":"mutable","name":"_balances","nameLocation":"1028:9:2","nodeType":"VariableDeclaration","scope":1098,"src":"992:45:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":188,"keyType":{"id":186,"name":"address","nodeType":"ElementaryTypeName","src":"1000:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"992:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":187,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":193,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1129:15:2","nodeType":"VariableDeclaration","scope":1098,"src":"1093:51:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":192,"keyType":{"id":190,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1093:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":191,"name":"address","nodeType":"ElementaryTypeName","src":"1112:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":199,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1252:18:2","nodeType":"VariableDeclaration","scope":1098,"src":"1199:71:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":198,"keyType":{"id":194,"name":"address","nodeType":"ElementaryTypeName","src":"1207:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1199:44:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":197,"keyType":{"id":195,"name":"address","nodeType":"ElementaryTypeName","src":"1226:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1218:24:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":196,"name":"bool","nodeType":"ElementaryTypeName","src":"1237:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":215,"nodeType":"Block","src":"1446:57:2","statements":[{"expression":{"id":209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":207,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"1456:5:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":208,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"1464:5:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1456:13:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":210,"nodeType":"ExpressionStatement","src":"1456:13:2"},{"expression":{"id":213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":211,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"1479:7:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":212,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"1489:7:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1479:17:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":214,"nodeType":"ExpressionStatement","src":"1479:17:2"}]},"documentation":{"id":200,"nodeType":"StructuredDocumentation","src":"1277:108:2","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":216,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":202,"mutability":"mutable","name":"name_","nameLocation":"1416:5:2","nodeType":"VariableDeclaration","scope":216,"src":"1402:19:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":201,"name":"string","nodeType":"ElementaryTypeName","src":"1402:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":204,"mutability":"mutable","name":"symbol_","nameLocation":"1437:7:2","nodeType":"VariableDeclaration","scope":216,"src":"1423:21:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":203,"name":"string","nodeType":"ElementaryTypeName","src":"1423:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1401:44:2"},"returnParameters":{"id":206,"nodeType":"ParameterList","parameters":[],"src":"1446:0:2"},"scope":1098,"src":"1390:113:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1809,1821],"body":{"id":246,"nodeType":"Block","src":"1678:192:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":227,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"1707:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":229,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1214,"src":"1727:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1214_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1214_$","typeString":"type(contract IERC721)"}],"id":228,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1722:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1722:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1214","typeString":"type(contract IERC721)"}},"id":231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1722:25:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1707:40:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":233,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"1763:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":235,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"1783:15:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1259_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1259_$","typeString":"type(contract IERC721Metadata)"}],"id":234,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1778:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1778:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$1259","typeString":"type(contract IERC721Metadata)"}},"id":237,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1778:33:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1763:48:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:104:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":242,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":219,"src":"1851:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":240,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1827:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$1098_$","typeString":"type(contract super ERC721)"}},"id":241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1809,"src":"1827:23:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1827:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:156:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":226,"id":245,"nodeType":"Return","src":"1688:175:2"}]},"documentation":{"id":217,"nodeType":"StructuredDocumentation","src":"1509:56:2","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":247,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1579:17:2","nodeType":"FunctionDefinition","overrides":{"id":223,"nodeType":"OverrideSpecifier","overrides":[{"id":221,"name":"ERC165","nodeType":"IdentifierPath","referencedDeclaration":1810,"src":"1646:6:2"},{"id":222,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":1822,"src":"1654:7:2"}],"src":"1637:25:2"},"parameters":{"id":220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":219,"mutability":"mutable","name":"interfaceId","nameLocation":"1604:11:2","nodeType":"VariableDeclaration","scope":247,"src":"1597:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":218,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1597:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1596:20:2"},"returnParameters":{"id":226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":247,"src":"1672:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":224,"name":"bool","nodeType":"ElementaryTypeName","src":"1672:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1671:6:2"},"scope":1098,"src":"1570:300:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1139],"body":{"id":270,"nodeType":"Block","src":"2010:123:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":257,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"2028:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2045:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":259,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2037:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":258,"name":"address","nodeType":"ElementaryTypeName","src":"2037:7:2","typeDescriptions":{}}},"id":261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2037:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2028:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2049:43:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""},"value":"ERC721: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""}],"id":256,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2020:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2020:73:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":265,"nodeType":"ExpressionStatement","src":"2020:73:2"},{"expression":{"baseExpression":{"id":266,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"2110:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":268,"indexExpression":{"id":267,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":250,"src":"2120:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2110:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":255,"id":269,"nodeType":"Return","src":"2103:23:2"}]},"documentation":{"id":248,"nodeType":"StructuredDocumentation","src":"1876:48:2","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":271,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1938:9:2","nodeType":"FunctionDefinition","overrides":{"id":252,"nodeType":"OverrideSpecifier","overrides":[],"src":"1983:8:2"},"parameters":{"id":251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":250,"mutability":"mutable","name":"owner","nameLocation":"1956:5:2","nodeType":"VariableDeclaration","scope":271,"src":"1948:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":249,"name":"address","nodeType":"ElementaryTypeName","src":"1948:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1947:15:2"},"returnParameters":{"id":255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":254,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":271,"src":"2001:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":253,"name":"uint256","nodeType":"ElementaryTypeName","src":"2001:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2000:9:2"},"scope":1098,"src":"1929:204:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1147],"body":{"id":298,"nodeType":"Block","src":"2271:138:2","statements":[{"assignments":[281],"declarations":[{"constant":false,"id":281,"mutability":"mutable","name":"owner","nameLocation":"2289:5:2","nodeType":"VariableDeclaration","scope":298,"src":"2281:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":280,"name":"address","nodeType":"ElementaryTypeName","src":"2281:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":285,"initialValue":{"arguments":[{"id":283,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":274,"src":"2306:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":282,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"2297:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2297:17:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2281:33:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":287,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"2332:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":289,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2341:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":288,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:2","typeDescriptions":{}}},"id":291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2341:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2332:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2353:26:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":286,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2324:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2324:56:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":295,"nodeType":"ExpressionStatement","src":"2324:56:2"},{"expression":{"id":296,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":281,"src":"2397:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":279,"id":297,"nodeType":"Return","src":"2390:12:2"}]},"documentation":{"id":272,"nodeType":"StructuredDocumentation","src":"2139:46:2","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":299,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2199:7:2","nodeType":"FunctionDefinition","overrides":{"id":276,"nodeType":"OverrideSpecifier","overrides":[],"src":"2244:8:2"},"parameters":{"id":275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":274,"mutability":"mutable","name":"tokenId","nameLocation":"2215:7:2","nodeType":"VariableDeclaration","scope":299,"src":"2207:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":273,"name":"uint256","nodeType":"ElementaryTypeName","src":"2207:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2206:17:2"},"returnParameters":{"id":279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":278,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":299,"src":"2262:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":277,"name":"address","nodeType":"ElementaryTypeName","src":"2262:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2261:9:2"},"scope":1098,"src":"2190:219:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1244],"body":{"id":308,"nodeType":"Block","src":"2540:29:2","statements":[{"expression":{"id":306,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"2557:5:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":305,"id":307,"nodeType":"Return","src":"2550:12:2"}]},"documentation":{"id":300,"nodeType":"StructuredDocumentation","src":"2415:51:2","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":309,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2480:4:2","nodeType":"FunctionDefinition","overrides":{"id":302,"nodeType":"OverrideSpecifier","overrides":[],"src":"2507:8:2"},"parameters":{"id":301,"nodeType":"ParameterList","parameters":[],"src":"2484:2:2"},"returnParameters":{"id":305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":304,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":309,"src":"2525:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":303,"name":"string","nodeType":"ElementaryTypeName","src":"2525:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2524:15:2"},"scope":1098,"src":"2471:98:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1250],"body":{"id":318,"nodeType":"Block","src":"2704:31:2","statements":[{"expression":{"id":316,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"2721:7:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":315,"id":317,"nodeType":"Return","src":"2714:14:2"}]},"documentation":{"id":310,"nodeType":"StructuredDocumentation","src":"2575:53:2","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":319,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2642:6:2","nodeType":"FunctionDefinition","overrides":{"id":312,"nodeType":"OverrideSpecifier","overrides":[],"src":"2671:8:2"},"parameters":{"id":311,"nodeType":"ParameterList","parameters":[],"src":"2648:2:2"},"returnParameters":{"id":315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":314,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":319,"src":"2689:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":313,"name":"string","nodeType":"ElementaryTypeName","src":"2689:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2688:15:2"},"scope":1098,"src":"2633:102:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1258],"body":{"id":357,"nodeType":"Block","src":"2889:188:2","statements":[{"expression":{"arguments":[{"id":329,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":322,"src":"2914:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":328,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":976,"src":"2899:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2899:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":331,"nodeType":"ExpressionStatement","src":"2899:23:2"},{"assignments":[333],"declarations":[{"constant":false,"id":333,"mutability":"mutable","name":"baseURI","nameLocation":"2947:7:2","nodeType":"VariableDeclaration","scope":357,"src":"2933:21:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":332,"name":"string","nodeType":"ElementaryTypeName","src":"2933:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":336,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":334,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":367,"src":"2957:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2957:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2933:34:2"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":339,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"2990:7:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":338,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2984:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":337,"name":"bytes","nodeType":"ElementaryTypeName","src":"2984:5:2","typeDescriptions":{}}},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2984:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2984:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":342,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3008:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2984:25:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3068:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2984:86:2","trueExpression":{"arguments":[{"arguments":[{"id":348,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"3036:7:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":349,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":322,"src":"3045:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1669,"src":"3045:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3045:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":346,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3019:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":347,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"3019:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3019:45:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":345,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3012:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":344,"name":"string","nodeType":"ElementaryTypeName","src":"3012:6:2","typeDescriptions":{}}},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3012:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":327,"id":356,"nodeType":"Return","src":"2977:93:2"}]},"documentation":{"id":320,"nodeType":"StructuredDocumentation","src":"2741:55:2","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":358,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2810:8:2","nodeType":"FunctionDefinition","overrides":{"id":324,"nodeType":"OverrideSpecifier","overrides":[],"src":"2856:8:2"},"parameters":{"id":323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":322,"mutability":"mutable","name":"tokenId","nameLocation":"2827:7:2","nodeType":"VariableDeclaration","scope":358,"src":"2819:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":321,"name":"uint256","nodeType":"ElementaryTypeName","src":"2819:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2818:17:2"},"returnParameters":{"id":327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":326,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":358,"src":"2874:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":325,"name":"string","nodeType":"ElementaryTypeName","src":"2874:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2873:15:2"},"scope":1098,"src":"2801:276:2","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":366,"nodeType":"Block","src":"3385:26:2","statements":[{"expression":{"hexValue":"","id":364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3402:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":363,"id":365,"nodeType":"Return","src":"3395:9:2"}]},"documentation":{"id":359,"nodeType":"StructuredDocumentation","src":"3083:231:2","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":367,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3328:8:2","nodeType":"FunctionDefinition","parameters":{"id":360,"nodeType":"ParameterList","parameters":[],"src":"3336:2:2"},"returnParameters":{"id":363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":362,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":367,"src":"3370:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":361,"name":"string","nodeType":"ElementaryTypeName","src":"3370:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3369:15:2"},"scope":1098,"src":"3319:92:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1187],"body":{"id":409,"nodeType":"Block","src":"3538:336:2","statements":[{"assignments":[377],"declarations":[{"constant":false,"id":377,"mutability":"mutable","name":"owner","nameLocation":"3556:5:2","nodeType":"VariableDeclaration","scope":409,"src":"3548:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":376,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":382,"initialValue":{"arguments":[{"id":380,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"3579:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":378,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"3564:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1098_$","typeString":"type(contract ERC721)"}},"id":379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":299,"src":"3564:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3564:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3548:39:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":384,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"3605:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":385,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"3611:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3605:11:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572","id":387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3618:35:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""},"value":"ERC721: approval to current owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""}],"id":383,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3597:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3597:57:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":389,"nodeType":"ExpressionStatement","src":"3597:57:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":391,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"3686:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3686:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":393,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"3702:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3686:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":396,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"3728:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":397,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"3735:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3735:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":395,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"3711:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3711:37:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3686:62:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","id":401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3762:63:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""},"value":"ERC721: approve caller is not token owner or approved for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""}],"id":390,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3665:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3665:170:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":403,"nodeType":"ExpressionStatement","src":"3665:170:2"},{"expression":{"arguments":[{"id":405,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"3855:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":406,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"3859:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":404,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"3846:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3846:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":408,"nodeType":"ExpressionStatement","src":"3846:21:2"}]},"documentation":{"id":368,"nodeType":"StructuredDocumentation","src":"3417:46:2","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":410,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3477:7:2","nodeType":"FunctionDefinition","overrides":{"id":374,"nodeType":"OverrideSpecifier","overrides":[],"src":"3529:8:2"},"parameters":{"id":373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":370,"mutability":"mutable","name":"to","nameLocation":"3493:2:2","nodeType":"VariableDeclaration","scope":410,"src":"3485:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":369,"name":"address","nodeType":"ElementaryTypeName","src":"3485:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":372,"mutability":"mutable","name":"tokenId","nameLocation":"3505:7:2","nodeType":"VariableDeclaration","scope":410,"src":"3497:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":371,"name":"uint256","nodeType":"ElementaryTypeName","src":"3497:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3484:29:2"},"returnParameters":{"id":375,"nodeType":"ParameterList","parameters":[],"src":"3538:0:2"},"scope":1098,"src":"3468:406:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1203],"body":{"id":427,"nodeType":"Block","src":"4020:82:2","statements":[{"expression":{"arguments":[{"id":420,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"4045:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":419,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":976,"src":"4030:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4030:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":422,"nodeType":"ExpressionStatement","src":"4030:23:2"},{"expression":{"baseExpression":{"id":423,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"4071:15:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":425,"indexExpression":{"id":424,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"4087:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4071:24:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":418,"id":426,"nodeType":"Return","src":"4064:31:2"}]},"documentation":{"id":411,"nodeType":"StructuredDocumentation","src":"3880:50:2","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":428,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3944:11:2","nodeType":"FunctionDefinition","overrides":{"id":415,"nodeType":"OverrideSpecifier","overrides":[],"src":"3993:8:2"},"parameters":{"id":414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":413,"mutability":"mutable","name":"tokenId","nameLocation":"3964:7:2","nodeType":"VariableDeclaration","scope":428,"src":"3956:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":412,"name":"uint256","nodeType":"ElementaryTypeName","src":"3956:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3955:17:2"},"returnParameters":{"id":418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":428,"src":"4011:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":416,"name":"address","nodeType":"ElementaryTypeName","src":"4011:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4010:9:2"},"scope":1098,"src":"3935:167:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1195],"body":{"id":444,"nodeType":"Block","src":"4253:69:2","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":438,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"4282:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4282:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":440,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"4296:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":441,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"4306:8:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":437,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"4263:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4263:52:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":443,"nodeType":"ExpressionStatement","src":"4263:52:2"}]},"documentation":{"id":429,"nodeType":"StructuredDocumentation","src":"4108:56:2","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":445,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4178:17:2","nodeType":"FunctionDefinition","overrides":{"id":435,"nodeType":"OverrideSpecifier","overrides":[],"src":"4244:8:2"},"parameters":{"id":434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":431,"mutability":"mutable","name":"operator","nameLocation":"4204:8:2","nodeType":"VariableDeclaration","scope":445,"src":"4196:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":430,"name":"address","nodeType":"ElementaryTypeName","src":"4196:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":433,"mutability":"mutable","name":"approved","nameLocation":"4219:8:2","nodeType":"VariableDeclaration","scope":445,"src":"4214:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":432,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4195:33:2"},"returnParameters":{"id":436,"nodeType":"ParameterList","parameters":[],"src":"4253:0:2"},"scope":1098,"src":"4169:153:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1213],"body":{"id":462,"nodeType":"Block","src":"4491:59:2","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":456,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"4508:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":458,"indexExpression":{"id":457,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"4527:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:25:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":460,"indexExpression":{"id":459,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"4534:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:35:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":455,"id":461,"nodeType":"Return","src":"4501:42:2"}]},"documentation":{"id":446,"nodeType":"StructuredDocumentation","src":"4328:55:2","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":463,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4397:16:2","nodeType":"FunctionDefinition","overrides":{"id":452,"nodeType":"OverrideSpecifier","overrides":[],"src":"4467:8:2"},"parameters":{"id":451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":448,"mutability":"mutable","name":"owner","nameLocation":"4422:5:2","nodeType":"VariableDeclaration","scope":463,"src":"4414:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":447,"name":"address","nodeType":"ElementaryTypeName","src":"4414:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":450,"mutability":"mutable","name":"operator","nameLocation":"4437:8:2","nodeType":"VariableDeclaration","scope":463,"src":"4429:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":449,"name":"address","nodeType":"ElementaryTypeName","src":"4429:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4413:33:2"},"returnParameters":{"id":455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":454,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":463,"src":"4485:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":453,"name":"bool","nodeType":"ElementaryTypeName","src":"4485:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4484:6:2"},"scope":1098,"src":"4388:162:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1179],"body":{"id":489,"nodeType":"Block","src":"4731:207:2","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":476,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"4820:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4820:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":478,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":470,"src":"4834:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":475,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"4801:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4801:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4844:47:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":474,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4793:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4793:99:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":482,"nodeType":"ExpressionStatement","src":"4793:99:2"},{"expression":{"arguments":[{"id":484,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"4913:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":485,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"4919:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":486,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":470,"src":"4923:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":483,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":906,"src":"4903:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4903:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":488,"nodeType":"ExpressionStatement","src":"4903:28:2"}]},"documentation":{"id":464,"nodeType":"StructuredDocumentation","src":"4556:51:2","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":490,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4621:12:2","nodeType":"FunctionDefinition","overrides":{"id":472,"nodeType":"OverrideSpecifier","overrides":[],"src":"4722:8:2"},"parameters":{"id":471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":466,"mutability":"mutable","name":"from","nameLocation":"4651:4:2","nodeType":"VariableDeclaration","scope":490,"src":"4643:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":465,"name":"address","nodeType":"ElementaryTypeName","src":"4643:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":468,"mutability":"mutable","name":"to","nameLocation":"4673:2:2","nodeType":"VariableDeclaration","scope":490,"src":"4665:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":467,"name":"address","nodeType":"ElementaryTypeName","src":"4665:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":470,"mutability":"mutable","name":"tokenId","nameLocation":"4693:7:2","nodeType":"VariableDeclaration","scope":490,"src":"4685:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":469,"name":"uint256","nodeType":"ElementaryTypeName","src":"4685:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4633:73:2"},"returnParameters":{"id":473,"nodeType":"ParameterList","parameters":[],"src":"4731:0:2"},"scope":1098,"src":"4612:326:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1169],"body":{"id":508,"nodeType":"Block","src":"5127:56:2","statements":[{"expression":{"arguments":[{"id":502,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":493,"src":"5154:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":503,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":495,"src":"5160:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":504,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":497,"src":"5164:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5173:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":501,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[509,539],"referencedDeclaration":539,"src":"5137:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5137:39:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":507,"nodeType":"ExpressionStatement","src":"5137:39:2"}]},"documentation":{"id":491,"nodeType":"StructuredDocumentation","src":"4944:55:2","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":509,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5013:16:2","nodeType":"FunctionDefinition","overrides":{"id":499,"nodeType":"OverrideSpecifier","overrides":[],"src":"5118:8:2"},"parameters":{"id":498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":493,"mutability":"mutable","name":"from","nameLocation":"5047:4:2","nodeType":"VariableDeclaration","scope":509,"src":"5039:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":492,"name":"address","nodeType":"ElementaryTypeName","src":"5039:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":495,"mutability":"mutable","name":"to","nameLocation":"5069:2:2","nodeType":"VariableDeclaration","scope":509,"src":"5061:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":494,"name":"address","nodeType":"ElementaryTypeName","src":"5061:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":497,"mutability":"mutable","name":"tokenId","nameLocation":"5089:7:2","nodeType":"VariableDeclaration","scope":509,"src":"5081:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":496,"name":"uint256","nodeType":"ElementaryTypeName","src":"5081:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5029:73:2"},"returnParameters":{"id":500,"nodeType":"ParameterList","parameters":[],"src":"5127:0:2"},"scope":1098,"src":"5004:179:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1159],"body":{"id":538,"nodeType":"Block","src":"5399:164:2","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":524,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"5436:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5436:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":526,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"5450:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":523,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"5417:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5417:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5460:47:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":522,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5409:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5409:99:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":530,"nodeType":"ExpressionStatement","src":"5409:99:2"},{"expression":{"arguments":[{"id":532,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":512,"src":"5532:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":533,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":514,"src":"5538:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":534,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"5542:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":535,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":518,"src":"5551:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":531,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"5518:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5518:38:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":537,"nodeType":"ExpressionStatement","src":"5518:38:2"}]},"documentation":{"id":510,"nodeType":"StructuredDocumentation","src":"5189:55:2","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":539,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5258:16:2","nodeType":"FunctionDefinition","overrides":{"id":520,"nodeType":"OverrideSpecifier","overrides":[],"src":"5390:8:2"},"parameters":{"id":519,"nodeType":"ParameterList","parameters":[{"constant":false,"id":512,"mutability":"mutable","name":"from","nameLocation":"5292:4:2","nodeType":"VariableDeclaration","scope":539,"src":"5284:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":511,"name":"address","nodeType":"ElementaryTypeName","src":"5284:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":514,"mutability":"mutable","name":"to","nameLocation":"5314:2:2","nodeType":"VariableDeclaration","scope":539,"src":"5306:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":513,"name":"address","nodeType":"ElementaryTypeName","src":"5306:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":516,"mutability":"mutable","name":"tokenId","nameLocation":"5334:7:2","nodeType":"VariableDeclaration","scope":539,"src":"5326:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":515,"name":"uint256","nodeType":"ElementaryTypeName","src":"5326:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":518,"mutability":"mutable","name":"data","nameLocation":"5364:4:2","nodeType":"VariableDeclaration","scope":539,"src":"5351:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":517,"name":"bytes","nodeType":"ElementaryTypeName","src":"5351:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5274:100:2"},"returnParameters":{"id":521,"nodeType":"ParameterList","parameters":[],"src":"5399:0:2"},"scope":1098,"src":"5249:314:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":567,"nodeType":"Block","src":"6564:165:2","statements":[{"expression":{"arguments":[{"id":552,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"6584:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":553,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"6590:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":554,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":546,"src":"6594:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":551,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":906,"src":"6574:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6574:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":556,"nodeType":"ExpressionStatement","src":"6574:28:2"},{"expression":{"arguments":[{"arguments":[{"id":559,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"6643:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":560,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"6649:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":561,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":546,"src":"6653:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":562,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":548,"src":"6662:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":558,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"6620:22:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6620:47:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6669:52:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":557,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6612:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6612:110:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":566,"nodeType":"ExpressionStatement","src":"6612:110:2"}]},"documentation":{"id":540,"nodeType":"StructuredDocumentation","src":"5569:850:2","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":568,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"6433:13:2","nodeType":"FunctionDefinition","parameters":{"id":549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":542,"mutability":"mutable","name":"from","nameLocation":"6464:4:2","nodeType":"VariableDeclaration","scope":568,"src":"6456:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":541,"name":"address","nodeType":"ElementaryTypeName","src":"6456:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":544,"mutability":"mutable","name":"to","nameLocation":"6486:2:2","nodeType":"VariableDeclaration","scope":568,"src":"6478:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":543,"name":"address","nodeType":"ElementaryTypeName","src":"6478:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":546,"mutability":"mutable","name":"tokenId","nameLocation":"6506:7:2","nodeType":"VariableDeclaration","scope":568,"src":"6498:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":545,"name":"uint256","nodeType":"ElementaryTypeName","src":"6498:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":548,"mutability":"mutable","name":"data","nameLocation":"6536:4:2","nodeType":"VariableDeclaration","scope":568,"src":"6523:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":547,"name":"bytes","nodeType":"ElementaryTypeName","src":"6523:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6446:100:2"},"returnParameters":{"id":550,"nodeType":"ParameterList","parameters":[],"src":"6564:0:2"},"scope":1098,"src":"6424:305:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":580,"nodeType":"Block","src":"6913:40:2","statements":[{"expression":{"baseExpression":{"id":576,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"6930:7:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":578,"indexExpression":{"id":577,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":571,"src":"6938:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6930:16:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":575,"id":579,"nodeType":"Return","src":"6923:23:2"}]},"documentation":{"id":569,"nodeType":"StructuredDocumentation","src":"6735:98:2","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"},"id":581,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"6847:8:2","nodeType":"FunctionDefinition","parameters":{"id":572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":571,"mutability":"mutable","name":"tokenId","nameLocation":"6864:7:2","nodeType":"VariableDeclaration","scope":581,"src":"6856:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":570,"name":"uint256","nodeType":"ElementaryTypeName","src":"6856:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6855:17:2"},"returnParameters":{"id":575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":574,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":581,"src":"6904:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":573,"name":"address","nodeType":"ElementaryTypeName","src":"6904:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6903:9:2"},"scope":1098,"src":"6838:115:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":598,"nodeType":"Block","src":"7327:55:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":590,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"7353:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":589,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"7344:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7344:17:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7373:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":593,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7365:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":592,"name":"address","nodeType":"ElementaryTypeName","src":"7365:7:2","typeDescriptions":{}}},"id":595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7365:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7344:31:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":588,"id":597,"nodeType":"Return","src":"7337:38:2"}]},"documentation":{"id":582,"nodeType":"StructuredDocumentation","src":"6959:292:2","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."},"id":599,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"7265:7:2","nodeType":"FunctionDefinition","parameters":{"id":585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":584,"mutability":"mutable","name":"tokenId","nameLocation":"7281:7:2","nodeType":"VariableDeclaration","scope":599,"src":"7273:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":583,"name":"uint256","nodeType":"ElementaryTypeName","src":"7273:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7272:17:2"},"returnParameters":{"id":588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":599,"src":"7321:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":586,"name":"bool","nodeType":"ElementaryTypeName","src":"7321:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7320:6:2"},"scope":1098,"src":"7256:126:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":632,"nodeType":"Block","src":"7639:162:2","statements":[{"assignments":[610],"declarations":[{"constant":false,"id":610,"mutability":"mutable","name":"owner","nameLocation":"7657:5:2","nodeType":"VariableDeclaration","scope":632,"src":"7649:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":609,"name":"address","nodeType":"ElementaryTypeName","src":"7649:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":615,"initialValue":{"arguments":[{"id":613,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"7680:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":611,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"7665:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1098_$","typeString":"type(contract ERC721)"}},"id":612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":299,"src":"7665:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7665:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7649:39:2"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":616,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"7706:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":617,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"7717:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7706:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":620,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"7743:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":621,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"7750:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":619,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"7726:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7726:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:52:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":625,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"7774:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":624,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":428,"src":"7762:11:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7762:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":627,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"7786:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7762:31:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:87:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":630,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7705:89:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":608,"id":631,"nodeType":"Return","src":"7698:96:2"}]},"documentation":{"id":600,"nodeType":"StructuredDocumentation","src":"7388:147:2","text":" @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":633,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"7549:18:2","nodeType":"FunctionDefinition","parameters":{"id":605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":602,"mutability":"mutable","name":"spender","nameLocation":"7576:7:2","nodeType":"VariableDeclaration","scope":633,"src":"7568:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":601,"name":"address","nodeType":"ElementaryTypeName","src":"7568:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":604,"mutability":"mutable","name":"tokenId","nameLocation":"7593:7:2","nodeType":"VariableDeclaration","scope":633,"src":"7585:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":603,"name":"uint256","nodeType":"ElementaryTypeName","src":"7585:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7567:34:2"},"returnParameters":{"id":608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":633,"src":"7633:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":606,"name":"bool","nodeType":"ElementaryTypeName","src":"7633:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7632:6:2"},"scope":1098,"src":"7540:261:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":647,"nodeType":"Block","src":"8196:43:2","statements":[{"expression":{"arguments":[{"id":642,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"8216:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":643,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"8220:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8229:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":641,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[648,677],"referencedDeclaration":677,"src":"8206:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8206:26:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":646,"nodeType":"ExpressionStatement","src":"8206:26:2"}]},"documentation":{"id":634,"nodeType":"StructuredDocumentation","src":"7807:319:2","text":" @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":648,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8140:9:2","nodeType":"FunctionDefinition","parameters":{"id":639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":636,"mutability":"mutable","name":"to","nameLocation":"8158:2:2","nodeType":"VariableDeclaration","scope":648,"src":"8150:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":635,"name":"address","nodeType":"ElementaryTypeName","src":"8150:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":638,"mutability":"mutable","name":"tokenId","nameLocation":"8170:7:2","nodeType":"VariableDeclaration","scope":648,"src":"8162:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":637,"name":"uint256","nodeType":"ElementaryTypeName","src":"8162:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8149:29:2"},"returnParameters":{"id":640,"nodeType":"ParameterList","parameters":[],"src":"8196:0:2"},"scope":1098,"src":"8131:108:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":676,"nodeType":"Block","src":"8574:195:2","statements":[{"expression":{"arguments":[{"id":659,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"8590:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":660,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"8594:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":658,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"8584:5:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8584:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":662,"nodeType":"ExpressionStatement","src":"8584:18:2"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8664:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":666,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8656:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":665,"name":"address","nodeType":"ElementaryTypeName","src":"8656:7:2","typeDescriptions":{}}},"id":668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8656:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":669,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"8668:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":670,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"8672:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":671,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":655,"src":"8681:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":664,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"8633:22:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8633:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8700:52:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":663,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8612:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8612:150:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":675,"nodeType":"ExpressionStatement","src":"8612:150:2"}]},"documentation":{"id":649,"nodeType":"StructuredDocumentation","src":"8245:210:2","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":677,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8469:9:2","nodeType":"FunctionDefinition","parameters":{"id":656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":651,"mutability":"mutable","name":"to","nameLocation":"8496:2:2","nodeType":"VariableDeclaration","scope":677,"src":"8488:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":650,"name":"address","nodeType":"ElementaryTypeName","src":"8488:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":653,"mutability":"mutable","name":"tokenId","nameLocation":"8516:7:2","nodeType":"VariableDeclaration","scope":677,"src":"8508:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":652,"name":"uint256","nodeType":"ElementaryTypeName","src":"8508:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":655,"mutability":"mutable","name":"data","nameLocation":"8546:4:2","nodeType":"VariableDeclaration","scope":677,"src":"8533:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":654,"name":"bytes","nodeType":"ElementaryTypeName","src":"8533:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8478:78:2"},"returnParameters":{"id":657,"nodeType":"ParameterList","parameters":[],"src":"8574:0:2"},"scope":1098,"src":"8460:309:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":753,"nodeType":"Block","src":"9152:859:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":686,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"9170:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9184:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":688,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9176:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":687,"name":"address","nodeType":"ElementaryTypeName","src":"9176:7:2","typeDescriptions":{}}},"id":690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9176:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9170:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9188:34:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":685,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9162:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9162:61:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":694,"nodeType":"ExpressionStatement","src":"9162:61:2"},{"expression":{"arguments":[{"id":699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9241:17:2","subExpression":{"arguments":[{"id":697,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"9250:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":696,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"9242:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9242:16:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9260:30:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":695,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9233:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9233:58:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":702,"nodeType":"ExpressionStatement","src":"9233:58:2"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9331:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":705,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9323:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":704,"name":"address","nodeType":"ElementaryTypeName","src":"9323:7:2","typeDescriptions":{}}},"id":707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9323:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":708,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"9335:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":709,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"9339:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9348:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":703,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"9302:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9302:48:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":712,"nodeType":"ExpressionStatement","src":"9302:48:2"},{"expression":{"arguments":[{"id":717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9445:17:2","subExpression":{"arguments":[{"id":715,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"9454:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":714,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"9446:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9446:16:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9464:30:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":713,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9437:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9437:58:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":720,"nodeType":"ExpressionStatement","src":"9437:58:2"},{"id":727,"nodeType":"UncheckedBlock","src":"9506:360:2","statements":[{"expression":{"id":725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":721,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"9837:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":723,"indexExpression":{"id":722,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"9847:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9837:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9854:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9837:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":726,"nodeType":"ExpressionStatement","src":"9837:18:2"}]},{"expression":{"id":732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":728,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"9876:7:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":730,"indexExpression":{"id":729,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"9884:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9876:16:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":731,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"9895:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9876:21:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":733,"nodeType":"ExpressionStatement","src":"9876:21:2"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9930:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":736,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9922:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":735,"name":"address","nodeType":"ElementaryTypeName","src":"9922:7:2","typeDescriptions":{}}},"id":738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9922:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":739,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"9934:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":740,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"9938:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":734,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"9913:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":741,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9913:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":742,"nodeType":"EmitStatement","src":"9908:38:2"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9985:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":745,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9977:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":744,"name":"address","nodeType":"ElementaryTypeName","src":"9977:7:2","typeDescriptions":{}}},"id":747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9977:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":748,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"9989:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":749,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"9993:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":743,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1097,"src":"9957:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9957:47:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":752,"nodeType":"ExpressionStatement","src":"9957:47:2"}]},"documentation":{"id":678,"nodeType":"StructuredDocumentation","src":"8775:311:2","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":754,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9100:5:2","nodeType":"FunctionDefinition","parameters":{"id":683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":680,"mutability":"mutable","name":"to","nameLocation":"9114:2:2","nodeType":"VariableDeclaration","scope":754,"src":"9106:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":679,"name":"address","nodeType":"ElementaryTypeName","src":"9106:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":682,"mutability":"mutable","name":"tokenId","nameLocation":"9126:7:2","nodeType":"VariableDeclaration","scope":754,"src":"9118:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":681,"name":"uint256","nodeType":"ElementaryTypeName","src":"9118:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9105:29:2"},"returnParameters":{"id":684,"nodeType":"ParameterList","parameters":[],"src":"9152:0:2"},"scope":1098,"src":"9091:920:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":820,"nodeType":"Block","src":"10386:713:2","statements":[{"assignments":[761],"declarations":[{"constant":false,"id":761,"mutability":"mutable","name":"owner","nameLocation":"10404:5:2","nodeType":"VariableDeclaration","scope":820,"src":"10396:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":760,"name":"address","nodeType":"ElementaryTypeName","src":"10396:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":766,"initialValue":{"arguments":[{"id":764,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"10427:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":762,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"10412:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1098_$","typeString":"type(contract ERC721)"}},"id":763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":299,"src":"10412:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10412:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10396:39:2"},{"expression":{"arguments":[{"id":768,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":761,"src":"10467:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10482:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":770,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10474:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":769,"name":"address","nodeType":"ElementaryTypeName","src":"10474:7:2","typeDescriptions":{}}},"id":772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10474:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":773,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"10486:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10495:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":767,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"10446:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10446:51:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":776,"nodeType":"ExpressionStatement","src":"10446:51:2"},{"expression":{"id":782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":777,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":761,"src":"10599:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":780,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"10622:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":778,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"10607:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1098_$","typeString":"type(contract ERC721)"}},"id":779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":299,"src":"10607:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10607:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10599:31:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":783,"nodeType":"ExpressionStatement","src":"10599:31:2"},{"expression":{"id":787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10668:31:2","subExpression":{"baseExpression":{"id":784,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"10675:15:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":786,"indexExpression":{"id":785,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"10691:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10675:24:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":788,"nodeType":"ExpressionStatement","src":"10668:31:2"},{"id":795,"nodeType":"UncheckedBlock","src":"10710:237:2","statements":[{"expression":{"id":793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":789,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"10915:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":791,"indexExpression":{"id":790,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":761,"src":"10925:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10915:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10935:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10915:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":794,"nodeType":"ExpressionStatement","src":"10915:21:2"}]},{"expression":{"id":799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10956:23:2","subExpression":{"baseExpression":{"id":796,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"10963:7:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":798,"indexExpression":{"id":797,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"10971:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10963:16:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":800,"nodeType":"ExpressionStatement","src":"10956:23:2"},{"eventCall":{"arguments":[{"id":802,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":761,"src":"11004:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11019:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":804,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11011:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":803,"name":"address","nodeType":"ElementaryTypeName","src":"11011:7:2","typeDescriptions":{}}},"id":806,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11011:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":807,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"11023:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":801,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"10995:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10995:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":809,"nodeType":"EmitStatement","src":"10990:41:2"},{"expression":{"arguments":[{"id":811,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":761,"src":"11062:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11077:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":813,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11069:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":812,"name":"address","nodeType":"ElementaryTypeName","src":"11069:7:2","typeDescriptions":{}}},"id":815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11069:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":816,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"11081:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11090:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":810,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1097,"src":"11042:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11042:50:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":819,"nodeType":"ExpressionStatement","src":"11042:50:2"}]},"documentation":{"id":755,"nodeType":"StructuredDocumentation","src":"10017:315:2","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":821,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10346:5:2","nodeType":"FunctionDefinition","parameters":{"id":758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":757,"mutability":"mutable","name":"tokenId","nameLocation":"10360:7:2","nodeType":"VariableDeclaration","scope":821,"src":"10352:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":756,"name":"uint256","nodeType":"ElementaryTypeName","src":"10352:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10351:17:2"},"returnParameters":{"id":759,"nodeType":"ParameterList","parameters":[],"src":"10386:0:2"},"scope":1098,"src":"10337:762:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":905,"nodeType":"Block","src":"11532:1124:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":834,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"11565:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":832,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"11550:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1098_$","typeString":"type(contract ERC721)"}},"id":833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":299,"src":"11550:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11550:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":836,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"11577:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11550:31:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11583:39:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":831,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11542:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11542:81:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":840,"nodeType":"ExpressionStatement","src":"11542:81:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":842,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":826,"src":"11641:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11655:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":844,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11647:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":843,"name":"address","nodeType":"ElementaryTypeName","src":"11647:7:2","typeDescriptions":{}}},"id":846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11647:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11641:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11659:38:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":841,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11633:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11633:65:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":850,"nodeType":"ExpressionStatement","src":"11633:65:2"},{"expression":{"arguments":[{"id":852,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"11730:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":853,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":826,"src":"11736:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":854,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"11740:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11749:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":851,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"11709:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11709:42:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":857,"nodeType":"ExpressionStatement","src":"11709:42:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":861,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"11866:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":859,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"11851:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1098_$","typeString":"type(contract ERC721)"}},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":299,"src":"11851:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11851:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":863,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"11878:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11851:31:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11884:39:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":858,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11843:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11843:81:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":867,"nodeType":"ExpressionStatement","src":"11843:81:2"},{"expression":{"id":871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"11986:31:2","subExpression":{"baseExpression":{"id":868,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"11993:15:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":870,"indexExpression":{"id":869,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"12009:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11993:24:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":872,"nodeType":"ExpressionStatement","src":"11986:31:2"},{"id":885,"nodeType":"UncheckedBlock","src":"12028:496:2","statements":[{"expression":{"id":877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":873,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"12461:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":875,"indexExpression":{"id":874,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"12471:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12461:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12480:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12461:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":878,"nodeType":"ExpressionStatement","src":"12461:20:2"},{"expression":{"id":883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":879,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"12495:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":881,"indexExpression":{"id":880,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":826,"src":"12505:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12495:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12512:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12495:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":884,"nodeType":"ExpressionStatement","src":"12495:18:2"}]},{"expression":{"id":890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":886,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"12533:7:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":888,"indexExpression":{"id":887,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"12541:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12533:16:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":889,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":826,"src":"12552:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12533:21:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":891,"nodeType":"ExpressionStatement","src":"12533:21:2"},{"eventCall":{"arguments":[{"id":893,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"12579:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":894,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":826,"src":"12585:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":895,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"12589:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":892,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1113,"src":"12570:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12570:27:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":897,"nodeType":"EmitStatement","src":"12565:32:2"},{"expression":{"arguments":[{"id":899,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"12628:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":900,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":826,"src":"12634:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":901,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"12638:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12647:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":898,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1097,"src":"12608:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12608:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":904,"nodeType":"ExpressionStatement","src":"12608:41:2"}]},"documentation":{"id":822,"nodeType":"StructuredDocumentation","src":"11105:313:2","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":906,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"11432:9:2","nodeType":"FunctionDefinition","parameters":{"id":829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":824,"mutability":"mutable","name":"from","nameLocation":"11459:4:2","nodeType":"VariableDeclaration","scope":906,"src":"11451:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":823,"name":"address","nodeType":"ElementaryTypeName","src":"11451:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":826,"mutability":"mutable","name":"to","nameLocation":"11481:2:2","nodeType":"VariableDeclaration","scope":906,"src":"11473:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":825,"name":"address","nodeType":"ElementaryTypeName","src":"11473:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":828,"mutability":"mutable","name":"tokenId","nameLocation":"11501:7:2","nodeType":"VariableDeclaration","scope":906,"src":"11493:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":827,"name":"uint256","nodeType":"ElementaryTypeName","src":"11493:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11441:73:2"},"returnParameters":{"id":830,"nodeType":"ParameterList","parameters":[],"src":"11532:0:2"},"scope":1098,"src":"11423:1233:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":929,"nodeType":"Block","src":"12832:107:2","statements":[{"expression":{"id":918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":914,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"12842:15:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":916,"indexExpression":{"id":915,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"12858:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12842:24:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":917,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"12869:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12842:29:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":919,"nodeType":"ExpressionStatement","src":"12842:29:2"},{"eventCall":{"arguments":[{"arguments":[{"id":923,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"12910:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":921,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"12895:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1098_$","typeString":"type(contract ERC721)"}},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":299,"src":"12895:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12895:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":925,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"12920:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":926,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"12924:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":920,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"12886:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12886:46:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":928,"nodeType":"EmitStatement","src":"12881:51:2"}]},"documentation":{"id":907,"nodeType":"StructuredDocumentation","src":"12662:101:2","text":" @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."},"id":930,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"12777:8:2","nodeType":"FunctionDefinition","parameters":{"id":912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":909,"mutability":"mutable","name":"to","nameLocation":"12794:2:2","nodeType":"VariableDeclaration","scope":930,"src":"12786:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":908,"name":"address","nodeType":"ElementaryTypeName","src":"12786:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":911,"mutability":"mutable","name":"tokenId","nameLocation":"12806:7:2","nodeType":"VariableDeclaration","scope":930,"src":"12798:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":910,"name":"uint256","nodeType":"ElementaryTypeName","src":"12798:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12785:29:2"},"returnParameters":{"id":913,"nodeType":"ParameterList","parameters":[],"src":"12832:0:2"},"scope":1098,"src":"12768:171:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":961,"nodeType":"Block","src":"13198:184:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":941,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"13216:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":942,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"13225:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13216:17:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","id":944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13235:27:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""},"value":"ERC721: approve to caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""}],"id":940,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13208:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13208:55:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":946,"nodeType":"ExpressionStatement","src":"13208:55:2"},{"expression":{"id":953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":947,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"13273:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":950,"indexExpression":{"id":948,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"13292:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13273:25:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":951,"indexExpression":{"id":949,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"13299:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13273:35:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":952,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"13311:8:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13273:46:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":954,"nodeType":"ExpressionStatement","src":"13273:46:2"},{"eventCall":{"arguments":[{"id":956,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"13349:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":957,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":935,"src":"13356:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":958,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"13366:8:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":955,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1131,"src":"13334:14:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13334:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":960,"nodeType":"EmitStatement","src":"13329:46:2"}]},"documentation":{"id":931,"nodeType":"StructuredDocumentation","src":"12945:125:2","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":962,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"13084:18:2","nodeType":"FunctionDefinition","parameters":{"id":938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":933,"mutability":"mutable","name":"owner","nameLocation":"13120:5:2","nodeType":"VariableDeclaration","scope":962,"src":"13112:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":932,"name":"address","nodeType":"ElementaryTypeName","src":"13112:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":935,"mutability":"mutable","name":"operator","nameLocation":"13143:8:2","nodeType":"VariableDeclaration","scope":962,"src":"13135:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":934,"name":"address","nodeType":"ElementaryTypeName","src":"13135:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":937,"mutability":"mutable","name":"approved","nameLocation":"13166:8:2","nodeType":"VariableDeclaration","scope":962,"src":"13161:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":936,"name":"bool","nodeType":"ElementaryTypeName","src":"13161:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13102:78:2"},"returnParameters":{"id":939,"nodeType":"ParameterList","parameters":[],"src":"13198:0:2"},"scope":1098,"src":"13075:307:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":975,"nodeType":"Block","src":"13529:70:2","statements":[{"expression":{"arguments":[{"arguments":[{"id":970,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":965,"src":"13555:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":969,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"13547:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13547:16:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13565:26:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":968,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13539:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13539:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":974,"nodeType":"ExpressionStatement","src":"13539:53:2"}]},"documentation":{"id":963,"nodeType":"StructuredDocumentation","src":"13388:73:2","text":" @dev Reverts if the `tokenId` has not been minted yet."},"id":976,"implemented":true,"kind":"function","modifiers":[],"name":"_requireMinted","nameLocation":"13475:14:2","nodeType":"FunctionDefinition","parameters":{"id":966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":965,"mutability":"mutable","name":"tokenId","nameLocation":"13498:7:2","nodeType":"VariableDeclaration","scope":976,"src":"13490:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":964,"name":"uint256","nodeType":"ElementaryTypeName","src":"13490:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13489:17:2"},"returnParameters":{"id":967,"nodeType":"ParameterList","parameters":[],"src":"13529:0:2"},"scope":1098,"src":"13466:133:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1037,"nodeType":"Block","src":"14306:676:2","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":990,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"14320:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1277,"src":"14320:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14320:15:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1035,"nodeType":"Block","src":"14940:36:2","statements":[{"expression":{"hexValue":"74727565","id":1033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14961:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":989,"id":1034,"nodeType":"Return","src":"14954:11:2"}]},"id":1036,"nodeType":"IfStatement","src":"14316:660:2","trueBody":{"id":1032,"nodeType":"Block","src":"14337:597:2","statements":[{"clauses":[{"block":{"id":1012,"nodeType":"Block","src":"14451:91:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1006,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"14476:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1007,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"14486:15:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1232_$","typeString":"type(contract IERC721Receiver)"}},"id":1008,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1231,"src":"14486:32:2","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":1009,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"14486:41:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"14476:51:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":989,"id":1011,"nodeType":"Return","src":"14469:58:2"}]},"errorName":"","id":1013,"nodeType":"TryCatchClause","parameters":{"id":1005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1004,"mutability":"mutable","name":"retval","nameLocation":"14443:6:2","nodeType":"VariableDeclaration","scope":1013,"src":"14436:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1003,"name":"bytes4","nodeType":"ElementaryTypeName","src":"14436:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"14435:15:2"},"src":"14427:115:2"},{"block":{"id":1029,"nodeType":"Block","src":"14571:353:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1017,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1015,"src":"14593:6:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"14593:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14610:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14593:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1027,"nodeType":"Block","src":"14720:190:2","statements":[{"AST":{"nodeType":"YulBlock","src":"14806:86:2","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14843:2:2","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"14847:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14839:3:2"},"nodeType":"YulFunctionCall","src":"14839:15:2"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"14862:6:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14856:5:2"},"nodeType":"YulFunctionCall","src":"14856:13:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14832:6:2"},"nodeType":"YulFunctionCall","src":"14832:38:2"},"nodeType":"YulExpressionStatement","src":"14832:38:2"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1015,"isOffset":false,"isSlot":false,"src":"14847:6:2","valueSize":1},{"declaration":1015,"isOffset":false,"isSlot":false,"src":"14862:6:2","valueSize":1}],"id":1026,"nodeType":"InlineAssembly","src":"14797:95:2"}]},"id":1028,"nodeType":"IfStatement","src":"14589:321:2","trueBody":{"id":1025,"nodeType":"Block","src":"14613:101:2","statements":[{"expression":{"arguments":[{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":1022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14642:52:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":1021,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"14635:6:2","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14635:60:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1024,"nodeType":"ExpressionStatement","src":"14635:60:2"}]}}]},"errorName":"","id":1030,"nodeType":"TryCatchClause","parameters":{"id":1016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1015,"mutability":"mutable","name":"reason","nameLocation":"14563:6:2","nodeType":"VariableDeclaration","scope":1030,"src":"14550:19:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1014,"name":"bytes","nodeType":"ElementaryTypeName","src":"14550:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14549:21:2"},"src":"14543:381:2"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":997,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"14392:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14392:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":999,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"14406:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1000,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"14412:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1001,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"14421:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":994,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"14371:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":993,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"14355:15:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1232_$","typeString":"type(contract IERC721Receiver)"}},"id":995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14355:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1232","typeString":"contract IERC721Receiver"}},"id":996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1231,"src":"14355:36:2","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":1002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14355:71:2","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1031,"nodeType":"TryStatement","src":"14351:573:2"}]}}]},"documentation":{"id":977,"nodeType":"StructuredDocumentation","src":"13605:541:2","text":" @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"},"id":1038,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"14160:22:2","nodeType":"FunctionDefinition","parameters":{"id":986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":979,"mutability":"mutable","name":"from","nameLocation":"14200:4:2","nodeType":"VariableDeclaration","scope":1038,"src":"14192:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":978,"name":"address","nodeType":"ElementaryTypeName","src":"14192:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":981,"mutability":"mutable","name":"to","nameLocation":"14222:2:2","nodeType":"VariableDeclaration","scope":1038,"src":"14214:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":980,"name":"address","nodeType":"ElementaryTypeName","src":"14214:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":983,"mutability":"mutable","name":"tokenId","nameLocation":"14242:7:2","nodeType":"VariableDeclaration","scope":1038,"src":"14234:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":982,"name":"uint256","nodeType":"ElementaryTypeName","src":"14234:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":985,"mutability":"mutable","name":"data","nameLocation":"14272:4:2","nodeType":"VariableDeclaration","scope":1038,"src":"14259:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":984,"name":"bytes","nodeType":"ElementaryTypeName","src":"14259:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14182:100:2"},"returnParameters":{"id":989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":988,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1038,"src":"14300:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":987,"name":"bool","nodeType":"ElementaryTypeName","src":"14300:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14299:6:2"},"scope":1098,"src":"14151:831:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1083,"nodeType":"Block","src":"15856:238:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1050,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1047,"src":"15870:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15882:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15870:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1082,"nodeType":"IfStatement","src":"15866:222:2","trueBody":{"id":1081,"nodeType":"Block","src":"15885:203:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1053,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"15903:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15919:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1055,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15911:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1054,"name":"address","nodeType":"ElementaryTypeName","src":"15911:7:2","typeDescriptions":{}}},"id":1057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15911:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15903:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1066,"nodeType":"IfStatement","src":"15899:85:2","trueBody":{"id":1065,"nodeType":"Block","src":"15923:61:2","statements":[{"expression":{"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1059,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"15941:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1061,"indexExpression":{"id":1060,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"15951:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15941:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1062,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1047,"src":"15960:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15941:28:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1064,"nodeType":"ExpressionStatement","src":"15941:28:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1067,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"16001:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16015:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1069,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16007:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1068,"name":"address","nodeType":"ElementaryTypeName","src":"16007:7:2","typeDescriptions":{}}},"id":1071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16007:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16001:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1080,"nodeType":"IfStatement","src":"15997:81:2","trueBody":{"id":1079,"nodeType":"Block","src":"16019:59:2","statements":[{"expression":{"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1073,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"16037:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1075,"indexExpression":{"id":1074,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"16047:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16037:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1076,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1047,"src":"16054:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16037:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1078,"nodeType":"ExpressionStatement","src":"16037:26:2"}]}}]}}]},"documentation":{"id":1039,"nodeType":"StructuredDocumentation","src":"14988:705:2","text":" @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1084,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"15707:20:2","nodeType":"FunctionDefinition","parameters":{"id":1048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1041,"mutability":"mutable","name":"from","nameLocation":"15745:4:2","nodeType":"VariableDeclaration","scope":1084,"src":"15737:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1040,"name":"address","nodeType":"ElementaryTypeName","src":"15737:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1043,"mutability":"mutable","name":"to","nameLocation":"15767:2:2","nodeType":"VariableDeclaration","scope":1084,"src":"15759:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1042,"name":"address","nodeType":"ElementaryTypeName","src":"15759:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1045,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1084,"src":"15779:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1044,"name":"uint256","nodeType":"ElementaryTypeName","src":"15779:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1047,"mutability":"mutable","name":"batchSize","nameLocation":"15823:9:2","nodeType":"VariableDeclaration","scope":1084,"src":"15815:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1046,"name":"uint256","nodeType":"ElementaryTypeName","src":"15815:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15727:111:2"},"returnParameters":{"id":1049,"nodeType":"ParameterList","parameters":[],"src":"15856:0:2"},"scope":1098,"src":"15698:396:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1096,"nodeType":"Block","src":"16951:2:2","statements":[]},"documentation":{"id":1085,"nodeType":"StructuredDocumentation","src":"16100:695:2","text":" @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1097,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"16809:19:2","nodeType":"FunctionDefinition","parameters":{"id":1094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1087,"mutability":"mutable","name":"from","nameLocation":"16846:4:2","nodeType":"VariableDeclaration","scope":1097,"src":"16838:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1086,"name":"address","nodeType":"ElementaryTypeName","src":"16838:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1089,"mutability":"mutable","name":"to","nameLocation":"16868:2:2","nodeType":"VariableDeclaration","scope":1097,"src":"16860:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1088,"name":"address","nodeType":"ElementaryTypeName","src":"16860:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1091,"mutability":"mutable","name":"firstTokenId","nameLocation":"16888:12:2","nodeType":"VariableDeclaration","scope":1097,"src":"16880:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1090,"name":"uint256","nodeType":"ElementaryTypeName","src":"16880:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1093,"mutability":"mutable","name":"batchSize","nameLocation":"16918:9:2","nodeType":"VariableDeclaration","scope":1097,"src":"16910:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1092,"name":"uint256","nodeType":"ElementaryTypeName","src":"16910:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16828:105:2"},"returnParameters":{"id":1095,"nodeType":"ParameterList","parameters":[],"src":"16951:0:2"},"scope":1098,"src":"16800:153:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1099,"src":"628:16327:2","usedErrors":[]}],"src":"107:16849:2"},"id":2},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[1822],"IERC721":[1214]},"id":1215,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1100,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:3"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1101,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1215,"sourceUnit":1823,"src":"133:47:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1103,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":1822,"src":"271:7:3"},"id":1104,"nodeType":"InheritanceSpecifier","src":"271:7:3"}],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1102,"nodeType":"StructuredDocumentation","src":"182:67:3","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":1214,"linearizedBaseContracts":[1214,1822],"name":"IERC721","nameLocation":"260:7:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1105,"nodeType":"StructuredDocumentation","src":"285:88:3","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"id":1113,"name":"Transfer","nameLocation":"384:8:3","nodeType":"EventDefinition","parameters":{"id":1112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1107,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"409:4:3","nodeType":"VariableDeclaration","scope":1113,"src":"393:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1106,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1109,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"431:2:3","nodeType":"VariableDeclaration","scope":1113,"src":"415:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1108,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1111,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"451:7:3","nodeType":"VariableDeclaration","scope":1113,"src":"435:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1110,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"392:67:3"},"src":"378:82:3"},{"anonymous":false,"documentation":{"id":1114,"nodeType":"StructuredDocumentation","src":"466:94:3","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"id":1122,"name":"Approval","nameLocation":"571:8:3","nodeType":"EventDefinition","parameters":{"id":1121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1116,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"596:5:3","nodeType":"VariableDeclaration","scope":1122,"src":"580:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1115,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1118,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"619:8:3","nodeType":"VariableDeclaration","scope":1122,"src":"603:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1117,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1120,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"645:7:3","nodeType":"VariableDeclaration","scope":1122,"src":"629:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1119,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:74:3"},"src":"565:89:3"},{"anonymous":false,"documentation":{"id":1123,"nodeType":"StructuredDocumentation","src":"660:117:3","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"id":1131,"name":"ApprovalForAll","nameLocation":"788:14:3","nodeType":"EventDefinition","parameters":{"id":1130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1125,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"819:5:3","nodeType":"VariableDeclaration","scope":1131,"src":"803:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1124,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1127,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"842:8:3","nodeType":"VariableDeclaration","scope":1131,"src":"826:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1126,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1129,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"857:8:3","nodeType":"VariableDeclaration","scope":1131,"src":"852:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1128,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"802:64:3"},"src":"782:85:3"},{"documentation":{"id":1132,"nodeType":"StructuredDocumentation","src":"873:76:3","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":1139,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"963:9:3","nodeType":"FunctionDefinition","parameters":{"id":1135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1134,"mutability":"mutable","name":"owner","nameLocation":"981:5:3","nodeType":"VariableDeclaration","scope":1139,"src":"973:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1133,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:15:3"},"returnParameters":{"id":1138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1137,"mutability":"mutable","name":"balance","nameLocation":"1019:7:3","nodeType":"VariableDeclaration","scope":1139,"src":"1011:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1136,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:17:3"},"scope":1214,"src":"954:74:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1140,"nodeType":"StructuredDocumentation","src":"1034:131:3","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":1147,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1179:7:3","nodeType":"FunctionDefinition","parameters":{"id":1143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1142,"mutability":"mutable","name":"tokenId","nameLocation":"1195:7:3","nodeType":"VariableDeclaration","scope":1147,"src":"1187:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1141,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:17:3"},"returnParameters":{"id":1146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1145,"mutability":"mutable","name":"owner","nameLocation":"1235:5:3","nodeType":"VariableDeclaration","scope":1147,"src":"1227:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1144,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1226:15:3"},"scope":1214,"src":"1170:72:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1148,"nodeType":"StructuredDocumentation","src":"1248:556:3","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":1159,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1818:16:3","nodeType":"FunctionDefinition","parameters":{"id":1157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1150,"mutability":"mutable","name":"from","nameLocation":"1852:4:3","nodeType":"VariableDeclaration","scope":1159,"src":"1844:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1149,"name":"address","nodeType":"ElementaryTypeName","src":"1844:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1152,"mutability":"mutable","name":"to","nameLocation":"1874:2:3","nodeType":"VariableDeclaration","scope":1159,"src":"1866:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1151,"name":"address","nodeType":"ElementaryTypeName","src":"1866:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1154,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:3","nodeType":"VariableDeclaration","scope":1159,"src":"1886:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1153,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1156,"mutability":"mutable","name":"data","nameLocation":"1926:4:3","nodeType":"VariableDeclaration","scope":1159,"src":"1911:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1155,"name":"bytes","nodeType":"ElementaryTypeName","src":"1911:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1834:102:3"},"returnParameters":{"id":1158,"nodeType":"ParameterList","parameters":[],"src":"1945:0:3"},"scope":1214,"src":"1809:137:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1160,"nodeType":"StructuredDocumentation","src":"1952:687:3","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":1169,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2653:16:3","nodeType":"FunctionDefinition","parameters":{"id":1167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1162,"mutability":"mutable","name":"from","nameLocation":"2687:4:3","nodeType":"VariableDeclaration","scope":1169,"src":"2679:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1161,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1164,"mutability":"mutable","name":"to","nameLocation":"2709:2:3","nodeType":"VariableDeclaration","scope":1169,"src":"2701:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1163,"name":"address","nodeType":"ElementaryTypeName","src":"2701:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1166,"mutability":"mutable","name":"tokenId","nameLocation":"2729:7:3","nodeType":"VariableDeclaration","scope":1169,"src":"2721:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1165,"name":"uint256","nodeType":"ElementaryTypeName","src":"2721:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2669:73:3"},"returnParameters":{"id":1168,"nodeType":"ParameterList","parameters":[],"src":"2751:0:3"},"scope":1214,"src":"2644:108:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1170,"nodeType":"StructuredDocumentation","src":"2758:732:3","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1179,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3504:12:3","nodeType":"FunctionDefinition","parameters":{"id":1177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1172,"mutability":"mutable","name":"from","nameLocation":"3534:4:3","nodeType":"VariableDeclaration","scope":1179,"src":"3526:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1171,"name":"address","nodeType":"ElementaryTypeName","src":"3526:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1174,"mutability":"mutable","name":"to","nameLocation":"3556:2:3","nodeType":"VariableDeclaration","scope":1179,"src":"3548:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1173,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1176,"mutability":"mutable","name":"tokenId","nameLocation":"3576:7:3","nodeType":"VariableDeclaration","scope":1179,"src":"3568:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1175,"name":"uint256","nodeType":"ElementaryTypeName","src":"3568:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3516:73:3"},"returnParameters":{"id":1178,"nodeType":"ParameterList","parameters":[],"src":"3598:0:3"},"scope":1214,"src":"3495:104:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1180,"nodeType":"StructuredDocumentation","src":"3605:452:3","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1187,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4071:7:3","nodeType":"FunctionDefinition","parameters":{"id":1185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1182,"mutability":"mutable","name":"to","nameLocation":"4087:2:3","nodeType":"VariableDeclaration","scope":1187,"src":"4079:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1181,"name":"address","nodeType":"ElementaryTypeName","src":"4079:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1184,"mutability":"mutable","name":"tokenId","nameLocation":"4099:7:3","nodeType":"VariableDeclaration","scope":1187,"src":"4091:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1183,"name":"uint256","nodeType":"ElementaryTypeName","src":"4091:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4078:29:3"},"returnParameters":{"id":1186,"nodeType":"ParameterList","parameters":[],"src":"4116:0:3"},"scope":1214,"src":"4062:55:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1188,"nodeType":"StructuredDocumentation","src":"4123:309:3","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":1195,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4446:17:3","nodeType":"FunctionDefinition","parameters":{"id":1193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1190,"mutability":"mutable","name":"operator","nameLocation":"4472:8:3","nodeType":"VariableDeclaration","scope":1195,"src":"4464:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1189,"name":"address","nodeType":"ElementaryTypeName","src":"4464:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1192,"mutability":"mutable","name":"_approved","nameLocation":"4487:9:3","nodeType":"VariableDeclaration","scope":1195,"src":"4482:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1191,"name":"bool","nodeType":"ElementaryTypeName","src":"4482:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4463:34:3"},"returnParameters":{"id":1194,"nodeType":"ParameterList","parameters":[],"src":"4506:0:3"},"scope":1214,"src":"4437:70:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1196,"nodeType":"StructuredDocumentation","src":"4513:139:3","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":1203,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4666:11:3","nodeType":"FunctionDefinition","parameters":{"id":1199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1198,"mutability":"mutable","name":"tokenId","nameLocation":"4686:7:3","nodeType":"VariableDeclaration","scope":1203,"src":"4678:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1197,"name":"uint256","nodeType":"ElementaryTypeName","src":"4678:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4677:17:3"},"returnParameters":{"id":1202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1201,"mutability":"mutable","name":"operator","nameLocation":"4726:8:3","nodeType":"VariableDeclaration","scope":1203,"src":"4718:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1200,"name":"address","nodeType":"ElementaryTypeName","src":"4718:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4717:18:3"},"scope":1214,"src":"4657:79:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1204,"nodeType":"StructuredDocumentation","src":"4742:138:3","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":1213,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4894:16:3","nodeType":"FunctionDefinition","parameters":{"id":1209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1206,"mutability":"mutable","name":"owner","nameLocation":"4919:5:3","nodeType":"VariableDeclaration","scope":1213,"src":"4911:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1205,"name":"address","nodeType":"ElementaryTypeName","src":"4911:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1208,"mutability":"mutable","name":"operator","nameLocation":"4934:8:3","nodeType":"VariableDeclaration","scope":1213,"src":"4926:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1207,"name":"address","nodeType":"ElementaryTypeName","src":"4926:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4910:33:3"},"returnParameters":{"id":1212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1211,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1213,"src":"4967:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1210,"name":"bool","nodeType":"ElementaryTypeName","src":"4967:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4966:6:3"},"scope":1214,"src":"4885:88:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1215,"src":"250:4725:3","usedErrors":[]}],"src":"108:4868:3"},"id":3},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1232]},"id":1233,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1216,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:4"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1217,"nodeType":"StructuredDocumentation","src":"141:152:4","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":1232,"linearizedBaseContracts":[1232],"name":"IERC721Receiver","nameLocation":"304:15:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1218,"nodeType":"StructuredDocumentation","src":"326:493:4","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":1231,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"833:16:4","nodeType":"FunctionDefinition","parameters":{"id":1227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1220,"mutability":"mutable","name":"operator","nameLocation":"867:8:4","nodeType":"VariableDeclaration","scope":1231,"src":"859:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1219,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1222,"mutability":"mutable","name":"from","nameLocation":"893:4:4","nodeType":"VariableDeclaration","scope":1231,"src":"885:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1221,"name":"address","nodeType":"ElementaryTypeName","src":"885:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1224,"mutability":"mutable","name":"tokenId","nameLocation":"915:7:4","nodeType":"VariableDeclaration","scope":1231,"src":"907:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1223,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1226,"mutability":"mutable","name":"data","nameLocation":"947:4:4","nodeType":"VariableDeclaration","scope":1231,"src":"932:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1225,"name":"bytes","nodeType":"ElementaryTypeName","src":"932:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"849:108:4"},"returnParameters":{"id":1230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1229,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1231,"src":"976:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1228,"name":"bytes4","nodeType":"ElementaryTypeName","src":"976:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"975:8:4"},"scope":1232,"src":"824:160:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1233,"src":"294:692:4","usedErrors":[]}],"src":"116:871:4"},"id":4},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC165":[1822],"IERC721":[1214],"IERC721Metadata":[1259]},"id":1260,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1234,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:5"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":1235,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1260,"sourceUnit":1215,"src":"137:24:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1237,"name":"IERC721","nodeType":"IdentifierPath","referencedDeclaration":1214,"src":"326:7:5"},"id":1238,"nodeType":"InheritanceSpecifier","src":"326:7:5"}],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1236,"nodeType":"StructuredDocumentation","src":"163:133:5","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":1259,"linearizedBaseContracts":[1259,1214,1822],"name":"IERC721Metadata","nameLocation":"307:15:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1239,"nodeType":"StructuredDocumentation","src":"340:58:5","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":1244,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"412:4:5","nodeType":"FunctionDefinition","parameters":{"id":1240,"nodeType":"ParameterList","parameters":[],"src":"416:2:5"},"returnParameters":{"id":1243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1242,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1244,"src":"442:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1241,"name":"string","nodeType":"ElementaryTypeName","src":"442:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"441:15:5"},"scope":1259,"src":"403:54:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1245,"nodeType":"StructuredDocumentation","src":"463:60:5","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":1250,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"537:6:5","nodeType":"FunctionDefinition","parameters":{"id":1246,"nodeType":"ParameterList","parameters":[],"src":"543:2:5"},"returnParameters":{"id":1249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1248,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1250,"src":"569:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1247,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"568:15:5"},"scope":1259,"src":"528:56:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1251,"nodeType":"StructuredDocumentation","src":"590:90:5","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":1258,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"694:8:5","nodeType":"FunctionDefinition","parameters":{"id":1254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1253,"mutability":"mutable","name":"tokenId","nameLocation":"711:7:5","nodeType":"VariableDeclaration","scope":1258,"src":"703:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1252,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"702:17:5"},"returnParameters":{"id":1257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1256,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1258,"src":"743:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1255,"name":"string","nodeType":"ElementaryTypeName","src":"743:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"742:15:5"},"scope":1259,"src":"685:73:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1260,"src":"297:463:5","usedErrors":[]}],"src":"112:649:5"},"id":5},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1589]},"id":1590,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1261,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:6"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1262,"nodeType":"StructuredDocumentation","src":"126:67:6","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1589,"linearizedBaseContracts":[1589],"name":"Address","nameLocation":"202:7:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":1276,"nodeType":"Block","src":"1241:254:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1270,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1265,"src":"1465:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"1465:12:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1465:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1269,"id":1275,"nodeType":"Return","src":"1458:30:6"}]},"documentation":{"id":1263,"nodeType":"StructuredDocumentation","src":"216:954:6","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1277,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:6","nodeType":"FunctionDefinition","parameters":{"id":1266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1265,"mutability":"mutable","name":"account","nameLocation":"1203:7:6","nodeType":"VariableDeclaration","scope":1277,"src":"1195:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1264,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:6"},"returnParameters":{"id":1269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1268,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1277,"src":"1235:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1267,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:6"},"scope":1589,"src":"1175:320:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1310,"nodeType":"Block","src":"2483:241:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1288,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1589","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1589","typeString":"library Address"}],"id":1287,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1286,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:6","typeDescriptions":{}}},"id":1289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2501:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2501:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1291,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"2526:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1285,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2493:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1295,"nodeType":"ExpressionStatement","src":"2493:73:6"},{"assignments":[1297,null],"declarations":[{"constant":false,"id":1297,"mutability":"mutable","name":"success","nameLocation":"2583:7:6","nodeType":"VariableDeclaration","scope":1310,"src":"2578:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1296,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1304,"initialValue":{"arguments":[{"hexValue":"","id":1302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1298,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2596:9:6","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2596:14:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1300,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"2618:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2596:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:6"},{"expression":{"arguments":[{"id":1306,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1297,"src":"2647:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1305,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2639:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1309,"nodeType":"ExpressionStatement","src":"2639:78:6"}]},"documentation":{"id":1278,"nodeType":"StructuredDocumentation","src":"1501:906:6","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1311,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:6","nodeType":"FunctionDefinition","parameters":{"id":1283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1280,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:6","nodeType":"VariableDeclaration","scope":1311,"src":"2431:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1279,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:6","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1282,"mutability":"mutable","name":"amount","nameLocation":"2466:6:6","nodeType":"VariableDeclaration","scope":1311,"src":"2458:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1281,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:6"},"returnParameters":{"id":1284,"nodeType":"ParameterList","parameters":[],"src":"2483:0:6"},"scope":1589,"src":"2412:312:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1328,"nodeType":"Block","src":"3555:96:6","statements":[{"expression":{"arguments":[{"id":1322,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"3594:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1323,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1316,"src":"3602:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1321,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1369,1413],"referencedDeclaration":1413,"src":"3572:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3572:72:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1320,"id":1327,"nodeType":"Return","src":"3565:79:6"}]},"documentation":{"id":1312,"nodeType":"StructuredDocumentation","src":"2730:731:6","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1329,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:6","nodeType":"FunctionDefinition","parameters":{"id":1317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1314,"mutability":"mutable","name":"target","nameLocation":"3496:6:6","nodeType":"VariableDeclaration","scope":1329,"src":"3488:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1313,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1316,"mutability":"mutable","name":"data","nameLocation":"3517:4:6","nodeType":"VariableDeclaration","scope":1329,"src":"3504:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1315,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:6"},"returnParameters":{"id":1320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1319,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1329,"src":"3541:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1318,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:6"},"scope":1589,"src":"3466:185:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1348,"nodeType":"Block","src":"4020:76:6","statements":[{"expression":{"arguments":[{"id":1342,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"4059:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1343,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1334,"src":"4067:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1345,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"4076:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1341,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1369,1413],"referencedDeclaration":1413,"src":"4037:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4037:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1340,"id":1347,"nodeType":"Return","src":"4030:59:6"}]},"documentation":{"id":1330,"nodeType":"StructuredDocumentation","src":"3657:211:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1349,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:6","nodeType":"FunctionDefinition","parameters":{"id":1337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1332,"mutability":"mutable","name":"target","nameLocation":"3912:6:6","nodeType":"VariableDeclaration","scope":1349,"src":"3904:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1331,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1334,"mutability":"mutable","name":"data","nameLocation":"3941:4:6","nodeType":"VariableDeclaration","scope":1349,"src":"3928:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1333,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1336,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:6","nodeType":"VariableDeclaration","scope":1349,"src":"3955:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1335,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:6"},"returnParameters":{"id":1340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1339,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1349,"src":"4006:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1338,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:6"},"scope":1589,"src":"3873:223:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1368,"nodeType":"Block","src":"4601:111:6","statements":[{"expression":{"arguments":[{"id":1362,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1352,"src":"4640:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1363,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"4648:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1364,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1356,"src":"4654:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1361,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1369,1413],"referencedDeclaration":1413,"src":"4618:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4618:87:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1360,"id":1367,"nodeType":"Return","src":"4611:94:6"}]},"documentation":{"id":1350,"nodeType":"StructuredDocumentation","src":"4102:351:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1369,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:6","nodeType":"FunctionDefinition","parameters":{"id":1357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1352,"mutability":"mutable","name":"target","nameLocation":"4506:6:6","nodeType":"VariableDeclaration","scope":1369,"src":"4498:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1351,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1354,"mutability":"mutable","name":"data","nameLocation":"4535:4:6","nodeType":"VariableDeclaration","scope":1369,"src":"4522:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1353,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1356,"mutability":"mutable","name":"value","nameLocation":"4557:5:6","nodeType":"VariableDeclaration","scope":1369,"src":"4549:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1355,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:6"},"returnParameters":{"id":1360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1359,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1369,"src":"4587:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1358,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:6"},"scope":1589,"src":"4458:254:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1412,"nodeType":"Block","src":"5139:267:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1386,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1589","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1589","typeString":"library Address"}],"id":1385,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1384,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:6","typeDescriptions":{}}},"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5157:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5157:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1389,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"5182:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1383,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5149:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5149:81:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1393,"nodeType":"ExpressionStatement","src":"5149:81:6"},{"assignments":[1395,1397],"declarations":[{"constant":false,"id":1395,"mutability":"mutable","name":"success","nameLocation":"5246:7:6","nodeType":"VariableDeclaration","scope":1412,"src":"5241:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1394,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1397,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:6","nodeType":"VariableDeclaration","scope":1412,"src":"5255:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1396,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1404,"initialValue":{"arguments":[{"id":1402,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1374,"src":"5308:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1398,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"5282:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5282:11:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1400,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"5301:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5282:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:6"},{"expression":{"arguments":[{"id":1406,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"5357:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1407,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1395,"src":"5365:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1408,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1397,"src":"5374:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1409,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"5386:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1405,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1544,"src":"5330:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5330:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1382,"id":1411,"nodeType":"Return","src":"5323:76:6"}]},"documentation":{"id":1370,"nodeType":"StructuredDocumentation","src":"4718:237:6","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1413,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:6","nodeType":"FunctionDefinition","parameters":{"id":1379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1372,"mutability":"mutable","name":"target","nameLocation":"5008:6:6","nodeType":"VariableDeclaration","scope":1413,"src":"5000:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1371,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1374,"mutability":"mutable","name":"data","nameLocation":"5037:4:6","nodeType":"VariableDeclaration","scope":1413,"src":"5024:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1373,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1376,"mutability":"mutable","name":"value","nameLocation":"5059:5:6","nodeType":"VariableDeclaration","scope":1413,"src":"5051:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1375,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1378,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:6","nodeType":"VariableDeclaration","scope":1413,"src":"5074:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1377,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:6"},"returnParameters":{"id":1382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1381,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1413,"src":"5125:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1380,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:6"},"scope":1589,"src":"4960:446:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1429,"nodeType":"Block","src":"5683:97:6","statements":[{"expression":{"arguments":[{"id":1424,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1416,"src":"5719:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1425,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"5727:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1423,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1430,1459],"referencedDeclaration":1459,"src":"5700:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5700:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1422,"id":1428,"nodeType":"Return","src":"5693:80:6"}]},"documentation":{"id":1414,"nodeType":"StructuredDocumentation","src":"5412:166:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1430,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:6","nodeType":"FunctionDefinition","parameters":{"id":1419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1416,"mutability":"mutable","name":"target","nameLocation":"5619:6:6","nodeType":"VariableDeclaration","scope":1430,"src":"5611:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1415,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1418,"mutability":"mutable","name":"data","nameLocation":"5640:4:6","nodeType":"VariableDeclaration","scope":1430,"src":"5627:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1417,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:6"},"returnParameters":{"id":1422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1421,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1430,"src":"5669:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1420,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:6"},"scope":1589,"src":"5583:197:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1458,"nodeType":"Block","src":"6122:168:6","statements":[{"assignments":[1443,1445],"declarations":[{"constant":false,"id":1443,"mutability":"mutable","name":"success","nameLocation":"6138:7:6","nodeType":"VariableDeclaration","scope":1458,"src":"6133:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1442,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1445,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:6","nodeType":"VariableDeclaration","scope":1458,"src":"6147:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1444,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1450,"initialValue":{"arguments":[{"id":1448,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"6192:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1446,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"6174:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:6","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6174:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:6"},{"expression":{"arguments":[{"id":1452,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1433,"src":"6241:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1453,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"6249:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1454,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"6258:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1455,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1437,"src":"6270:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1451,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1544,"src":"6214:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6214:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1441,"id":1457,"nodeType":"Return","src":"6207:76:6"}]},"documentation":{"id":1431,"nodeType":"StructuredDocumentation","src":"5786:173:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1459,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:6","nodeType":"FunctionDefinition","parameters":{"id":1438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1433,"mutability":"mutable","name":"target","nameLocation":"6009:6:6","nodeType":"VariableDeclaration","scope":1459,"src":"6001:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1432,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1435,"mutability":"mutable","name":"data","nameLocation":"6038:4:6","nodeType":"VariableDeclaration","scope":1459,"src":"6025:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1434,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1437,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:6","nodeType":"VariableDeclaration","scope":1459,"src":"6052:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1436,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:6"},"returnParameters":{"id":1441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1440,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1459,"src":"6108:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1439,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:6"},"scope":1589,"src":"5964:326:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1475,"nodeType":"Block","src":"6566:101:6","statements":[{"expression":{"arguments":[{"id":1470,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"6604:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1471,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"6612:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1469,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1476,1505],"referencedDeclaration":1505,"src":"6583:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6583:77:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1468,"id":1474,"nodeType":"Return","src":"6576:84:6"}]},"documentation":{"id":1460,"nodeType":"StructuredDocumentation","src":"6296:168:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1476,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:6","nodeType":"FunctionDefinition","parameters":{"id":1465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1462,"mutability":"mutable","name":"target","nameLocation":"6507:6:6","nodeType":"VariableDeclaration","scope":1476,"src":"6499:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1461,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1464,"mutability":"mutable","name":"data","nameLocation":"6528:4:6","nodeType":"VariableDeclaration","scope":1476,"src":"6515:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1463,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:6"},"returnParameters":{"id":1468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1476,"src":"6552:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1466,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:6"},"scope":1589,"src":"6469:198:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1504,"nodeType":"Block","src":"7008:170:6","statements":[{"assignments":[1489,1491],"declarations":[{"constant":false,"id":1489,"mutability":"mutable","name":"success","nameLocation":"7024:7:6","nodeType":"VariableDeclaration","scope":1504,"src":"7019:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1488,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1491,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:6","nodeType":"VariableDeclaration","scope":1504,"src":"7033:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1490,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1496,"initialValue":{"arguments":[{"id":1494,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"7080:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1492,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"7060:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:6","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7060:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:6"},{"expression":{"arguments":[{"id":1498,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"7129:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1499,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"7137:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1500,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"7146:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1501,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1483,"src":"7158:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1497,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1544,"src":"7102:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7102:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1487,"id":1503,"nodeType":"Return","src":"7095:76:6"}]},"documentation":{"id":1477,"nodeType":"StructuredDocumentation","src":"6673:175:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1505,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:6","nodeType":"FunctionDefinition","parameters":{"id":1484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1479,"mutability":"mutable","name":"target","nameLocation":"6900:6:6","nodeType":"VariableDeclaration","scope":1505,"src":"6892:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1478,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1481,"mutability":"mutable","name":"data","nameLocation":"6929:4:6","nodeType":"VariableDeclaration","scope":1505,"src":"6916:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1480,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1483,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:6","nodeType":"VariableDeclaration","scope":1505,"src":"6943:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1482,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:6"},"returnParameters":{"id":1487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1486,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1505,"src":"6994:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1485,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:6"},"scope":1589,"src":"6853:325:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1543,"nodeType":"Block","src":"7660:434:6","statements":[{"condition":{"id":1519,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"7674:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1541,"nodeType":"Block","src":"8030:58:6","statements":[{"expression":{"arguments":[{"id":1537,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"8052:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1538,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"8064:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1536,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"8044:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8044:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1540,"nodeType":"ExpressionStatement","src":"8044:33:6"}]},"id":1542,"nodeType":"IfStatement","src":"7670:418:6","trueBody":{"id":1535,"nodeType":"Block","src":"7683:341:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1520,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"7701:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7701:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1532,"nodeType":"IfStatement","src":"7697:286:6","trueBody":{"id":1531,"nodeType":"Block","src":"7725:258:6","statements":[{"expression":{"arguments":[{"arguments":[{"id":1526,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"7927:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1525,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1277,"src":"7916:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7916:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1524,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7908:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7908:60:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1530,"nodeType":"ExpressionStatement","src":"7908:60:6"}]}},{"expression":{"id":1533,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1512,"src":"8003:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1518,"id":1534,"nodeType":"Return","src":"7996:17:6"}]}}]},"documentation":{"id":1506,"nodeType":"StructuredDocumentation","src":"7184:277:6","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1544,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:6","nodeType":"FunctionDefinition","parameters":{"id":1515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1508,"mutability":"mutable","name":"target","nameLocation":"7519:6:6","nodeType":"VariableDeclaration","scope":1544,"src":"7511:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1507,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1510,"mutability":"mutable","name":"success","nameLocation":"7540:7:6","nodeType":"VariableDeclaration","scope":1544,"src":"7535:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1509,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1512,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:6","nodeType":"VariableDeclaration","scope":1544,"src":"7557:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1511,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1514,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:6","nodeType":"VariableDeclaration","scope":1544,"src":"7590:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1513,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:6"},"returnParameters":{"id":1518,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1517,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1544,"src":"7646:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1516,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:6"},"scope":1589,"src":"7466:628:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1567,"nodeType":"Block","src":"8475:135:6","statements":[{"condition":{"id":1556,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"8489:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1565,"nodeType":"Block","src":"8546:58:6","statements":[{"expression":{"arguments":[{"id":1561,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1549,"src":"8568:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1562,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"8580:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1560,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"8560:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8560:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1564,"nodeType":"ExpressionStatement","src":"8560:33:6"}]},"id":1566,"nodeType":"IfStatement","src":"8485:119:6","trueBody":{"id":1559,"nodeType":"Block","src":"8498:42:6","statements":[{"expression":{"id":1557,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1549,"src":"8519:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1555,"id":1558,"nodeType":"Return","src":"8512:17:6"}]}}]},"documentation":{"id":1545,"nodeType":"StructuredDocumentation","src":"8100:210:6","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1568,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:6","nodeType":"FunctionDefinition","parameters":{"id":1552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1547,"mutability":"mutable","name":"success","nameLocation":"8355:7:6","nodeType":"VariableDeclaration","scope":1568,"src":"8350:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1546,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1549,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:6","nodeType":"VariableDeclaration","scope":1568,"src":"8372:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1548,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1551,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:6","nodeType":"VariableDeclaration","scope":1568,"src":"8405:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1550,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:6"},"returnParameters":{"id":1555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1554,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1568,"src":"8461:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1553,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:6"},"scope":1589,"src":"8315:295:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1587,"nodeType":"Block","src":"8699:457:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1575,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"8775:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8775:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1585,"nodeType":"Block","src":"9105:45:6","statements":[{"expression":{"arguments":[{"id":1582,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1572,"src":"9126:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1581,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:6","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9119:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1584,"nodeType":"ExpressionStatement","src":"9119:20:6"}]},"id":1586,"nodeType":"IfStatement","src":"8771:379:6","trueBody":{"id":1580,"nodeType":"Block","src":"8798:301:6","statements":[{"AST":{"nodeType":"YulBlock","src":"8956:133:6","statements":[{"nodeType":"YulVariableDeclaration","src":"8974:40:6","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9003:10:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8997:5:6"},"nodeType":"YulFunctionCall","src":"8997:17:6"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8978:15:6","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9042:2:6","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9046:10:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9038:3:6"},"nodeType":"YulFunctionCall","src":"9038:19:6"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9059:15:6"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9031:6:6"},"nodeType":"YulFunctionCall","src":"9031:44:6"},"nodeType":"YulExpressionStatement","src":"9031:44:6"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1570,"isOffset":false,"isSlot":false,"src":"9003:10:6","valueSize":1},{"declaration":1570,"isOffset":false,"isSlot":false,"src":"9046:10:6","valueSize":1}],"id":1579,"nodeType":"InlineAssembly","src":"8947:142:6"}]}}]},"id":1588,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:6","nodeType":"FunctionDefinition","parameters":{"id":1573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1570,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:6","nodeType":"VariableDeclaration","scope":1588,"src":"8633:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1569,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1572,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:6","nodeType":"VariableDeclaration","scope":1588,"src":"8658:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1571,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:6"},"returnParameters":{"id":1574,"nodeType":"ParameterList","parameters":[],"src":"8699:0:6"},"scope":1589,"src":"8616:540:6","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1590,"src":"194:8964:6","usedErrors":[]}],"src":"101:9058:6"},"id":6},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1611]},"id":1612,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1591,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:7"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":1592,"nodeType":"StructuredDocumentation","src":"111:496:7","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1611,"linearizedBaseContracts":[1611],"name":"Context","nameLocation":"626:7:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":1600,"nodeType":"Block","src":"702:34:7","statements":[{"expression":{"expression":{"id":1597,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"719:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1596,"id":1599,"nodeType":"Return","src":"712:17:7"}]},"id":1601,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:7","nodeType":"FunctionDefinition","parameters":{"id":1593,"nodeType":"ParameterList","parameters":[],"src":"659:2:7"},"returnParameters":{"id":1596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1595,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1601,"src":"693:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1594,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:7"},"scope":1611,"src":"640:96:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1609,"nodeType":"Block","src":"809:32:7","statements":[{"expression":{"expression":{"id":1606,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"826:8:7","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1605,"id":1608,"nodeType":"Return","src":"819:15:7"}]},"id":1610,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:7","nodeType":"FunctionDefinition","parameters":{"id":1602,"nodeType":"ParameterList","parameters":[],"src":"759:2:7"},"returnParameters":{"id":1605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1604,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1610,"src":"793:14:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1603,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:7"},"scope":1611,"src":"742:99:7","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1612,"src":"608:235:7","usedErrors":[]}],"src":"86:758:7"},"id":7},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[2687],"Strings":[1786]},"id":1787,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1613,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:8"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1614,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1787,"sourceUnit":2688,"src":"126:25:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1615,"nodeType":"StructuredDocumentation","src":"153:34:8","text":" @dev String operations."},"fullyImplemented":true,"id":1786,"linearizedBaseContracts":[1786],"name":"Strings","nameLocation":"196:7:8","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1618,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:8","nodeType":"VariableDeclaration","scope":1786,"src":"210:54:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1616,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:8","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1621,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:8","nodeType":"VariableDeclaration","scope":1786,"src":"270:43:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1619,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:8","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1668,"nodeType":"Block","src":"486:625:8","statements":[{"id":1667,"nodeType":"UncheckedBlock","src":"496:609:8","statements":[{"assignments":[1630],"declarations":[{"constant":false,"id":1630,"mutability":"mutable","name":"length","nameLocation":"528:6:8","nodeType":"VariableDeclaration","scope":1667,"src":"520:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1629,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1637,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1633,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"548:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1631,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"537:4:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2687_$","typeString":"type(library Math)"}},"id":1632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2524,"src":"537:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"537:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:8"},{"assignments":[1639],"declarations":[{"constant":false,"id":1639,"mutability":"mutable","name":"buffer","nameLocation":"586:6:8","nodeType":"VariableDeclaration","scope":1667,"src":"572:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1638,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1644,"initialValue":{"arguments":[{"id":1642,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"606:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1641,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1640,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"595:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:8"},{"assignments":[1646],"declarations":[{"constant":false,"id":1646,"mutability":"mutable","name":"ptr","nameLocation":"635:3:8","nodeType":"VariableDeclaration","scope":1667,"src":"627:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1645,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1647,"nodeType":"VariableDeclarationStatement","src":"627:11:8"},{"AST":{"nodeType":"YulBlock","src":"708:67:8","statements":[{"nodeType":"YulAssignment","src":"726:35:8","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"737:6:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"749:2:8","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"753:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:8"},"nodeType":"YulFunctionCall","src":"745:15:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"733:3:8"},"nodeType":"YulFunctionCall","src":"733:28:8"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"726:3:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1639,"isOffset":false,"isSlot":false,"src":"737:6:8","valueSize":1},{"declaration":1630,"isOffset":false,"isSlot":false,"src":"753:6:8","valueSize":1},{"declaration":1646,"isOffset":false,"isSlot":false,"src":"726:3:8","valueSize":1}],"id":1648,"nodeType":"InlineAssembly","src":"699:76:8"},{"body":{"id":1663,"nodeType":"Block","src":"801:267:8","statements":[{"expression":{"id":1651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:8","subExpression":{"id":1650,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"819:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1652,"nodeType":"ExpressionStatement","src":"819:5:8"},{"AST":{"nodeType":"YulBlock","src":"902:84:8","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"932:3:8"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"946:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"953:2:8","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"942:3:8"},"nodeType":"YulFunctionCall","src":"942:14:8"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"958:8:8"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"937:4:8"},"nodeType":"YulFunctionCall","src":"937:30:8"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"924:7:8"},"nodeType":"YulFunctionCall","src":"924:44:8"},"nodeType":"YulExpressionStatement","src":"924:44:8"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1618,"isOffset":false,"isSlot":false,"src":"958:8:8","valueSize":1},{"declaration":1646,"isOffset":false,"isSlot":false,"src":"932:3:8","valueSize":1},{"declaration":1624,"isOffset":false,"isSlot":false,"src":"946:5:8","valueSize":1}],"id":1653,"nodeType":"InlineAssembly","src":"893:93:8"},{"expression":{"id":1656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1654,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"1003:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1657,"nodeType":"ExpressionStatement","src":"1003:11:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1658,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"1036:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1662,"nodeType":"IfStatement","src":"1032:21:8","trueBody":{"id":1661,"nodeType":"Break","src":"1048:5:8"}}]},"condition":{"hexValue":"74727565","id":1649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1664,"nodeType":"WhileStatement","src":"788:280:8"},{"expression":{"id":1665,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1639,"src":"1088:6:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1628,"id":1666,"nodeType":"Return","src":"1081:13:8"}]}]},"documentation":{"id":1622,"nodeType":"StructuredDocumentation","src":"320:90:8","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1669,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:8","nodeType":"FunctionDefinition","parameters":{"id":1625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1624,"mutability":"mutable","name":"value","nameLocation":"441:5:8","nodeType":"VariableDeclaration","scope":1669,"src":"433:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1623,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:8"},"returnParameters":{"id":1628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1627,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1669,"src":"471:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1626,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:8"},"scope":1786,"src":"415:696:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1688,"nodeType":"Block","src":"1290:100:8","statements":[{"id":1687,"nodeType":"UncheckedBlock","src":"1300:84:8","statements":[{"expression":{"arguments":[{"id":1678,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"1343:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1681,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1672,"src":"1362:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1679,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2687,"src":"1350:4:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2687_$","typeString":"type(library Math)"}},"id":1680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2647,"src":"1350:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1350:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1677,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1689,1765,1785],"referencedDeclaration":1765,"src":"1331:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1331:42:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1676,"id":1686,"nodeType":"Return","src":"1324:49:8"}]}]},"documentation":{"id":1670,"nodeType":"StructuredDocumentation","src":"1117:94:8","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1689,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:8","nodeType":"FunctionDefinition","parameters":{"id":1673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1672,"mutability":"mutable","name":"value","nameLocation":"1245:5:8","nodeType":"VariableDeclaration","scope":1689,"src":"1237:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1671,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:8"},"returnParameters":{"id":1676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1675,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1689,"src":"1275:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1674,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:8"},"scope":1786,"src":"1216:174:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1764,"nodeType":"Block","src":"1603:347:8","statements":[{"assignments":[1700],"declarations":[{"constant":false,"id":1700,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:8","nodeType":"VariableDeclaration","scope":1764,"src":"1613:19:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1699,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1709,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1704,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"1649:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1702,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1701,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1635:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:8"},{"expression":{"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1710,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"1670:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1712,"indexExpression":{"hexValue":"30","id":1711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1715,"nodeType":"ExpressionStatement","src":"1670:15:8"},{"expression":{"id":1720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1716,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"1695:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1718,"indexExpression":{"hexValue":"31","id":1717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1721,"nodeType":"ExpressionStatement","src":"1695:15:8"},{"body":{"id":1750,"nodeType":"Block","src":"1765:83:8","statements":[{"expression":{"id":1744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1736,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"1779:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1738,"indexExpression":{"id":1737,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"1786:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1739,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"1791:8:8","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1743,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1740,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1692,"src":"1800:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:8","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1745,"nodeType":"ExpressionStatement","src":"1779:33:8"},{"expression":{"id":1748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1746,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1692,"src":"1826:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1749,"nodeType":"ExpressionStatement","src":"1826:11:8"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1730,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"1753:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1751,"initializationExpression":{"assignments":[1723],"declarations":[{"constant":false,"id":1723,"mutability":"mutable","name":"i","nameLocation":"1733:1:8","nodeType":"VariableDeclaration","scope":1751,"src":"1725:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1722,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1729,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1725,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"1741:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:8"},"loopExpression":{"expression":{"id":1734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:8","subExpression":{"id":1733,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"1762:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1735,"nodeType":"ExpressionStatement","src":"1760:3:8"},"nodeType":"ForStatement","src":"1720:128:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1753,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1692,"src":"1865:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1752,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1857:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1857:55:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1758,"nodeType":"ExpressionStatement","src":"1857:55:8"},{"expression":{"arguments":[{"id":1761,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"1936:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1760,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1759,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:8","typeDescriptions":{}}},"id":1762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1929:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1698,"id":1763,"nodeType":"Return","src":"1922:21:8"}]},"documentation":{"id":1690,"nodeType":"StructuredDocumentation","src":"1396:112:8","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1765,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:8","nodeType":"FunctionDefinition","parameters":{"id":1695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1692,"mutability":"mutable","name":"value","nameLocation":"1542:5:8","nodeType":"VariableDeclaration","scope":1765,"src":"1534:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1691,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1694,"mutability":"mutable","name":"length","nameLocation":"1557:6:8","nodeType":"VariableDeclaration","scope":1765,"src":"1549:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1693,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:8"},"returnParameters":{"id":1698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1697,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1765,"src":"1588:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1696,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:8"},"scope":1786,"src":"1513:437:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1784,"nodeType":"Block","src":"2175:76:8","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1778,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1768,"src":"2220:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1777,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1776,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:8","typeDescriptions":{}}},"id":1779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2212:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1775,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1774,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:8","typeDescriptions":{}}},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2204:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1781,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"2228:15:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1773,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1689,1765,1785],"referencedDeclaration":1765,"src":"2192:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2192:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1772,"id":1783,"nodeType":"Return","src":"2185:59:8"}]},"documentation":{"id":1766,"nodeType":"StructuredDocumentation","src":"1956:141:8","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1785,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:8","nodeType":"FunctionDefinition","parameters":{"id":1769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1768,"mutability":"mutable","name":"addr","nameLocation":"2131:4:8","nodeType":"VariableDeclaration","scope":1785,"src":"2123:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1767,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:8"},"returnParameters":{"id":1772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1771,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1785,"src":"2160:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1770,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:8"},"scope":1786,"src":"2102:149:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1787,"src":"188:2065:8","usedErrors":[]}],"src":"101:2153:8"},"id":8},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[1810],"IERC165":[1822]},"id":1811,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1788,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:9"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":1789,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1811,"sourceUnit":1823,"src":"124:23:9","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1791,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":1822,"src":"754:7:9"},"id":1792,"nodeType":"InheritanceSpecifier","src":"754:7:9"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":1790,"nodeType":"StructuredDocumentation","src":"149:576:9","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":1810,"linearizedBaseContracts":[1810,1822],"name":"ERC165","nameLocation":"744:6:9","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[1821],"body":{"id":1808,"nodeType":"Block","src":"920:64:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1801,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1795,"src":"937:11:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1803,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1822,"src":"957:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$1822_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$1822_$","typeString":"type(contract IERC165)"}],"id":1802,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:9","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"952:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$1822","typeString":"type(contract IERC165)"}},"id":1805,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1800,"id":1807,"nodeType":"Return","src":"930:47:9"}]},"documentation":{"id":1793,"nodeType":"StructuredDocumentation","src":"768:56:9","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1809,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:9","nodeType":"FunctionDefinition","overrides":{"id":1797,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:9"},"parameters":{"id":1796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1795,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:9","nodeType":"VariableDeclaration","scope":1809,"src":"856:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1794,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:9"},"returnParameters":{"id":1800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1799,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1809,"src":"914:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1798,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:9"},"scope":1810,"src":"829:155:9","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":1811,"src":"726:260:9","usedErrors":[]}],"src":"99:888:9"},"id":9},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[1822]},"id":1823,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1812,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:10"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1813,"nodeType":"StructuredDocumentation","src":"125:279:10","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":1822,"linearizedBaseContracts":[1822],"name":"IERC165","nameLocation":"415:7:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1814,"nodeType":"StructuredDocumentation","src":"429:340:10","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":1821,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:10","nodeType":"FunctionDefinition","parameters":{"id":1817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1816,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:10","nodeType":"VariableDeclaration","scope":1821,"src":"801:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1815,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:10"},"returnParameters":{"id":1820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1819,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1821,"src":"844:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1818,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:10"},"scope":1822,"src":"774:76:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1823,"src":"405:447:10","usedErrors":[]}],"src":"100:753:10"},"id":10},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[2687]},"id":2688,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1824,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:11"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":1825,"nodeType":"StructuredDocumentation","src":"128:73:11","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2687,"linearizedBaseContracts":[2687],"name":"Math","nameLocation":"210:4:11","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":1829,"members":[{"id":1826,"name":"Down","nameLocation":"245:4:11","nodeType":"EnumValue","src":"245:4:11"},{"id":1827,"name":"Up","nameLocation":"287:2:11","nodeType":"EnumValue","src":"287:2:11"},{"id":1828,"name":"Zero","nameLocation":"318:4:11","nodeType":"EnumValue","src":"318:4:11"}],"name":"Rounding","nameLocation":"226:8:11","nodeType":"EnumDefinition","src":"221:122:11"},{"body":{"id":1846,"nodeType":"Block","src":"480:37:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1839,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1832,"src":"497:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1840,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"501:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1843,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"509:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:11","trueExpression":{"id":1842,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1832,"src":"505:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1838,"id":1845,"nodeType":"Return","src":"490:20:11"}]},"documentation":{"id":1830,"nodeType":"StructuredDocumentation","src":"349:59:11","text":" @dev Returns the largest of two numbers."},"id":1847,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:11","nodeType":"FunctionDefinition","parameters":{"id":1835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1832,"mutability":"mutable","name":"a","nameLocation":"434:1:11","nodeType":"VariableDeclaration","scope":1847,"src":"426:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1831,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1834,"mutability":"mutable","name":"b","nameLocation":"445:1:11","nodeType":"VariableDeclaration","scope":1847,"src":"437:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1833,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:11"},"returnParameters":{"id":1838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1837,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1847,"src":"471:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1836,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:11"},"scope":2687,"src":"413:104:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1864,"nodeType":"Block","src":"655:37:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1857,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"672:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1858,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"676:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1861,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"684:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:11","trueExpression":{"id":1860,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"680:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1856,"id":1863,"nodeType":"Return","src":"665:20:11"}]},"documentation":{"id":1848,"nodeType":"StructuredDocumentation","src":"523:60:11","text":" @dev Returns the smallest of two numbers."},"id":1865,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:11","nodeType":"FunctionDefinition","parameters":{"id":1853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1850,"mutability":"mutable","name":"a","nameLocation":"609:1:11","nodeType":"VariableDeclaration","scope":1865,"src":"601:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1849,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1852,"mutability":"mutable","name":"b","nameLocation":"620:1:11","nodeType":"VariableDeclaration","scope":1865,"src":"612:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1851,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:11"},"returnParameters":{"id":1856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1855,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1865,"src":"646:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1854,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:11"},"scope":2687,"src":"588:104:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1887,"nodeType":"Block","src":"876:82:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1875,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1868,"src":"931:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1876,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"935:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1878,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1879,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1868,"src":"941:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1880,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"945:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1882,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1874,"id":1886,"nodeType":"Return","src":"923:28:11"}]},"documentation":{"id":1866,"nodeType":"StructuredDocumentation","src":"698:102:11","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1888,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:11","nodeType":"FunctionDefinition","parameters":{"id":1871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1868,"mutability":"mutable","name":"a","nameLocation":"830:1:11","nodeType":"VariableDeclaration","scope":1888,"src":"822:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1867,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1870,"mutability":"mutable","name":"b","nameLocation":"841:1:11","nodeType":"VariableDeclaration","scope":1888,"src":"833:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1869,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:11"},"returnParameters":{"id":1874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1873,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1888,"src":"867:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1872,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:11"},"scope":2687,"src":"805:153:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1912,"nodeType":"Block","src":"1228:123:11","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1898,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"1316:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1902,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"1330:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1905,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1906,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1893,"src":"1339:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:11","trueExpression":{"hexValue":"30","id":1901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1897,"id":1911,"nodeType":"Return","src":"1309:35:11"}]},"documentation":{"id":1889,"nodeType":"StructuredDocumentation","src":"964:188:11","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":1913,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:11","nodeType":"FunctionDefinition","parameters":{"id":1894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1891,"mutability":"mutable","name":"a","nameLocation":"1182:1:11","nodeType":"VariableDeclaration","scope":1913,"src":"1174:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1890,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1893,"mutability":"mutable","name":"b","nameLocation":"1193:1:11","nodeType":"VariableDeclaration","scope":1913,"src":"1185:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1892,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:11"},"returnParameters":{"id":1897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1896,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1913,"src":"1219:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1895,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:11"},"scope":2687,"src":"1157:194:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2034,"nodeType":"Block","src":"1795:3797:11","statements":[{"id":2033,"nodeType":"UncheckedBlock","src":"1805:3781:11","statements":[{"assignments":[1926],"declarations":[{"constant":false,"id":1926,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:11","nodeType":"VariableDeclaration","scope":2033,"src":"2126:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1925,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1927,"nodeType":"VariableDeclarationStatement","src":"2126:13:11"},{"assignments":[1929],"declarations":[{"constant":false,"id":1929,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:11","nodeType":"VariableDeclaration","scope":2033,"src":"2198:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1928,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1930,"nodeType":"VariableDeclarationStatement","src":"2198:13:11"},{"AST":{"nodeType":"YulBlock","src":"2278:157:11","statements":[{"nodeType":"YulVariableDeclaration","src":"2296:30:11","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2313:1:11"},{"name":"y","nodeType":"YulIdentifier","src":"2316:1:11"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2323:1:11","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2319:3:11"},"nodeType":"YulFunctionCall","src":"2319:6:11"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2306:6:11"},"nodeType":"YulFunctionCall","src":"2306:20:11"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2300:2:11","type":""}]},{"nodeType":"YulAssignment","src":"2343:18:11","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2356:1:11"},{"name":"y","nodeType":"YulIdentifier","src":"2359:1:11"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2352:3:11"},"nodeType":"YulFunctionCall","src":"2352:9:11"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2343:5:11"}]},{"nodeType":"YulAssignment","src":"2378:43:11","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2395:2:11"},{"name":"prod0","nodeType":"YulIdentifier","src":"2399:5:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:11"},"nodeType":"YulFunctionCall","src":"2391:14:11"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2410:2:11"},{"name":"prod0","nodeType":"YulIdentifier","src":"2414:5:11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2407:2:11"},"nodeType":"YulFunctionCall","src":"2407:13:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2387:3:11"},"nodeType":"YulFunctionCall","src":"2387:34:11"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2378:5:11"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1926,"isOffset":false,"isSlot":false,"src":"2343:5:11","valueSize":1},{"declaration":1926,"isOffset":false,"isSlot":false,"src":"2399:5:11","valueSize":1},{"declaration":1926,"isOffset":false,"isSlot":false,"src":"2414:5:11","valueSize":1},{"declaration":1929,"isOffset":false,"isSlot":false,"src":"2378:5:11","valueSize":1},{"declaration":1916,"isOffset":false,"isSlot":false,"src":"2313:1:11","valueSize":1},{"declaration":1916,"isOffset":false,"isSlot":false,"src":"2356:1:11","valueSize":1},{"declaration":1918,"isOffset":false,"isSlot":false,"src":"2316:1:11","valueSize":1},{"declaration":1918,"isOffset":false,"isSlot":false,"src":"2359:1:11","valueSize":1}],"id":1931,"nodeType":"InlineAssembly","src":"2269:166:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1932,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"2516:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1940,"nodeType":"IfStatement","src":"2512:75:11","trueBody":{"id":1939,"nodeType":"Block","src":"2528:59:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1935,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"2553:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1936,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"2561:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1924,"id":1938,"nodeType":"Return","src":"2546:26:11"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1942,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"2697:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1943,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"2711:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1941,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2689:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2689:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1946,"nodeType":"ExpressionStatement","src":"2689:28:11"},{"assignments":[1948],"declarations":[{"constant":false,"id":1948,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:11","nodeType":"VariableDeclaration","scope":2033,"src":"2973:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1947,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1949,"nodeType":"VariableDeclarationStatement","src":"2973:17:11"},{"AST":{"nodeType":"YulBlock","src":"3013:291:11","statements":[{"nodeType":"YulAssignment","src":"3082:38:11","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3102:1:11"},{"name":"y","nodeType":"YulIdentifier","src":"3105:1:11"},{"name":"denominator","nodeType":"YulIdentifier","src":"3108:11:11"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3095:6:11"},"nodeType":"YulFunctionCall","src":"3095:25:11"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3082:9:11"}]},{"nodeType":"YulAssignment","src":"3202:41:11","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3215:5:11"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3225:9:11"},{"name":"prod0","nodeType":"YulIdentifier","src":"3236:5:11"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3222:2:11"},"nodeType":"YulFunctionCall","src":"3222:20:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3211:3:11"},"nodeType":"YulFunctionCall","src":"3211:32:11"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3202:5:11"}]},{"nodeType":"YulAssignment","src":"3260:30:11","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3273:5:11"},{"name":"remainder","nodeType":"YulIdentifier","src":"3280:9:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3269:3:11"},"nodeType":"YulFunctionCall","src":"3269:21:11"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3260:5:11"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1920,"isOffset":false,"isSlot":false,"src":"3108:11:11","valueSize":1},{"declaration":1926,"isOffset":false,"isSlot":false,"src":"3236:5:11","valueSize":1},{"declaration":1926,"isOffset":false,"isSlot":false,"src":"3260:5:11","valueSize":1},{"declaration":1926,"isOffset":false,"isSlot":false,"src":"3273:5:11","valueSize":1},{"declaration":1929,"isOffset":false,"isSlot":false,"src":"3202:5:11","valueSize":1},{"declaration":1929,"isOffset":false,"isSlot":false,"src":"3215:5:11","valueSize":1},{"declaration":1948,"isOffset":false,"isSlot":false,"src":"3082:9:11","valueSize":1},{"declaration":1948,"isOffset":false,"isSlot":false,"src":"3225:9:11","valueSize":1},{"declaration":1948,"isOffset":false,"isSlot":false,"src":"3280:9:11","valueSize":1},{"declaration":1916,"isOffset":false,"isSlot":false,"src":"3102:1:11","valueSize":1},{"declaration":1918,"isOffset":false,"isSlot":false,"src":"3105:1:11","valueSize":1}],"id":1950,"nodeType":"InlineAssembly","src":"3004:300:11"},{"assignments":[1952],"declarations":[{"constant":false,"id":1952,"mutability":"mutable","name":"twos","nameLocation":"3619:4:11","nodeType":"VariableDeclaration","scope":2033,"src":"3611:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1951,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1960,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1953,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"3626:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:11","subExpression":{"id":1954,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"3642:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1958,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:11"},{"AST":{"nodeType":"YulBlock","src":"3681:362:11","statements":[{"nodeType":"YulAssignment","src":"3746:37:11","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3765:11:11"},{"name":"twos","nodeType":"YulIdentifier","src":"3778:4:11"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3761:3:11"},"nodeType":"YulFunctionCall","src":"3761:22:11"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3746:11:11"}]},{"nodeType":"YulAssignment","src":"3850:25:11","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3863:5:11"},{"name":"twos","nodeType":"YulIdentifier","src":"3870:4:11"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3859:3:11"},"nodeType":"YulFunctionCall","src":"3859:16:11"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3850:5:11"}]},{"nodeType":"YulAssignment","src":"3990:39:11","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:11","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4013:4:11"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4006:3:11"},"nodeType":"YulFunctionCall","src":"4006:12:11"},{"name":"twos","nodeType":"YulIdentifier","src":"4020:4:11"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4002:3:11"},"nodeType":"YulFunctionCall","src":"4002:23:11"},{"kind":"number","nodeType":"YulLiteral","src":"4027:1:11","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:11"},"nodeType":"YulFunctionCall","src":"3998:31:11"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3990:4:11"}]}]},"evmVersion":"london","externalReferences":[{"declaration":1920,"isOffset":false,"isSlot":false,"src":"3746:11:11","valueSize":1},{"declaration":1920,"isOffset":false,"isSlot":false,"src":"3765:11:11","valueSize":1},{"declaration":1926,"isOffset":false,"isSlot":false,"src":"3850:5:11","valueSize":1},{"declaration":1926,"isOffset":false,"isSlot":false,"src":"3863:5:11","valueSize":1},{"declaration":1952,"isOffset":false,"isSlot":false,"src":"3778:4:11","valueSize":1},{"declaration":1952,"isOffset":false,"isSlot":false,"src":"3870:4:11","valueSize":1},{"declaration":1952,"isOffset":false,"isSlot":false,"src":"3990:4:11","valueSize":1},{"declaration":1952,"isOffset":false,"isSlot":false,"src":"4013:4:11","valueSize":1},{"declaration":1952,"isOffset":false,"isSlot":false,"src":"4020:4:11","valueSize":1}],"id":1961,"nodeType":"InlineAssembly","src":"3672:371:11"},{"expression":{"id":1966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1962,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"4109:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1963,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"4118:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1964,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"4126:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1967,"nodeType":"ExpressionStatement","src":"4109:21:11"},{"assignments":[1969],"declarations":[{"constant":false,"id":1969,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:11","nodeType":"VariableDeclaration","scope":2033,"src":"4448:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1968,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1976,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:11","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1971,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"4471:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1973,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:11"},{"expression":{"id":1983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1977,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"4704:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1979,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"4719:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1980,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"4733:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1984,"nodeType":"ExpressionStatement","src":"4704:36:11"},{"expression":{"id":1991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1985,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"4773:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1987,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"4788:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1988,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"4802:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1992,"nodeType":"ExpressionStatement","src":"4773:36:11"},{"expression":{"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1993,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"4843:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1995,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"4858:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1996,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"4872:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2000,"nodeType":"ExpressionStatement","src":"4843:36:11"},{"expression":{"id":2007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2001,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"4913:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2003,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"4928:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2004,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"4942:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2008,"nodeType":"ExpressionStatement","src":"4913:36:11"},{"expression":{"id":2015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2009,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"4983:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2011,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"4998:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2012,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"5012:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2016,"nodeType":"ExpressionStatement","src":"4983:36:11"},{"expression":{"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2017,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"5054:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2019,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"5069:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2020,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"5083:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2024,"nodeType":"ExpressionStatement","src":"5054:36:11"},{"expression":{"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2025,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"5524:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2026,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"5533:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2027,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"5541:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2030,"nodeType":"ExpressionStatement","src":"5524:24:11"},{"expression":{"id":2031,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"5569:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1924,"id":2032,"nodeType":"Return","src":"5562:13:11"}]}]},"documentation":{"id":1914,"nodeType":"StructuredDocumentation","src":"1357:305:11","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2035,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:11","nodeType":"FunctionDefinition","parameters":{"id":1921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1916,"mutability":"mutable","name":"x","nameLocation":"1700:1:11","nodeType":"VariableDeclaration","scope":2035,"src":"1692:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1915,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1918,"mutability":"mutable","name":"y","nameLocation":"1719:1:11","nodeType":"VariableDeclaration","scope":2035,"src":"1711:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1917,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1920,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:11","nodeType":"VariableDeclaration","scope":2035,"src":"1730:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1919,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:11"},"returnParameters":{"id":1924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1923,"mutability":"mutable","name":"result","nameLocation":"1787:6:11","nodeType":"VariableDeclaration","scope":2035,"src":"1779:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1922,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:11"},"scope":2687,"src":"1667:3925:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2078,"nodeType":"Block","src":"5872:189:11","statements":[{"assignments":[2051],"declarations":[{"constant":false,"id":2051,"mutability":"mutable","name":"result","nameLocation":"5890:6:11","nodeType":"VariableDeclaration","scope":2078,"src":"5882:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2050,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2057,"initialValue":{"arguments":[{"id":2053,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"5906:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2054,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2040,"src":"5909:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2055,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2042,"src":"5912:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2052,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2035,2079],"referencedDeclaration":2035,"src":"5899:6:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5899:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:11"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"},"id":2061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2058,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"5938:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2059,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"5950:8:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1829_$","typeString":"type(enum Math.Rounding)"}},"id":2060,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1827,"src":"5950:11:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"}},"src":"5938:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2063,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2038,"src":"5972:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2064,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2040,"src":"5975:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2065,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2042,"src":"5978:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2062,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5965:6:11","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5965:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2075,"nodeType":"IfStatement","src":"5934:98:11","trueBody":{"id":2074,"nodeType":"Block","src":"5996:36:11","statements":[{"expression":{"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2070,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2051,"src":"6010:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2073,"nodeType":"ExpressionStatement","src":"6010:11:11"}]}},{"expression":{"id":2076,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2051,"src":"6048:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2049,"id":2077,"nodeType":"Return","src":"6041:13:11"}]},"documentation":{"id":2036,"nodeType":"StructuredDocumentation","src":"5598:121:11","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2079,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:11","nodeType":"FunctionDefinition","parameters":{"id":2046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2038,"mutability":"mutable","name":"x","nameLocation":"5757:1:11","nodeType":"VariableDeclaration","scope":2079,"src":"5749:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2037,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2040,"mutability":"mutable","name":"y","nameLocation":"5776:1:11","nodeType":"VariableDeclaration","scope":2079,"src":"5768:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2039,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2042,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:11","nodeType":"VariableDeclaration","scope":2079,"src":"5787:19:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2041,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2045,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:11","nodeType":"VariableDeclaration","scope":2079,"src":"5816:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"},"typeName":{"id":2044,"nodeType":"UserDefinedTypeName","pathNode":{"id":2043,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":1829,"src":"5816:8:11"},"referencedDeclaration":1829,"src":"5816:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:11"},"returnParameters":{"id":2049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2048,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2079,"src":"5863:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2047,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:11"},"scope":2687,"src":"5724:337:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2190,"nodeType":"Block","src":"6337:1585:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2087,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"6351:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2093,"nodeType":"IfStatement","src":"6347:45:11","trueBody":{"id":2092,"nodeType":"Block","src":"6359:33:11","statements":[{"expression":{"hexValue":"30","id":2090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2086,"id":2091,"nodeType":"Return","src":"6373:8:11"}]}},{"assignments":[2095],"declarations":[{"constant":false,"id":2095,"mutability":"mutable","name":"result","nameLocation":"7079:6:11","nodeType":"VariableDeclaration","scope":2190,"src":"7071:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2094,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2104,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2098,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7099:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2097,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2359,2395],"referencedDeclaration":2359,"src":"7094:4:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7094:7:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2102,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:11"},{"id":2189,"nodeType":"UncheckedBlock","src":"7508:408:11","statements":[{"expression":{"id":2114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2105,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7532:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2106,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7542:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2107,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7551:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2108,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7555:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2111,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2115,"nodeType":"ExpressionStatement","src":"7532:35:11"},{"expression":{"id":2125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2116,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7581:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2117,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7591:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2118,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7600:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2119,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7604:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2122,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2126,"nodeType":"ExpressionStatement","src":"7581:35:11"},{"expression":{"id":2136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2127,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7630:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2128,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7640:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2129,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7649:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2130,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7653:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2133,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2137,"nodeType":"ExpressionStatement","src":"7630:35:11"},{"expression":{"id":2147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2138,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7679:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2139,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7689:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2140,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7698:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2141,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7702:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2144,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2148,"nodeType":"ExpressionStatement","src":"7679:35:11"},{"expression":{"id":2158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2149,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7728:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2150,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7738:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2151,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7747:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2152,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7751:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2155,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2159,"nodeType":"ExpressionStatement","src":"7728:35:11"},{"expression":{"id":2169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2160,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7777:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2161,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7787:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2162,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7796:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2163,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7800:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2166,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2170,"nodeType":"ExpressionStatement","src":"7777:35:11"},{"expression":{"id":2180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2171,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7826:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2172,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7836:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2173,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7845:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2174,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7849:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2177,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2181,"nodeType":"ExpressionStatement","src":"7826:35:11"},{"expression":{"arguments":[{"id":2183,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7886:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2184,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"7894:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2185,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"7898:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2182,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"7882:3:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7882:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2086,"id":2188,"nodeType":"Return","src":"7875:30:11"}]}]},"documentation":{"id":2080,"nodeType":"StructuredDocumentation","src":"6067:208:11","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2191,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:11","nodeType":"FunctionDefinition","parameters":{"id":2083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2082,"mutability":"mutable","name":"a","nameLocation":"6302:1:11","nodeType":"VariableDeclaration","scope":2191,"src":"6294:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2081,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:11"},"returnParameters":{"id":2086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2085,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2191,"src":"6328:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2084,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:11"},"scope":2687,"src":"6280:1642:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2226,"nodeType":"Block","src":"8098:161:11","statements":[{"id":2225,"nodeType":"UncheckedBlock","src":"8108:145:11","statements":[{"assignments":[2203],"declarations":[{"constant":false,"id":2203,"mutability":"mutable","name":"result","nameLocation":"8140:6:11","nodeType":"VariableDeclaration","scope":2225,"src":"8132:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2202,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2207,"initialValue":{"arguments":[{"id":2205,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2194,"src":"8154:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2204,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2191,2227],"referencedDeclaration":2191,"src":"8149:4:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8149:7:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:11"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2208,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"8177:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"},"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2209,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2197,"src":"8187:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2210,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"8199:8:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1829_$","typeString":"type(enum Math.Rounding)"}},"id":2211,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1827,"src":"8199:11:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"}},"src":"8187:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2213,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"8214:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2214,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"8223:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2216,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2194,"src":"8232:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:11","trueExpression":{"hexValue":"31","id":2219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2222,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2201,"id":2224,"nodeType":"Return","src":"8170:72:11"}]}]},"documentation":{"id":2192,"nodeType":"StructuredDocumentation","src":"7928:89:11","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2227,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:11","nodeType":"FunctionDefinition","parameters":{"id":2198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2194,"mutability":"mutable","name":"a","nameLocation":"8044:1:11","nodeType":"VariableDeclaration","scope":2227,"src":"8036:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2193,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2197,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:11","nodeType":"VariableDeclaration","scope":2227,"src":"8047:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"},"typeName":{"id":2196,"nodeType":"UserDefinedTypeName","pathNode":{"id":2195,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":1829,"src":"8047:8:11"},"referencedDeclaration":1829,"src":"8047:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:11"},"returnParameters":{"id":2201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2200,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2227,"src":"8089:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2199,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:11"},"scope":2687,"src":"8022:237:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2358,"nodeType":"Block","src":"8444:922:11","statements":[{"assignments":[2236],"declarations":[{"constant":false,"id":2236,"mutability":"mutable","name":"result","nameLocation":"8462:6:11","nodeType":"VariableDeclaration","scope":2358,"src":"8454:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2235,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2238,"initialValue":{"hexValue":"30","id":2237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:11"},{"id":2355,"nodeType":"UncheckedBlock","src":"8482:855:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2239,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"8510:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:11","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2253,"nodeType":"IfStatement","src":"8506:99:11","trueBody":{"id":2252,"nodeType":"Block","src":"8528:77:11","statements":[{"expression":{"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2244,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"8546:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:11","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2247,"nodeType":"ExpressionStatement","src":"8546:13:11"},{"expression":{"id":2250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2248,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"8577:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:11","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2251,"nodeType":"ExpressionStatement","src":"8577:13:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2254,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"8622:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2268,"nodeType":"IfStatement","src":"8618:96:11","trueBody":{"id":2267,"nodeType":"Block","src":"8639:75:11","statements":[{"expression":{"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2259,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"8657:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2262,"nodeType":"ExpressionStatement","src":"8657:12:11"},{"expression":{"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2263,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"8687:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2266,"nodeType":"ExpressionStatement","src":"8687:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2269,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"8731:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2283,"nodeType":"IfStatement","src":"8727:96:11","trueBody":{"id":2282,"nodeType":"Block","src":"8748:75:11","statements":[{"expression":{"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2274,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"8766:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2277,"nodeType":"ExpressionStatement","src":"8766:12:11"},{"expression":{"id":2280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2278,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"8796:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2281,"nodeType":"ExpressionStatement","src":"8796:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2284,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"8840:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2298,"nodeType":"IfStatement","src":"8836:96:11","trueBody":{"id":2297,"nodeType":"Block","src":"8857:75:11","statements":[{"expression":{"id":2291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2289,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"8875:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2292,"nodeType":"ExpressionStatement","src":"8875:12:11"},{"expression":{"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2293,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"8905:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2296,"nodeType":"ExpressionStatement","src":"8905:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2299,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"8949:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2313,"nodeType":"IfStatement","src":"8945:93:11","trueBody":{"id":2312,"nodeType":"Block","src":"8965:73:11","statements":[{"expression":{"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2304,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"8983:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2307,"nodeType":"ExpressionStatement","src":"8983:11:11"},{"expression":{"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2308,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"9012:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2311,"nodeType":"ExpressionStatement","src":"9012:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2314,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"9055:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2328,"nodeType":"IfStatement","src":"9051:93:11","trueBody":{"id":2327,"nodeType":"Block","src":"9071:73:11","statements":[{"expression":{"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2319,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"9089:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2322,"nodeType":"ExpressionStatement","src":"9089:11:11"},{"expression":{"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2323,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"9118:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2326,"nodeType":"ExpressionStatement","src":"9118:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2329,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"9161:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2343,"nodeType":"IfStatement","src":"9157:93:11","trueBody":{"id":2342,"nodeType":"Block","src":"9177:73:11","statements":[{"expression":{"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2334,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"9195:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2337,"nodeType":"ExpressionStatement","src":"9195:11:11"},{"expression":{"id":2340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2338,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"9224:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2341,"nodeType":"ExpressionStatement","src":"9224:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2344,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"9267:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2354,"nodeType":"IfStatement","src":"9263:64:11","trueBody":{"id":2353,"nodeType":"Block","src":"9283:44:11","statements":[{"expression":{"id":2351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2349,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"9301:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2352,"nodeType":"ExpressionStatement","src":"9301:11:11"}]}}]},{"expression":{"id":2356,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"9353:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2234,"id":2357,"nodeType":"Return","src":"9346:13:11"}]},"documentation":{"id":2228,"nodeType":"StructuredDocumentation","src":"8265:113:11","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2359,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:11","nodeType":"FunctionDefinition","parameters":{"id":2231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2230,"mutability":"mutable","name":"value","nameLocation":"8405:5:11","nodeType":"VariableDeclaration","scope":2359,"src":"8397:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2229,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:11"},"returnParameters":{"id":2234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2233,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2359,"src":"8435:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2232,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:11"},"scope":2687,"src":"8383:983:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2394,"nodeType":"Block","src":"9599:165:11","statements":[{"id":2393,"nodeType":"UncheckedBlock","src":"9609:149:11","statements":[{"assignments":[2371],"declarations":[{"constant":false,"id":2371,"mutability":"mutable","name":"result","nameLocation":"9641:6:11","nodeType":"VariableDeclaration","scope":2393,"src":"9633:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2370,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2375,"initialValue":{"arguments":[{"id":2373,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2362,"src":"9655:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2372,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2359,2395],"referencedDeclaration":2359,"src":"9650:4:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9650:11:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:11"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2376,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2371,"src":"9682:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"},"id":2380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2377,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2365,"src":"9692:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2378,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"9704:8:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1829_$","typeString":"type(enum Math.Rounding)"}},"id":2379,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1827,"src":"9704:11:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"}},"src":"9692:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2382,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2371,"src":"9724:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2384,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2362,"src":"9733:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:11","trueExpression":{"hexValue":"31","id":2387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2390,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2369,"id":2392,"nodeType":"Return","src":"9675:72:11"}]}]},"documentation":{"id":2360,"nodeType":"StructuredDocumentation","src":"9372:142:11","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2395,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:11","nodeType":"FunctionDefinition","parameters":{"id":2366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2362,"mutability":"mutable","name":"value","nameLocation":"9541:5:11","nodeType":"VariableDeclaration","scope":2395,"src":"9533:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2361,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2365,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:11","nodeType":"VariableDeclaration","scope":2395,"src":"9548:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"},"typeName":{"id":2364,"nodeType":"UserDefinedTypeName","pathNode":{"id":2363,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":1829,"src":"9548:8:11"},"referencedDeclaration":1829,"src":"9548:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:11"},"returnParameters":{"id":2369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2368,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2395,"src":"9590:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2367,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:11"},"scope":2687,"src":"9519:245:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2523,"nodeType":"Block","src":"9951:828:11","statements":[{"assignments":[2404],"declarations":[{"constant":false,"id":2404,"mutability":"mutable","name":"result","nameLocation":"9969:6:11","nodeType":"VariableDeclaration","scope":2523,"src":"9961:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2403,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2406,"initialValue":{"hexValue":"30","id":2405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:11"},{"id":2520,"nodeType":"UncheckedBlock","src":"9989:761:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2407,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"10017:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2410,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:11","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2423,"nodeType":"IfStatement","src":"10013:99:11","trueBody":{"id":2422,"nodeType":"Block","src":"10034:78:11","statements":[{"expression":{"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2412,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"10052:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2415,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:11","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2417,"nodeType":"ExpressionStatement","src":"10052:15:11"},{"expression":{"id":2420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2418,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"10085:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2421,"nodeType":"ExpressionStatement","src":"10085:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2424,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"10129:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2427,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:11","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2440,"nodeType":"IfStatement","src":"10125:99:11","trueBody":{"id":2439,"nodeType":"Block","src":"10146:78:11","statements":[{"expression":{"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2429,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"10164:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2432,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:11","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2434,"nodeType":"ExpressionStatement","src":"10164:15:11"},{"expression":{"id":2437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2435,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"10197:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2438,"nodeType":"ExpressionStatement","src":"10197:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2441,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"10241:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2444,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:11","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2457,"nodeType":"IfStatement","src":"10237:99:11","trueBody":{"id":2456,"nodeType":"Block","src":"10258:78:11","statements":[{"expression":{"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2446,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"10276:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2449,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:11","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2451,"nodeType":"ExpressionStatement","src":"10276:15:11"},{"expression":{"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2452,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"10309:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2455,"nodeType":"ExpressionStatement","src":"10309:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2458,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"10353:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2461,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:11","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2474,"nodeType":"IfStatement","src":"10349:96:11","trueBody":{"id":2473,"nodeType":"Block","src":"10369:76:11","statements":[{"expression":{"id":2467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2463,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"10387:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2466,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:11","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2468,"nodeType":"ExpressionStatement","src":"10387:14:11"},{"expression":{"id":2471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2469,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"10419:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2472,"nodeType":"ExpressionStatement","src":"10419:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2475,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"10462:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2478,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:11","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2491,"nodeType":"IfStatement","src":"10458:96:11","trueBody":{"id":2490,"nodeType":"Block","src":"10478:76:11","statements":[{"expression":{"id":2484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2480,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"10496:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2483,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:11","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2485,"nodeType":"ExpressionStatement","src":"10496:14:11"},{"expression":{"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2486,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"10528:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2489,"nodeType":"ExpressionStatement","src":"10528:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2492,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"10571:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2495,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:11","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2508,"nodeType":"IfStatement","src":"10567:96:11","trueBody":{"id":2507,"nodeType":"Block","src":"10587:76:11","statements":[{"expression":{"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2497,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"10605:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2500,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:11","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2502,"nodeType":"ExpressionStatement","src":"10605:14:11"},{"expression":{"id":2505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2503,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"10637:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2506,"nodeType":"ExpressionStatement","src":"10637:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2509,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2398,"src":"10680:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2512,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2519,"nodeType":"IfStatement","src":"10676:64:11","trueBody":{"id":2518,"nodeType":"Block","src":"10696:44:11","statements":[{"expression":{"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2514,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"10714:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2517,"nodeType":"ExpressionStatement","src":"10714:11:11"}]}}]},{"expression":{"id":2521,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"10766:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2402,"id":2522,"nodeType":"Return","src":"10759:13:11"}]},"documentation":{"id":2396,"nodeType":"StructuredDocumentation","src":"9770:114:11","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2524,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:11","nodeType":"FunctionDefinition","parameters":{"id":2399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2398,"mutability":"mutable","name":"value","nameLocation":"9912:5:11","nodeType":"VariableDeclaration","scope":2524,"src":"9904:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2397,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:11"},"returnParameters":{"id":2402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2401,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2524,"src":"9942:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2400,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:11"},"scope":2687,"src":"9889:890:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2559,"nodeType":"Block","src":"11014:165:11","statements":[{"id":2558,"nodeType":"UncheckedBlock","src":"11024:149:11","statements":[{"assignments":[2536],"declarations":[{"constant":false,"id":2536,"mutability":"mutable","name":"result","nameLocation":"11056:6:11","nodeType":"VariableDeclaration","scope":2558,"src":"11048:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2535,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2540,"initialValue":{"arguments":[{"id":2538,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"11071:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2537,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2524,2560],"referencedDeclaration":2524,"src":"11065:5:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11065:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:11"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2541,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"11098:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2542,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2530,"src":"11108:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2543,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"11120:8:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1829_$","typeString":"type(enum Math.Rounding)"}},"id":2544,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1827,"src":"11120:11:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"}},"src":"11108:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2547,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"11139:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2549,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"11148:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:11","trueExpression":{"hexValue":"31","id":2552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2555,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2534,"id":2557,"nodeType":"Return","src":"11091:71:11"}]}]},"documentation":{"id":2525,"nodeType":"StructuredDocumentation","src":"10785:143:11","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2560,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:11","nodeType":"FunctionDefinition","parameters":{"id":2531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2527,"mutability":"mutable","name":"value","nameLocation":"10956:5:11","nodeType":"VariableDeclaration","scope":2560,"src":"10948:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2526,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2530,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:11","nodeType":"VariableDeclaration","scope":2560,"src":"10963:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"},"typeName":{"id":2529,"nodeType":"UserDefinedTypeName","pathNode":{"id":2528,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":1829,"src":"10963:8:11"},"referencedDeclaration":1829,"src":"10963:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:11"},"returnParameters":{"id":2534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2533,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2560,"src":"11005:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2532,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:11"},"scope":2687,"src":"10933:246:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2646,"nodeType":"Block","src":"11493:600:11","statements":[{"assignments":[2569],"declarations":[{"constant":false,"id":2569,"mutability":"mutable","name":"result","nameLocation":"11511:6:11","nodeType":"VariableDeclaration","scope":2646,"src":"11503:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2568,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2571,"initialValue":{"hexValue":"30","id":2570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:11"},{"id":2643,"nodeType":"UncheckedBlock","src":"11531:533:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2572,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"11559:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:11","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2586,"nodeType":"IfStatement","src":"11555:98:11","trueBody":{"id":2585,"nodeType":"Block","src":"11577:76:11","statements":[{"expression":{"id":2579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2577,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"11595:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:11","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2580,"nodeType":"ExpressionStatement","src":"11595:13:11"},{"expression":{"id":2583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2581,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"11626:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2584,"nodeType":"ExpressionStatement","src":"11626:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2587,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"11670:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2601,"nodeType":"IfStatement","src":"11666:95:11","trueBody":{"id":2600,"nodeType":"Block","src":"11687:74:11","statements":[{"expression":{"id":2594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2592,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"11705:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:11","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2595,"nodeType":"ExpressionStatement","src":"11705:12:11"},{"expression":{"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2596,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"11735:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2599,"nodeType":"ExpressionStatement","src":"11735:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2602,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"11778:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2616,"nodeType":"IfStatement","src":"11774:95:11","trueBody":{"id":2615,"nodeType":"Block","src":"11795:74:11","statements":[{"expression":{"id":2609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2607,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"11813:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:11","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2610,"nodeType":"ExpressionStatement","src":"11813:12:11"},{"expression":{"id":2613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2611,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"11843:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2614,"nodeType":"ExpressionStatement","src":"11843:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2617,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"11886:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2631,"nodeType":"IfStatement","src":"11882:95:11","trueBody":{"id":2630,"nodeType":"Block","src":"11903:74:11","statements":[{"expression":{"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2622,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"11921:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:11","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2625,"nodeType":"ExpressionStatement","src":"11921:12:11"},{"expression":{"id":2628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2626,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"11951:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2629,"nodeType":"ExpressionStatement","src":"11951:11:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2632,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"11994:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2642,"nodeType":"IfStatement","src":"11990:64:11","trueBody":{"id":2641,"nodeType":"Block","src":"12010:44:11","statements":[{"expression":{"id":2639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2637,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"12028:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2640,"nodeType":"ExpressionStatement","src":"12028:11:11"}]}}]},{"expression":{"id":2644,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"12080:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2567,"id":2645,"nodeType":"Return","src":"12073:13:11"}]},"documentation":{"id":2561,"nodeType":"StructuredDocumentation","src":"11185:240:11","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2647,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:11","nodeType":"FunctionDefinition","parameters":{"id":2564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2563,"mutability":"mutable","name":"value","nameLocation":"11454:5:11","nodeType":"VariableDeclaration","scope":2647,"src":"11446:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2562,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:11"},"returnParameters":{"id":2567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2647,"src":"11484:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2565,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:11"},"scope":2687,"src":"11430:663:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2685,"nodeType":"Block","src":"12329:173:11","statements":[{"id":2684,"nodeType":"UncheckedBlock","src":"12339:157:11","statements":[{"assignments":[2659],"declarations":[{"constant":false,"id":2659,"mutability":"mutable","name":"result","nameLocation":"12371:6:11","nodeType":"VariableDeclaration","scope":2684,"src":"12363:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2658,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2663,"initialValue":{"arguments":[{"id":2661,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"12387:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2660,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2647,2686],"referencedDeclaration":2647,"src":"12380:6:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12380:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:11"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2664,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2659,"src":"12414:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"},"id":2668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2665,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2653,"src":"12424:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2666,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"12436:8:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1829_$","typeString":"type(enum Math.Rounding)"}},"id":2667,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1827,"src":"12436:11:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"}},"src":"12424:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2670,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2659,"src":"12457:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":2671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:11","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2673,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2675,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"12471:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:11","trueExpression":{"hexValue":"31","id":2678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2681,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2657,"id":2683,"nodeType":"Return","src":"12407:78:11"}]}]},"documentation":{"id":2648,"nodeType":"StructuredDocumentation","src":"12099:143:11","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2686,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:11","nodeType":"FunctionDefinition","parameters":{"id":2654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2650,"mutability":"mutable","name":"value","nameLocation":"12271:5:11","nodeType":"VariableDeclaration","scope":2686,"src":"12263:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2649,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2653,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:11","nodeType":"VariableDeclaration","scope":2686,"src":"12278:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"},"typeName":{"id":2652,"nodeType":"UserDefinedTypeName","pathNode":{"id":2651,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":1829,"src":"12278:8:11"},"referencedDeclaration":1829,"src":"12278:8:11","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1829","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:11"},"returnParameters":{"id":2657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2656,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2686,"src":"12320:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2655,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:11"},"scope":2687,"src":"12247:255:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2688,"src":"202:12302:11","usedErrors":[]}],"src":"103:12402:11"},"id":11},"contracts/RandomIpfsNft.sol":{"ast":{"absolutePath":"contracts/RandomIpfsNft.sol","exportedSymbols":{"Address":[1589],"Context":[1611],"ERC165":[1810],"ERC721":[1098],"IERC165":[1822],"IERC721":[1214],"IERC721Metadata":[1259],"IERC721Receiver":[1232],"Math":[2687],"RandomIpfsNft":[2911],"RandomIpfsNft__RangeOutOfBounds":[2694],"Strings":[1786],"VRFConsumerBaseV2":[57],"VRFCoordinatorV2Interface":[153]},"id":2912,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2689,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:12"},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","id":2690,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2912,"sourceUnit":154,"src":"57:80:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","file":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","id":2691,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2912,"sourceUnit":58,"src":"138:61:12","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":2692,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2912,"sourceUnit":1099,"src":"200:57:12","symbolAliases":[],"unitAlias":""},{"id":2694,"name":"RandomIpfsNft__RangeOutOfBounds","nameLocation":"265:31:12","nodeType":"ErrorDefinition","parameters":{"id":2693,"nodeType":"ParameterList","parameters":[],"src":"296:2:12"},"src":"259:40:12"},{"abstract":false,"baseContracts":[{"baseName":{"id":2695,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":57,"src":"327:17:12"},"id":2696,"nodeType":"InheritanceSpecifier","src":"327:17:12"},{"baseName":{"id":2697,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":1098,"src":"346:6:12"},"id":2698,"nodeType":"InheritanceSpecifier","src":"346:6:12"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2911,"linearizedBaseContracts":[2911,1098,1259,1214,1810,1822,1611,57],"name":"RandomIpfsNft","nameLocation":"310:13:12","nodeType":"ContractDefinition","nodes":[{"canonicalName":"RandomIpfsNft.Breed","id":2702,"members":[{"id":2699,"name":"SHIBA_INU","nameLocation":"659:9:12","nodeType":"EnumValue","src":"659:9:12"},{"id":2700,"name":"PUG","nameLocation":"678:3:12","nodeType":"EnumValue","src":"678:3:12"},{"id":2701,"name":"ST_BERNARD","nameLocation":"691:10:12","nodeType":"EnumValue","src":"691:10:12"}],"name":"Breed","nameLocation":"644:5:12","nodeType":"EnumDefinition","src":"639:68:12"},{"constant":false,"id":2705,"mutability":"immutable","name":"i_vrfCoordinator","nameLocation":"757:16:12","nodeType":"VariableDeclaration","scope":2911,"src":"713:60:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"},"typeName":{"id":2704,"nodeType":"UserDefinedTypeName","pathNode":{"id":2703,"name":"VRFCoordinatorV2Interface","nodeType":"IdentifierPath","referencedDeclaration":153,"src":"713:25:12"},"referencedDeclaration":153,"src":"713:25:12","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"}},"visibility":"private"},{"constant":false,"id":2707,"mutability":"immutable","name":"i_subscriptionId","nameLocation":"804:16:12","nodeType":"VariableDeclaration","scope":2911,"src":"779:41:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2706,"name":"uint64","nodeType":"ElementaryTypeName","src":"779:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"private"},{"constant":false,"id":2709,"mutability":"immutable","name":"i_gasLane","nameLocation":"852:9:12","nodeType":"VariableDeclaration","scope":2911,"src":"826:35:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2708,"name":"bytes32","nodeType":"ElementaryTypeName","src":"826:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":2711,"mutability":"immutable","name":"i_callbackGasLimit","nameLocation":"892:18:12","nodeType":"VariableDeclaration","scope":2911,"src":"867:43:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2710,"name":"uint32","nodeType":"ElementaryTypeName","src":"867:6:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"private"},{"constant":true,"id":2714,"mutability":"constant","name":"REQUEST_CONFIRMATIONS","nameLocation":"940:21:12","nodeType":"VariableDeclaration","scope":2911,"src":"916:49:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2712,"name":"uint16","nodeType":"ElementaryTypeName","src":"916:6:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"33","id":2713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"964:1:12","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":true,"id":2717,"mutability":"constant","name":"NUM_WORDS","nameLocation":"995:9:12","nodeType":"VariableDeclaration","scope":2911,"src":"971:37:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2715,"name":"uint32","nodeType":"ElementaryTypeName","src":"971:6:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"31","id":2716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1007:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":false,"functionSelector":"a36f573b","id":2721,"mutability":"mutable","name":"s_requestIdToSender","nameLocation":"1079:19:12","nodeType":"VariableDeclaration","scope":2911,"src":"1044:54:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":2720,"keyType":{"id":2718,"name":"uint256","nodeType":"ElementaryTypeName","src":"1052:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1044:27:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":2719,"name":"address","nodeType":"ElementaryTypeName","src":"1063:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"public"},{"constant":false,"functionSelector":"0b21a83b","id":2723,"mutability":"mutable","name":"s_tokenCounter","nameLocation":"1141:14:12","nodeType":"VariableDeclaration","scope":2911,"src":"1126:29:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2722,"name":"uint256","nodeType":"ElementaryTypeName","src":"1126:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":true,"id":2726,"mutability":"constant","name":"MAX_CHANCE_VALUE","nameLocation":"1187:16:12","nodeType":"VariableDeclaration","scope":2911,"src":"1161:48:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2724,"name":"uint256","nodeType":"ElementaryTypeName","src":"1161:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313030","id":2725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1206:3:12","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"visibility":"internal"},{"body":{"id":2762,"nodeType":"Block","src":"1426:198:12","statements":[{"expression":{"id":2748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2744,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2705,"src":"1436:16:12","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2746,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"1481:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2745,"name":"VRFCoordinatorV2Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":153,"src":"1455:25:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRFCoordinatorV2Interface_$153_$","typeString":"type(contract VRFCoordinatorV2Interface)"}},"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1455:43:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"}},"src":"1436:62:12","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"}},"id":2749,"nodeType":"ExpressionStatement","src":"1436:62:12"},{"expression":{"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2750,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"1508:16:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2751,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2730,"src":"1527:14:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"1508:33:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":2753,"nodeType":"ExpressionStatement","src":"1508:33:12"},{"expression":{"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2754,"name":"i_gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"1551:9:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2755,"name":"gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2732,"src":"1563:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1551:19:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2757,"nodeType":"ExpressionStatement","src":"1551:19:12"},{"expression":{"id":2760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2758,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2711,"src":"1580:18:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2759,"name":"callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2734,"src":"1601:16:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"1580:37:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":2761,"nodeType":"ExpressionStatement","src":"1580:37:12"}]},"id":2763,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2737,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2728,"src":"1375:16:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2738,"kind":"baseConstructorSpecifier","modifierName":{"id":2736,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1357:17:12"},"nodeType":"ModifierInvocation","src":"1357:35:12"},{"arguments":[{"hexValue":"52616e646f6d2049504653204e4654","id":2740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1400:17:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_060d1bdab5c66f2c3459267e43d1a510b3c61ad39afb4b1b9b944fbc6d6a9661","typeString":"literal_string \"Random IPFS NFT\""},"value":"Random IPFS NFT"},{"hexValue":"52494e","id":2741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1419:5:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c2493aacafadd9e7cfb3e25fe184ffa39fa77c9794b3bfc81822f04194b6f764","typeString":"literal_string \"RIN\""},"value":"RIN"}],"id":2742,"kind":"baseConstructorSpecifier","modifierName":{"id":2739,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":1098,"src":"1393:6:12"},"nodeType":"ModifierInvocation","src":"1393:32:12"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2728,"mutability":"mutable","name":"vrfCoordinatorV2","nameLocation":"1245:16:12","nodeType":"VariableDeclaration","scope":2763,"src":"1237:24:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2727,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2730,"mutability":"mutable","name":"subscriptionId","nameLocation":"1278:14:12","nodeType":"VariableDeclaration","scope":2763,"src":"1271:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2729,"name":"uint64","nodeType":"ElementaryTypeName","src":"1271:6:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":2732,"mutability":"mutable","name":"gasLane","nameLocation":"1310:7:12","nodeType":"VariableDeclaration","scope":2763,"src":"1302:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2731,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1302:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2734,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"1334:16:12","nodeType":"VariableDeclaration","scope":2763,"src":"1327:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":2733,"name":"uint32","nodeType":"ElementaryTypeName","src":"1327:6:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1227:129:12"},"returnParameters":{"id":2743,"nodeType":"ParameterList","parameters":[],"src":"1426:0:12"},"scope":2911,"src":"1216:408:12","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2786,"nodeType":"Block","src":"1687:270:12","statements":[{"expression":{"id":2777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2768,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2766,"src":"1697:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2771,"name":"i_gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2709,"src":"1758:9:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2772,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"1781:16:12","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":2773,"name":"REQUEST_CONFIRMATIONS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2714,"src":"1811:21:12","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":2774,"name":"i_callbackGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2711,"src":"1846:18:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":2775,"name":"NUM_WORDS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2717,"src":"1878:9:12","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":2769,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2705,"src":"1709:16:12","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$153","typeString":"contract VRFCoordinatorV2Interface"}},"id":2770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"requestRandomWords","nodeType":"MemberAccess","referencedDeclaration":86,"src":"1709:35:12","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint64_$_t_uint16_$_t_uint32_$_t_uint32_$returns$_t_uint256_$","typeString":"function (bytes32,uint64,uint16,uint32,uint32) external returns (uint256)"}},"id":2776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1709:188:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1697:200:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2778,"nodeType":"ExpressionStatement","src":"1697:200:12"},{"expression":{"id":2784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2779,"name":"s_requestIdToSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"1907:19:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2781,"indexExpression":{"id":2780,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2766,"src":"1927:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1907:30:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2782,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1940:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1940:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1907:43:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2785,"nodeType":"ExpressionStatement","src":"1907:43:12"}]},"functionSelector":"aa152491","id":2787,"implemented":true,"kind":"function","modifiers":[],"name":"requestNft","nameLocation":"1639:10:12","nodeType":"FunctionDefinition","parameters":{"id":2764,"nodeType":"ParameterList","parameters":[],"src":"1649:2:12"},"returnParameters":{"id":2767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2766,"mutability":"mutable","name":"requestId","nameLocation":"1676:9:12","nodeType":"VariableDeclaration","scope":2787,"src":"1668:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2765,"name":"uint256","nodeType":"ElementaryTypeName","src":"1668:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1667:19:12"},"scope":2911,"src":"1630:327:12","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[30],"body":{"id":2826,"nodeType":"Block","src":"2058:361:12","statements":[{"assignments":[2797],"declarations":[{"constant":false,"id":2797,"mutability":"mutable","name":"dogOwner","nameLocation":"2076:8:12","nodeType":"VariableDeclaration","scope":2826,"src":"2068:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2796,"name":"address","nodeType":"ElementaryTypeName","src":"2068:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2801,"initialValue":{"baseExpression":{"id":2798,"name":"s_requestIdToSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"2087:19:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2800,"indexExpression":{"id":2799,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2789,"src":"2107:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2087:30:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2068:49:12"},{"assignments":[2803],"declarations":[{"constant":false,"id":2803,"mutability":"mutable","name":"newTokenId","nameLocation":"2135:10:12","nodeType":"VariableDeclaration","scope":2826,"src":"2127:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2802,"name":"uint256","nodeType":"ElementaryTypeName","src":"2127:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2805,"initialValue":{"id":2804,"name":"s_tokenCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"2148:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2127:35:12"},{"assignments":[2807],"declarations":[{"constant":false,"id":2807,"mutability":"mutable","name":"moddedRng","nameLocation":"2231:9:12","nodeType":"VariableDeclaration","scope":2826,"src":"2223:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2806,"name":"uint256","nodeType":"ElementaryTypeName","src":"2223:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2813,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2808,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2792,"src":"2243:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2810,"indexExpression":{"hexValue":"30","id":2809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2255:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2243:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":2811,"name":"MAX_CHANCE_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"2260:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2243:33:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2223:53:12"},{"assignments":[2816],"declarations":[{"constant":false,"id":2816,"mutability":"mutable","name":"dogBreed","nameLocation":"2328:8:12","nodeType":"VariableDeclaration","scope":2826,"src":"2322:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$2702","typeString":"enum RandomIpfsNft.Breed"},"typeName":{"id":2815,"nodeType":"UserDefinedTypeName","pathNode":{"id":2814,"name":"Breed","nodeType":"IdentifierPath","referencedDeclaration":2702,"src":"2322:5:12"},"referencedDeclaration":2702,"src":"2322:5:12","typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$2702","typeString":"enum RandomIpfsNft.Breed"}},"visibility":"internal"}],"id":2820,"initialValue":{"arguments":[{"id":2818,"name":"moddedRng","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2807,"src":"2361:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2817,"name":"getBreedFromModdedRng","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2888,"src":"2339:21:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_enum$_Breed_$2702_$","typeString":"function (uint256) pure returns (enum RandomIpfsNft.Breed)"}},"id":2819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2339:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$2702","typeString":"enum RandomIpfsNft.Breed"}},"nodeType":"VariableDeclarationStatement","src":"2322:49:12"},{"expression":{"arguments":[{"id":2822,"name":"dogOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2797,"src":"2391:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2823,"name":"newTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2803,"src":"2401:10:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2821,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[648,677],"referencedDeclaration":648,"src":"2381:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2381:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2825,"nodeType":"ExpressionStatement","src":"2381:31:12"}]},"id":2827,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"1972:18:12","nodeType":"FunctionDefinition","overrides":{"id":2794,"nodeType":"OverrideSpecifier","overrides":[],"src":"2049:8:12"},"parameters":{"id":2793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2789,"mutability":"mutable","name":"requestId","nameLocation":"1999:9:12","nodeType":"VariableDeclaration","scope":2827,"src":"1991:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2788,"name":"uint256","nodeType":"ElementaryTypeName","src":"1991:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2792,"mutability":"mutable","name":"randomWords","nameLocation":"2027:11:12","nodeType":"VariableDeclaration","scope":2827,"src":"2010:28:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2790,"name":"uint256","nodeType":"ElementaryTypeName","src":"2010:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2791,"nodeType":"ArrayTypeName","src":"2010:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1990:49:12"},"returnParameters":{"id":2795,"nodeType":"ParameterList","parameters":[],"src":"2058:0:12"},"scope":2911,"src":"1963:456:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2887,"nodeType":"Block","src":"2503:402:12","statements":[{"assignments":[2836],"declarations":[{"constant":false,"id":2836,"mutability":"mutable","name":"cumulativeSum","nameLocation":"2521:13:12","nodeType":"VariableDeclaration","scope":2887,"src":"2513:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2835,"name":"uint256","nodeType":"ElementaryTypeName","src":"2513:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2838,"initialValue":{"hexValue":"30","id":2837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2537:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2513:25:12"},{"assignments":[2844],"declarations":[{"constant":false,"id":2844,"mutability":"mutable","name":"chanceArray","nameLocation":"2566:11:12","nodeType":"VariableDeclaration","scope":2887,"src":"2548:29:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3]"},"typeName":{"baseType":{"id":2842,"name":"uint256","nodeType":"ElementaryTypeName","src":"2548:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2843,"length":{"hexValue":"33","id":2841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2556:1:12","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"ArrayTypeName","src":"2548:10:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_storage_ptr","typeString":"uint256[3]"}},"visibility":"internal"}],"id":2847,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2845,"name":"getChanceArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2901,"src":"2580:14:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_array$_t_uint256_$3_memory_ptr_$","typeString":"function () pure returns (uint256[3] memory)"}},"id":2846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2580:16:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3] memory"}},"nodeType":"VariableDeclarationStatement","src":"2548:48:12"},{"body":{"id":2882,"nodeType":"Block","src":"2654:195:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2859,"name":"moddedRng","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"2672:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2860,"name":"cumulativeSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"2685:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2672:26:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2862,"name":"moddedRng","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"2702:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2863,"name":"cumulativeSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"2714:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"baseExpression":{"id":2864,"name":"chanceArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"2730:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3] memory"}},"id":2866,"indexExpression":{"id":2865,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"2742:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2730:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2714:30:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2702:42:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2672:72:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2875,"nodeType":"IfStatement","src":"2668:126:12","trueBody":{"id":2874,"nodeType":"Block","src":"2746:48:12","statements":[{"expression":{"arguments":[{"id":2871,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"2777:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2870,"name":"Breed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2702,"src":"2771:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Breed_$2702_$","typeString":"type(enum RandomIpfsNft.Breed)"}},"id":2872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2771:8:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$2702","typeString":"enum RandomIpfsNft.Breed"}},"functionReturnParameters":2834,"id":2873,"nodeType":"Return","src":"2764:15:12"}]}},{"expression":{"id":2880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2876,"name":"cumulativeSum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2836,"src":"2807:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"baseExpression":{"id":2877,"name":"chanceArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"2824:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3] memory"}},"id":2879,"indexExpression":{"id":2878,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"2836:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2824:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2807:31:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2881,"nodeType":"ExpressionStatement","src":"2807:31:12"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2852,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"2625:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2853,"name":"chanceArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"2629:11:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3] memory"}},"id":2854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2629:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2625:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2883,"initializationExpression":{"assignments":[2849],"declarations":[{"constant":false,"id":2849,"mutability":"mutable","name":"i","nameLocation":"2618:1:12","nodeType":"VariableDeclaration","scope":2883,"src":"2610:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2848,"name":"uint256","nodeType":"ElementaryTypeName","src":"2610:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2851,"initialValue":{"hexValue":"30","id":2850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2622:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2610:13:12"},"loopExpression":{"expression":{"id":2857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2649:3:12","subExpression":{"id":2856,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"2649:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2858,"nodeType":"ExpressionStatement","src":"2649:3:12"},"nodeType":"ForStatement","src":"2606:243:12"},{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2884,"name":"RandomIpfsNft__RangeOutOfBounds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"2865:31:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2885,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2865:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2886,"nodeType":"RevertStatement","src":"2858:40:12"}]},"functionSelector":"a51cccf3","id":2888,"implemented":true,"kind":"function","modifiers":[],"name":"getBreedFromModdedRng","nameLocation":"2434:21:12","nodeType":"FunctionDefinition","parameters":{"id":2830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2829,"mutability":"mutable","name":"moddedRng","nameLocation":"2464:9:12","nodeType":"VariableDeclaration","scope":2888,"src":"2456:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2828,"name":"uint256","nodeType":"ElementaryTypeName","src":"2456:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2455:19:12"},"returnParameters":{"id":2834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2833,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2888,"src":"2496:5:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$2702","typeString":"enum RandomIpfsNft.Breed"},"typeName":{"id":2832,"nodeType":"UserDefinedTypeName","pathNode":{"id":2831,"name":"Breed","nodeType":"IdentifierPath","referencedDeclaration":2702,"src":"2496:5:12"},"referencedDeclaration":2702,"src":"2496:5:12","typeDescriptions":{"typeIdentifier":"t_enum$_Breed_$2702","typeString":"enum RandomIpfsNft.Breed"}},"visibility":"internal"}],"src":"2495:7:12"},"scope":2911,"src":"2425:480:12","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":2900,"nodeType":"Block","src":"2976:50:12","statements":[{"expression":{"components":[{"hexValue":"3130","id":2895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2994:2:12","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},{"hexValue":"3330","id":2896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2998:2:12","typeDescriptions":{"typeIdentifier":"t_rational_30_by_1","typeString":"int_const 30"},"value":"30"},{"id":2897,"name":"MAX_CHANCE_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2726,"src":"3002:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2898,"isConstant":false,"isInlineArray":true,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2993:26:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3] memory"}},"functionReturnParameters":2894,"id":2899,"nodeType":"Return","src":"2986:33:12"}]},"functionSelector":"5dacf5f4","id":2901,"implemented":true,"kind":"function","modifiers":[],"name":"getChanceArray","nameLocation":"2920:14:12","nodeType":"FunctionDefinition","parameters":{"id":2889,"nodeType":"ParameterList","parameters":[],"src":"2934:2:12"},"returnParameters":{"id":2894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2893,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2901,"src":"2957:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_memory_ptr","typeString":"uint256[3]"},"typeName":{"baseType":{"id":2890,"name":"uint256","nodeType":"ElementaryTypeName","src":"2957:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2892,"length":{"hexValue":"33","id":2891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2965:1:12","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"ArrayTypeName","src":"2957:10:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$3_storage_ptr","typeString":"uint256[3]"}},"visibility":"internal"}],"src":"2956:19:12"},"scope":2911,"src":"2911:115:12","stateMutability":"pure","virtual":false,"visibility":"public"},{"baseFunctions":[358],"body":{"id":2909,"nodeType":"Block","src":"3112:8:12","statements":[]},"functionSelector":"c87b56dd","id":2910,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"3041:8:12","nodeType":"FunctionDefinition","overrides":{"id":2905,"nodeType":"OverrideSpecifier","overrides":[],"src":"3079:8:12"},"parameters":{"id":2904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2903,"mutability":"mutable","name":"tokenId","nameLocation":"3058:7:12","nodeType":"VariableDeclaration","scope":2910,"src":"3050:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2902,"name":"uint256","nodeType":"ElementaryTypeName","src":"3050:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3049:17:12"},"returnParameters":{"id":2908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2907,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2910,"src":"3097:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2906,"name":"string","nodeType":"ElementaryTypeName","src":"3097:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3096:15:12"},"scope":2911,"src":"3032:88:12","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":2912,"src":"301:2821:12","usedErrors":[8,2694]}],"src":"32:3090:12"},"id":12}},"contracts":{"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"VRFConsumerBaseV2":{"abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).","kind":"dev","methods":{"constructor":{"params":{"_vrfCoordinator":"address of VRFCoordinator contract"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"VRFCoordinatorV2Interface":{"abi":[{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRequestConfig","outputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"uint16","name":"minimumRequestConfirmations","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"numWords","type":"uint32"}],"name":"requestRandomWords","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint64,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"cancelSubscription(uint64,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));","returns":{"subId":"- A unique subscription id."}},"getRequestConfig()":{"returns":{"_0":"minimumRequestConfirmations global min for request confirmations","_1":"maxGasLimit global max for request gas limit","_2":"s_provingKeyHashes list of registered key hashes"}},"getSubscription(uint64)":{"params":{"subId":"- ID of the subscription"},"returns":{"balance":"- LINK balance of the subscription in juels.","consumers":"- list of consumer address which are able to use this subscription.","owner":"- owner of the subscription.","reqCount":"- number of requests for this subscription, determines fee tier."}},"removeConsumer(uint64,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"params":{"callbackGasLimit":"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]","keyHash":"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.","minimumRequestConfirmations":"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].","numWords":"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.","subId":"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash."},"returns":{"requestId":"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."}},"requestSubscriptionOwnerTransfer(uint64,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint64)":"82359740","addConsumer(uint64,address)":"7341c10c","cancelSubscription(uint64,address)":"d7ae1d30","createSubscription()":"a21a23e4","getRequestConfig()":"00012291","getSubscription(uint64)":"a47c7696","pendingRequestExists(uint64)":"e82ad7d4","removeConsumer(uint64,address)":"9f87fad7","requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":"5d3b1d30","requestSubscriptionOwnerTransfer(uint64,address)":"04c357cb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}},\"getSubscription(uint64)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- number of requests for this subscription, determines fee tier.\"}},\"removeConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"minimumRequestConfirmations\":\"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\",\"subId\":\"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Request subscription owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getSubscription(uint64)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":\"VRFCoordinatorV2Interface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"notice":"Request subscription owner transfer."},"addConsumer(uint64,address)":{"notice":"Add a consumer to a VRF subscription."},"cancelSubscription(uint64,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a VRF subscription."},"getRequestConfig()":{"notice":"Get configuration relevant for making requests"},"getSubscription(uint64)":{"notice":"Get a VRF subscription."},"removeConsumer(uint64,address)":{"notice":"Remove a consumer from a VRF subscription."},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"notice":"Request a set of random words."},"requestSubscriptionOwnerTransfer(uint64,address)":{"notice":"Request subscription owner transfer."}},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_216":{"entryPoint":null,"id":216,"parameterSlots":2,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":576,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":651,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":702,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_memory":{"entryPoint":437,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":289,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":468,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":522,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":882,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":383,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x22":{"entryPoint":835,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":336,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":309,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":314,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":304,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":299,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":319,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4093:13","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:13","statements":[{"nodeType":"YulAssignment","src":"57:19:13","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:13","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:13"},"nodeType":"YulFunctionCall","src":"67:9:13"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:13"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:13","type":""}],"src":"7:75:13"},{"body":{"nodeType":"YulBlock","src":"177:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:13"},"nodeType":"YulFunctionCall","src":"187:12:13"},"nodeType":"YulExpressionStatement","src":"187:12:13"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:13"},{"body":{"nodeType":"YulBlock","src":"300:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:13"},"nodeType":"YulFunctionCall","src":"310:12:13"},"nodeType":"YulExpressionStatement","src":"310:12:13"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:13"},{"body":{"nodeType":"YulBlock","src":"423:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"443:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"433:6:13"},"nodeType":"YulFunctionCall","src":"433:12:13"},"nodeType":"YulExpressionStatement","src":"433:12:13"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"334:117:13"},{"body":{"nodeType":"YulBlock","src":"546:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"563:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"566:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"556:6:13"},"nodeType":"YulFunctionCall","src":"556:12:13"},"nodeType":"YulExpressionStatement","src":"556:12:13"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"457:117:13"},{"body":{"nodeType":"YulBlock","src":"628:54:13","statements":[{"nodeType":"YulAssignment","src":"638:38:13","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"656:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"663:2:13","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"652:3:13"},"nodeType":"YulFunctionCall","src":"652:14:13"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"672:2:13","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"668:3:13"},"nodeType":"YulFunctionCall","src":"668:7:13"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"648:3:13"},"nodeType":"YulFunctionCall","src":"648:28:13"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"638:6:13"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"611:5:13","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"621:6:13","type":""}],"src":"580:102:13"},{"body":{"nodeType":"YulBlock","src":"716:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"733:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"736:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"726:6:13"},"nodeType":"YulFunctionCall","src":"726:88:13"},"nodeType":"YulExpressionStatement","src":"726:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"830:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"833:4:13","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"823:6:13"},"nodeType":"YulFunctionCall","src":"823:15:13"},"nodeType":"YulExpressionStatement","src":"823:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"854:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"857:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"847:6:13"},"nodeType":"YulFunctionCall","src":"847:15:13"},"nodeType":"YulExpressionStatement","src":"847:15:13"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"688:180:13"},{"body":{"nodeType":"YulBlock","src":"917:238:13","statements":[{"nodeType":"YulVariableDeclaration","src":"927:58:13","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"949:6:13"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"979:4:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"957:21:13"},"nodeType":"YulFunctionCall","src":"957:27:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"945:3:13"},"nodeType":"YulFunctionCall","src":"945:40:13"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"931:10:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"1096:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1098:16:13"},"nodeType":"YulFunctionCall","src":"1098:18:13"},"nodeType":"YulExpressionStatement","src":"1098:18:13"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1039:10:13"},{"kind":"number","nodeType":"YulLiteral","src":"1051:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1036:2:13"},"nodeType":"YulFunctionCall","src":"1036:34:13"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1075:10:13"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1087:6:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1072:2:13"},"nodeType":"YulFunctionCall","src":"1072:22:13"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1033:2:13"},"nodeType":"YulFunctionCall","src":"1033:62:13"},"nodeType":"YulIf","src":"1030:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1134:2:13","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1138:10:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1127:6:13"},"nodeType":"YulFunctionCall","src":"1127:22:13"},"nodeType":"YulExpressionStatement","src":"1127:22:13"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"903:6:13","type":""},{"name":"size","nodeType":"YulTypedName","src":"911:4:13","type":""}],"src":"874:281:13"},{"body":{"nodeType":"YulBlock","src":"1202:88:13","statements":[{"nodeType":"YulAssignment","src":"1212:30:13","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1222:18:13"},"nodeType":"YulFunctionCall","src":"1222:20:13"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1212:6:13"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1271:6:13"},{"name":"size","nodeType":"YulIdentifier","src":"1279:4:13"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1251:19:13"},"nodeType":"YulFunctionCall","src":"1251:33:13"},"nodeType":"YulExpressionStatement","src":"1251:33:13"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1186:4:13","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1195:6:13","type":""}],"src":"1161:129:13"},{"body":{"nodeType":"YulBlock","src":"1363:241:13","statements":[{"body":{"nodeType":"YulBlock","src":"1468:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1470:16:13"},"nodeType":"YulFunctionCall","src":"1470:18:13"},"nodeType":"YulExpressionStatement","src":"1470:18:13"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1440:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"1448:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1437:2:13"},"nodeType":"YulFunctionCall","src":"1437:30:13"},"nodeType":"YulIf","src":"1434:56:13"},{"nodeType":"YulAssignment","src":"1500:37:13","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1530:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1508:21:13"},"nodeType":"YulFunctionCall","src":"1508:29:13"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1500:4:13"}]},{"nodeType":"YulAssignment","src":"1574:23:13","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1586:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"1592:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1582:3:13"},"nodeType":"YulFunctionCall","src":"1582:15:13"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1574:4:13"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1347:6:13","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1358:4:13","type":""}],"src":"1296:308:13"},{"body":{"nodeType":"YulBlock","src":"1659:258:13","statements":[{"nodeType":"YulVariableDeclaration","src":"1669:10:13","value":{"kind":"number","nodeType":"YulLiteral","src":"1678:1:13","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1673:1:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"1738:63:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1763:3:13"},{"name":"i","nodeType":"YulIdentifier","src":"1768:1:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1759:3:13"},"nodeType":"YulFunctionCall","src":"1759:11:13"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1782:3:13"},{"name":"i","nodeType":"YulIdentifier","src":"1787:1:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1778:3:13"},"nodeType":"YulFunctionCall","src":"1778:11:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1772:5:13"},"nodeType":"YulFunctionCall","src":"1772:18:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1752:6:13"},"nodeType":"YulFunctionCall","src":"1752:39:13"},"nodeType":"YulExpressionStatement","src":"1752:39:13"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1699:1:13"},{"name":"length","nodeType":"YulIdentifier","src":"1702:6:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1696:2:13"},"nodeType":"YulFunctionCall","src":"1696:13:13"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1710:19:13","statements":[{"nodeType":"YulAssignment","src":"1712:15:13","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1721:1:13"},{"kind":"number","nodeType":"YulLiteral","src":"1724:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1717:3:13"},"nodeType":"YulFunctionCall","src":"1717:10:13"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1712:1:13"}]}]},"pre":{"nodeType":"YulBlock","src":"1692:3:13","statements":[]},"src":"1688:113:13"},{"body":{"nodeType":"YulBlock","src":"1835:76:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1885:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"1890:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1881:3:13"},"nodeType":"YulFunctionCall","src":"1881:16:13"},{"kind":"number","nodeType":"YulLiteral","src":"1899:1:13","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1874:6:13"},"nodeType":"YulFunctionCall","src":"1874:27:13"},"nodeType":"YulExpressionStatement","src":"1874:27:13"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1816:1:13"},{"name":"length","nodeType":"YulIdentifier","src":"1819:6:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1813:2:13"},"nodeType":"YulFunctionCall","src":"1813:13:13"},"nodeType":"YulIf","src":"1810:101:13"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1641:3:13","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1646:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"1651:6:13","type":""}],"src":"1610:307:13"},{"body":{"nodeType":"YulBlock","src":"2018:326:13","statements":[{"nodeType":"YulAssignment","src":"2028:75:13","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2095:6:13"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2053:41:13"},"nodeType":"YulFunctionCall","src":"2053:49:13"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2037:15:13"},"nodeType":"YulFunctionCall","src":"2037:66:13"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2028:5:13"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2119:5:13"},{"name":"length","nodeType":"YulIdentifier","src":"2126:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2112:6:13"},"nodeType":"YulFunctionCall","src":"2112:21:13"},"nodeType":"YulExpressionStatement","src":"2112:21:13"},{"nodeType":"YulVariableDeclaration","src":"2142:27:13","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2157:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"2164:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2153:3:13"},"nodeType":"YulFunctionCall","src":"2153:16:13"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2146:3:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"2207:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"2209:77:13"},"nodeType":"YulFunctionCall","src":"2209:79:13"},"nodeType":"YulExpressionStatement","src":"2209:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2188:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"2193:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2184:3:13"},"nodeType":"YulFunctionCall","src":"2184:16:13"},{"name":"end","nodeType":"YulIdentifier","src":"2202:3:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2181:2:13"},"nodeType":"YulFunctionCall","src":"2181:25:13"},"nodeType":"YulIf","src":"2178:112:13"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2321:3:13"},{"name":"dst","nodeType":"YulIdentifier","src":"2326:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"2331:6:13"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"2299:21:13"},"nodeType":"YulFunctionCall","src":"2299:39:13"},"nodeType":"YulExpressionStatement","src":"2299:39:13"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1991:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"1996:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"2004:3:13","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2012:5:13","type":""}],"src":"1923:421:13"},{"body":{"nodeType":"YulBlock","src":"2437:282:13","statements":[{"body":{"nodeType":"YulBlock","src":"2486:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2488:77:13"},"nodeType":"YulFunctionCall","src":"2488:79:13"},"nodeType":"YulExpressionStatement","src":"2488:79:13"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2465:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"2473:4:13","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2461:3:13"},"nodeType":"YulFunctionCall","src":"2461:17:13"},{"name":"end","nodeType":"YulIdentifier","src":"2480:3:13"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2457:3:13"},"nodeType":"YulFunctionCall","src":"2457:27:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2450:6:13"},"nodeType":"YulFunctionCall","src":"2450:35:13"},"nodeType":"YulIf","src":"2447:122:13"},{"nodeType":"YulVariableDeclaration","src":"2578:27:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2598:6:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2592:5:13"},"nodeType":"YulFunctionCall","src":"2592:13:13"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2582:6:13","type":""}]},{"nodeType":"YulAssignment","src":"2614:99:13","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2686:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"2694:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2682:3:13"},"nodeType":"YulFunctionCall","src":"2682:17:13"},{"name":"length","nodeType":"YulIdentifier","src":"2701:6:13"},{"name":"end","nodeType":"YulIdentifier","src":"2709:3:13"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"2623:58:13"},"nodeType":"YulFunctionCall","src":"2623:90:13"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2614:5:13"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2415:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"2423:3:13","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2431:5:13","type":""}],"src":"2364:355:13"},{"body":{"nodeType":"YulBlock","src":"2839:739:13","statements":[{"body":{"nodeType":"YulBlock","src":"2885:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2887:77:13"},"nodeType":"YulFunctionCall","src":"2887:79:13"},"nodeType":"YulExpressionStatement","src":"2887:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2860:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"2869:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2856:3:13"},"nodeType":"YulFunctionCall","src":"2856:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"2881:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2852:3:13"},"nodeType":"YulFunctionCall","src":"2852:32:13"},"nodeType":"YulIf","src":"2849:119:13"},{"nodeType":"YulBlock","src":"2978:291:13","statements":[{"nodeType":"YulVariableDeclaration","src":"2993:38:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3017:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"3028:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3013:3:13"},"nodeType":"YulFunctionCall","src":"3013:17:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3007:5:13"},"nodeType":"YulFunctionCall","src":"3007:24:13"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2997:6:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"3078:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3080:77:13"},"nodeType":"YulFunctionCall","src":"3080:79:13"},"nodeType":"YulExpressionStatement","src":"3080:79:13"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3050:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"3058:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3047:2:13"},"nodeType":"YulFunctionCall","src":"3047:30:13"},"nodeType":"YulIf","src":"3044:117:13"},{"nodeType":"YulAssignment","src":"3175:84:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3231:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"3242:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3227:3:13"},"nodeType":"YulFunctionCall","src":"3227:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3251:7:13"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3185:41:13"},"nodeType":"YulFunctionCall","src":"3185:74:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3175:6:13"}]}]},{"nodeType":"YulBlock","src":"3279:292:13","statements":[{"nodeType":"YulVariableDeclaration","src":"3294:39:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3318:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"3329:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3314:3:13"},"nodeType":"YulFunctionCall","src":"3314:18:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3308:5:13"},"nodeType":"YulFunctionCall","src":"3308:25:13"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3298:6:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"3380:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3382:77:13"},"nodeType":"YulFunctionCall","src":"3382:79:13"},"nodeType":"YulExpressionStatement","src":"3382:79:13"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3352:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"3360:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3349:2:13"},"nodeType":"YulFunctionCall","src":"3349:30:13"},"nodeType":"YulIf","src":"3346:117:13"},{"nodeType":"YulAssignment","src":"3477:84:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3533:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"3544:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3529:3:13"},"nodeType":"YulFunctionCall","src":"3529:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3553:7:13"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3487:41:13"},"nodeType":"YulFunctionCall","src":"3487:74:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3477:6:13"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2801:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2812:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2824:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2832:6:13","type":""}],"src":"2725:853:13"},{"body":{"nodeType":"YulBlock","src":"3612:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3629:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3632:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3622:6:13"},"nodeType":"YulFunctionCall","src":"3622:88:13"},"nodeType":"YulExpressionStatement","src":"3622:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3726:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3729:4:13","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3719:6:13"},"nodeType":"YulFunctionCall","src":"3719:15:13"},"nodeType":"YulExpressionStatement","src":"3719:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3750:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3753:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3743:6:13"},"nodeType":"YulFunctionCall","src":"3743:15:13"},"nodeType":"YulExpressionStatement","src":"3743:15:13"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"3584:180:13"},{"body":{"nodeType":"YulBlock","src":"3821:269:13","statements":[{"nodeType":"YulAssignment","src":"3831:22:13","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3845:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"3851:1:13","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3841:3:13"},"nodeType":"YulFunctionCall","src":"3841:12:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3831:6:13"}]},{"nodeType":"YulVariableDeclaration","src":"3862:38:13","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3892:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"3898:1:13","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3888:3:13"},"nodeType":"YulFunctionCall","src":"3888:12:13"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"3866:18:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"3939:51:13","statements":[{"nodeType":"YulAssignment","src":"3953:27:13","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3967:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"3975:4:13","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3963:3:13"},"nodeType":"YulFunctionCall","src":"3963:17:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3953:6:13"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3919:18:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3912:6:13"},"nodeType":"YulFunctionCall","src":"3912:26:13"},"nodeType":"YulIf","src":"3909:81:13"},{"body":{"nodeType":"YulBlock","src":"4042:42:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"4056:16:13"},"nodeType":"YulFunctionCall","src":"4056:18:13"},"nodeType":"YulExpressionStatement","src":"4056:18:13"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4006:18:13"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4029:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"4037:2:13","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4026:2:13"},"nodeType":"YulFunctionCall","src":"4026:14:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4003:2:13"},"nodeType":"YulFunctionCall","src":"4003:38:13"},"nodeType":"YulIf","src":"4000:84:13"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3805:4:13","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3814:6:13","type":""}],"src":"3770:320:13"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n}\n","id":13,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50604051620026da380380620026da8339818101604052810190620000379190620002be565b81600090805190602001906200004f92919062000071565b5080600190805190602001906200006892919062000071565b505050620003a8565b8280546200007f9062000372565b90600052602060002090601f016020900481019282620000a35760008555620000ef565b82601f10620000be57805160ff1916838001178555620000ef565b82800160010185558215620000ef579182015b82811115620000ee578251825591602001919060010190620000d1565b5b509050620000fe919062000102565b5090565b5b808211156200011d57600081600090555060010162000103565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200018a826200013f565b810181811067ffffffffffffffff82111715620001ac57620001ab62000150565b5b80604052505050565b6000620001c162000121565b9050620001cf82826200017f565b919050565b600067ffffffffffffffff821115620001f257620001f162000150565b5b620001fd826200013f565b9050602081019050919050565b60005b838110156200022a5780820151818401526020810190506200020d565b838111156200023a576000848401525b50505050565b6000620002576200025184620001d4565b620001b5565b9050828152602081018484840111156200027657620002756200013a565b5b620002838482856200020a565b509392505050565b600082601f830112620002a357620002a262000135565b5b8151620002b584826020860162000240565b91505092915050565b60008060408385031215620002d857620002d76200012b565b5b600083015167ffffffffffffffff811115620002f957620002f862000130565b5b62000307858286016200028b565b925050602083015167ffffffffffffffff8111156200032b576200032a62000130565b5b62000339858286016200028b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200038b57607f821691505b60208210811415620003a257620003a162000343565b5b50919050565b61232280620003b86000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e99190611633565b6102bc565b6040516100fb919061167b565b60405180910390f35b61010c61039e565b604051610119919061172f565b60405180910390f35b61013c60048036038101906101379190611787565b610430565b60405161014991906117f5565b60405180910390f35b61016c6004803603810190610167919061183c565b610476565b005b6101886004803603810190610183919061187c565b61058e565b005b6101a4600480360381019061019f919061187c565b6105ee565b005b6101c060048036038101906101bb9190611787565b61060e565b6040516101cd91906117f5565b60405180910390f35b6101f060048036038101906101eb91906118cf565b610695565b6040516101fd919061190b565b60405180910390f35b61020e61074d565b60405161021b919061172f565b60405180910390f35b61023e60048036038101906102399190611952565b6107df565b005b61025a60048036038101906102559190611ac7565b6107f5565b005b61027660048036038101906102719190611787565b610857565b604051610283919061172f565b60405180910390f35b6102a660048036038101906102a19190611b4a565b6108bf565b6040516102b3919061167b565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610953565b5b9050919050565b6060600080546103ad90611bb9565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611bb9565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109bd565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e990611c5d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610511610a08565b73ffffffffffffffffffffffffffffffffffffffff161480610540575061053f8161053a610a08565b6108bf565b5b61057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057690611cef565b60405180910390fd5b6105898383610a10565b505050565b61059f610599610a08565b82610ac9565b6105de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d590611d81565b60405180910390fd5b6105e9838383610b5e565b505050565b610609838383604051806020016040528060008152506107f5565b505050565b60008061061a83610e58565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611ded565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fd90611e7f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075c90611bb9565b80601f016020809104026020016040519081016040528092919081815260200182805461078890611bb9565b80156107d55780601f106107aa576101008083540402835291602001916107d5565b820191906000526020600020905b8154815290600101906020018083116107b857829003601f168201915b5050505050905090565b6107f16107ea610a08565b8383610e95565b5050565b610806610800610a08565b83610ac9565b610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c90611d81565b60405180910390fd5b61085184848484611002565b50505050565b6060610862826109bd565b600061086c61105e565b9050600081511161088c57604051806020016040528060008152506108b7565b8061089684611075565b6040516020016108a7929190611edb565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c68161114d565b610a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fc90611ded565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a838361060e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad58361060e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b175750610b1681856108bf565b5b80610b5557508373ffffffffffffffffffffffffffffffffffffffff16610b3d84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7e8261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611f71565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90612003565b60405180910390fd5b610c51838383600161118e565b8273ffffffffffffffffffffffffffffffffffffffff16610c718261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90611f71565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e5383838360016112b4565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efb9061206f565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff5919061167b565b60405180910390a3505050565b61100d848484610b5e565b611019848484846112ba565b611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90612101565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161108484611451565b01905060008167ffffffffffffffff8111156110a3576110a261199c565b5b6040519080825280601f01601f1916602001820160405280156110d55781602001600182028036833780820191505090505b509050600082602001820190505b600115611142578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161112c5761112b612121565b5b049450600085141561113d57611142565b6110e3565b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661116f83610e58565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60018111156112ae57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146112225780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461121a919061217f565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146112ad5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112a591906121b3565b925050819055505b5b50505050565b50505050565b60006112db8473ffffffffffffffffffffffffffffffffffffffff166115a4565b15611444578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611304610a08565b8786866040518563ffffffff1660e01b8152600401611326949392919061225e565b602060405180830381600087803b15801561134057600080fd5b505af192505050801561137157506040513d601f19601f8201168201806040525081019061136e91906122bf565b60015b6113f4573d80600081146113a1576040519150601f19603f3d011682016040523d82523d6000602084013e6113a6565b606091505b506000815114156113ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e390612101565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611449565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106114af577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816114a5576114a4612121565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106114ec576d04ee2d6d415b85acef810000000083816114e2576114e1612121565b5b0492506020810190505b662386f26fc10000831061151b57662386f26fc10000838161151157611510612121565b5b0492506010810190505b6305f5e1008310611544576305f5e100838161153a57611539612121565b5b0492506008810190505b612710831061156957612710838161155f5761155e612121565b5b0492506004810190505b6064831061158c576064838161158257611581612121565b5b0492506002810190505b600a831061159b576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611610816115db565b811461161b57600080fd5b50565b60008135905061162d81611607565b92915050565b600060208284031215611649576116486115d1565b5b60006116578482850161161e565b91505092915050565b60008115159050919050565b61167581611660565b82525050565b6000602082019050611690600083018461166c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156116d05780820151818401526020810190506116b5565b838111156116df576000848401525b50505050565b6000601f19601f8301169050919050565b600061170182611696565b61170b81856116a1565b935061171b8185602086016116b2565b611724816116e5565b840191505092915050565b6000602082019050818103600083015261174981846116f6565b905092915050565b6000819050919050565b61176481611751565b811461176f57600080fd5b50565b6000813590506117818161175b565b92915050565b60006020828403121561179d5761179c6115d1565b5b60006117ab84828501611772565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117df826117b4565b9050919050565b6117ef816117d4565b82525050565b600060208201905061180a60008301846117e6565b92915050565b611819816117d4565b811461182457600080fd5b50565b60008135905061183681611810565b92915050565b60008060408385031215611853576118526115d1565b5b600061186185828601611827565b925050602061187285828601611772565b9150509250929050565b600080600060608486031215611895576118946115d1565b5b60006118a386828701611827565b93505060206118b486828701611827565b92505060406118c586828701611772565b9150509250925092565b6000602082840312156118e5576118e46115d1565b5b60006118f384828501611827565b91505092915050565b61190581611751565b82525050565b600060208201905061192060008301846118fc565b92915050565b61192f81611660565b811461193a57600080fd5b50565b60008135905061194c81611926565b92915050565b60008060408385031215611969576119686115d1565b5b600061197785828601611827565b92505060206119888582860161193d565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119d4826116e5565b810181811067ffffffffffffffff821117156119f3576119f261199c565b5b80604052505050565b6000611a066115c7565b9050611a1282826119cb565b919050565b600067ffffffffffffffff821115611a3257611a3161199c565b5b611a3b826116e5565b9050602081019050919050565b82818337600083830152505050565b6000611a6a611a6584611a17565b6119fc565b905082815260208101848484011115611a8657611a85611997565b5b611a91848285611a48565b509392505050565b600082601f830112611aae57611aad611992565b5b8135611abe848260208601611a57565b91505092915050565b60008060008060808587031215611ae157611ae06115d1565b5b6000611aef87828801611827565b9450506020611b0087828801611827565b9350506040611b1187828801611772565b925050606085013567ffffffffffffffff811115611b3257611b316115d6565b5b611b3e87828801611a99565b91505092959194509250565b60008060408385031215611b6157611b606115d1565b5b6000611b6f85828601611827565b9250506020611b8085828601611827565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611bd157607f821691505b60208210811415611be557611be4611b8a565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c476021836116a1565b9150611c5282611beb565b604082019050919050565b60006020820190508181036000830152611c7681611c3a565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000611cd9603d836116a1565b9150611ce482611c7d565b604082019050919050565b60006020820190508181036000830152611d0881611ccc565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000611d6b602d836116a1565b9150611d7682611d0f565b604082019050919050565b60006020820190508181036000830152611d9a81611d5e565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000611dd76018836116a1565b9150611de282611da1565b602082019050919050565b60006020820190508181036000830152611e0681611dca565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000611e696029836116a1565b9150611e7482611e0d565b604082019050919050565b60006020820190508181036000830152611e9881611e5c565b9050919050565b600081905092915050565b6000611eb582611696565b611ebf8185611e9f565b9350611ecf8185602086016116b2565b80840191505092915050565b6000611ee78285611eaa565b9150611ef38284611eaa565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000611f5b6025836116a1565b9150611f6682611eff565b604082019050919050565b60006020820190508181036000830152611f8a81611f4e565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611fed6024836116a1565b9150611ff882611f91565b604082019050919050565b6000602082019050818103600083015261201c81611fe0565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006120596019836116a1565b915061206482612023565b602082019050919050565b600060208201905081810360008301526120888161204c565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006120eb6032836116a1565b91506120f68261208f565b604082019050919050565b6000602082019050818103600083015261211a816120de565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061218a82611751565b915061219583611751565b9250828210156121a8576121a7612150565b5b828203905092915050565b60006121be82611751565b91506121c983611751565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156121fe576121fd612150565b5b828201905092915050565b600081519050919050565b600082825260208201905092915050565b600061223082612209565b61223a8185612214565b935061224a8185602086016116b2565b612253816116e5565b840191505092915050565b600060808201905061227360008301876117e6565b61228060208301866117e6565b61228d60408301856118fc565b818103606083015261229f8184612225565b905095945050505050565b6000815190506122b981611607565b92915050565b6000602082840312156122d5576122d46115d1565b5b60006122e3848285016122aa565b9150509291505056fea2646970667358221220f01ff1e70c2de916124789824ce038db3eb48638984401926a5e103cffae006f64736f6c63430008080033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x26DA CODESIZE SUB DUP1 PUSH3 0x26DA DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x2BE JUMP JUMPDEST DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x4F SWAP3 SWAP2 SWAP1 PUSH3 0x71 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x68 SWAP3 SWAP2 SWAP1 PUSH3 0x71 JUMP JUMPDEST POP POP POP PUSH3 0x3A8 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x7F SWAP1 PUSH3 0x372 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xA3 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xEF JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xBE JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xEF JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xEF JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xEE JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xD1 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0xFE SWAP2 SWAP1 PUSH3 0x102 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x11D JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x103 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x18A DUP3 PUSH3 0x13F JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x1AC JUMPI PUSH3 0x1AB PUSH3 0x150 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1C1 PUSH3 0x121 JUMP JUMPDEST SWAP1 POP PUSH3 0x1CF DUP3 DUP3 PUSH3 0x17F JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x1F2 JUMPI PUSH3 0x1F1 PUSH3 0x150 JUMP JUMPDEST JUMPDEST PUSH3 0x1FD DUP3 PUSH3 0x13F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x22A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x20D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x23A JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x257 PUSH3 0x251 DUP5 PUSH3 0x1D4 JUMP JUMPDEST PUSH3 0x1B5 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x276 JUMPI PUSH3 0x275 PUSH3 0x13A JUMP JUMPDEST JUMPDEST PUSH3 0x283 DUP5 DUP3 DUP6 PUSH3 0x20A JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x2A3 JUMPI PUSH3 0x2A2 PUSH3 0x135 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x2B5 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x240 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x2D8 JUMPI PUSH3 0x2D7 PUSH3 0x12B JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x2F9 JUMPI PUSH3 0x2F8 PUSH3 0x130 JUMP JUMPDEST JUMPDEST PUSH3 0x307 DUP6 DUP3 DUP7 ADD PUSH3 0x28B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x32B JUMPI PUSH3 0x32A PUSH3 0x130 JUMP JUMPDEST JUMPDEST PUSH3 0x339 DUP6 DUP3 DUP7 ADD PUSH3 0x28B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x38B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x3A2 JUMPI PUSH3 0x3A1 PUSH3 0x343 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2322 DUP1 PUSH3 0x3B8 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1633 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x167B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x172F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x183C JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x187C JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x187C JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x18CF JUMP JUMPDEST PUSH2 0x695 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x190B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x172F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x1952 JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x1AC7 JUMP JUMPDEST PUSH2 0x7F5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x857 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x172F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1B4A JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x167B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x953 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1BB9 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1BB9 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E9 SWAP1 PUSH2 0x1C5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x511 PUSH2 0xA08 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x540 JUMPI POP PUSH2 0x53F DUP2 PUSH2 0x53A PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST JUMPDEST PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x576 SWAP1 PUSH2 0x1CEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x589 DUP4 DUP4 PUSH2 0xA10 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59F PUSH2 0x599 PUSH2 0xA08 JUMP JUMPDEST DUP3 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D5 SWAP1 PUSH2 0x1D81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E9 DUP4 DUP4 DUP4 PUSH2 0xB5E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x609 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x61A DUP4 PUSH2 0xE58 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x68C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x683 SWAP1 PUSH2 0x1DED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x706 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FD SWAP1 PUSH2 0x1E7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x75C SWAP1 PUSH2 0x1BB9 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x788 SWAP1 PUSH2 0x1BB9 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7AA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x7EA PUSH2 0xA08 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE95 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x806 PUSH2 0x800 PUSH2 0xA08 JUMP JUMPDEST DUP4 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x845 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x83C SWAP1 PUSH2 0x1D81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x851 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1002 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x862 DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86C PUSH2 0x105E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x88C JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B7 JUMP JUMPDEST DUP1 PUSH2 0x896 DUP5 PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A7 SWAP3 SWAP2 SWAP1 PUSH2 0x1EDB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C6 DUP2 PUSH2 0x114D JUMP JUMPDEST PUSH2 0xA05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9FC SWAP1 PUSH2 0x1DED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA83 DUP4 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD5 DUP4 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB17 JUMPI POP PUSH2 0xB16 DUP2 DUP6 PUSH2 0x8BF JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB55 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3D DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7E DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCB SWAP1 PUSH2 0x1F71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC3B SWAP1 PUSH2 0x2003 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC51 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x118E JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC71 DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1F71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE53 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x12B4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEFB SWAP1 PUSH2 0x206F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF5 SWAP2 SWAP1 PUSH2 0x167B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x100D DUP5 DUP5 DUP5 PUSH2 0xB5E JUMP JUMPDEST PUSH2 0x1019 DUP5 DUP5 DUP5 DUP5 PUSH2 0x12BA JUMP JUMPDEST PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104F SWAP1 PUSH2 0x2101 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1084 DUP5 PUSH2 0x1451 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10A3 JUMPI PUSH2 0x10A2 PUSH2 0x199C JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1142 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x112C JUMPI PUSH2 0x112B PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x113D JUMPI PUSH2 0x1142 JUMP JUMPDEST PUSH2 0x10E3 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x116F DUP4 PUSH2 0xE58 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x12AE JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1222 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x121A SWAP2 SWAP1 PUSH2 0x217F JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12AD JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12A5 SWAP2 SWAP1 PUSH2 0x21B3 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12DB DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x15A4 JUMP JUMPDEST ISZERO PUSH2 0x1444 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1304 PUSH2 0xA08 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1326 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x225E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1371 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x136E SWAP2 SWAP1 PUSH2 0x22BF JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x13F4 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x13A1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x13A6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x13EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13E3 SWAP1 PUSH2 0x2101 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1449 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x14AF JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x14A5 JUMPI PUSH2 0x14A4 PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x14EC JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x14E2 JUMPI PUSH2 0x14E1 PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x151B JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1511 JUMPI PUSH2 0x1510 PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1544 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x153A JUMPI PUSH2 0x1539 PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1569 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x155F JUMPI PUSH2 0x155E PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x158C JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1582 JUMPI PUSH2 0x1581 PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x159B JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1610 DUP2 PUSH2 0x15DB JUMP JUMPDEST DUP2 EQ PUSH2 0x161B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x162D DUP2 PUSH2 0x1607 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1649 JUMPI PUSH2 0x1648 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1657 DUP5 DUP3 DUP6 ADD PUSH2 0x161E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1675 DUP2 PUSH2 0x1660 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1690 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x166C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16D0 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x16B5 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x16DF JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1701 DUP3 PUSH2 0x1696 JUMP JUMPDEST PUSH2 0x170B DUP2 DUP6 PUSH2 0x16A1 JUMP JUMPDEST SWAP4 POP PUSH2 0x171B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x16B2 JUMP JUMPDEST PUSH2 0x1724 DUP2 PUSH2 0x16E5 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1749 DUP2 DUP5 PUSH2 0x16F6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1764 DUP2 PUSH2 0x1751 JUMP JUMPDEST DUP2 EQ PUSH2 0x176F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1781 DUP2 PUSH2 0x175B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x179D JUMPI PUSH2 0x179C PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17AB DUP5 DUP3 DUP6 ADD PUSH2 0x1772 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17DF DUP3 PUSH2 0x17B4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17EF DUP2 PUSH2 0x17D4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x180A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17E6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1819 DUP2 PUSH2 0x17D4 JUMP JUMPDEST DUP2 EQ PUSH2 0x1824 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1836 DUP2 PUSH2 0x1810 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1853 JUMPI PUSH2 0x1852 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1861 DUP6 DUP3 DUP7 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1872 DUP6 DUP3 DUP7 ADD PUSH2 0x1772 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1895 JUMPI PUSH2 0x1894 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18A3 DUP7 DUP3 DUP8 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x18B4 DUP7 DUP3 DUP8 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x18C5 DUP7 DUP3 DUP8 ADD PUSH2 0x1772 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18E5 JUMPI PUSH2 0x18E4 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18F3 DUP5 DUP3 DUP6 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1905 DUP2 PUSH2 0x1751 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1920 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18FC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x192F DUP2 PUSH2 0x1660 JUMP JUMPDEST DUP2 EQ PUSH2 0x193A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x194C DUP2 PUSH2 0x1926 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1969 JUMPI PUSH2 0x1968 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1977 DUP6 DUP3 DUP7 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1988 DUP6 DUP3 DUP7 ADD PUSH2 0x193D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x19D4 DUP3 PUSH2 0x16E5 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x19F3 JUMPI PUSH2 0x19F2 PUSH2 0x199C JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A06 PUSH2 0x15C7 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A12 DUP3 DUP3 PUSH2 0x19CB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1A32 JUMPI PUSH2 0x1A31 PUSH2 0x199C JUMP JUMPDEST JUMPDEST PUSH2 0x1A3B DUP3 PUSH2 0x16E5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A6A PUSH2 0x1A65 DUP5 PUSH2 0x1A17 JUMP JUMPDEST PUSH2 0x19FC JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1A86 JUMPI PUSH2 0x1A85 PUSH2 0x1997 JUMP JUMPDEST JUMPDEST PUSH2 0x1A91 DUP5 DUP3 DUP6 PUSH2 0x1A48 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1AAE JUMPI PUSH2 0x1AAD PUSH2 0x1992 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1ABE DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1A57 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1AE1 JUMPI PUSH2 0x1AE0 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1AEF DUP8 DUP3 DUP9 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1B00 DUP8 DUP3 DUP9 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1B11 DUP8 DUP3 DUP9 ADD PUSH2 0x1772 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B32 JUMPI PUSH2 0x1B31 PUSH2 0x15D6 JUMP JUMPDEST JUMPDEST PUSH2 0x1B3E DUP8 DUP3 DUP9 ADD PUSH2 0x1A99 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B61 JUMPI PUSH2 0x1B60 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B6F DUP6 DUP3 DUP7 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1B80 DUP6 DUP3 DUP7 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1BD1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1BE5 JUMPI PUSH2 0x1BE4 PUSH2 0x1B8A JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C47 PUSH1 0x21 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C52 DUP3 PUSH2 0x1BEB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C76 DUP2 PUSH2 0x1C3A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CD9 PUSH1 0x3D DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CE4 DUP3 PUSH2 0x1C7D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D08 DUP2 PUSH2 0x1CCC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D6B PUSH1 0x2D DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D76 DUP3 PUSH2 0x1D0F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D9A DUP2 PUSH2 0x1D5E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DD7 PUSH1 0x18 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DE2 DUP3 PUSH2 0x1DA1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E06 DUP2 PUSH2 0x1DCA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E69 PUSH1 0x29 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E74 DUP3 PUSH2 0x1E0D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E98 DUP2 PUSH2 0x1E5C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EB5 DUP3 PUSH2 0x1696 JUMP JUMPDEST PUSH2 0x1EBF DUP2 DUP6 PUSH2 0x1E9F JUMP JUMPDEST SWAP4 POP PUSH2 0x1ECF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x16B2 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EE7 DUP3 DUP6 PUSH2 0x1EAA JUMP JUMPDEST SWAP2 POP PUSH2 0x1EF3 DUP3 DUP5 PUSH2 0x1EAA JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F5B PUSH1 0x25 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F66 DUP3 PUSH2 0x1EFF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F8A DUP2 PUSH2 0x1F4E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FED PUSH1 0x24 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FF8 DUP3 PUSH2 0x1F91 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x201C DUP2 PUSH2 0x1FE0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2059 PUSH1 0x19 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x2064 DUP3 PUSH2 0x2023 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2088 DUP2 PUSH2 0x204C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20EB PUSH1 0x32 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x20F6 DUP3 PUSH2 0x208F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x211A DUP2 PUSH2 0x20DE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x218A DUP3 PUSH2 0x1751 JUMP JUMPDEST SWAP2 POP PUSH2 0x2195 DUP4 PUSH2 0x1751 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x21A8 JUMPI PUSH2 0x21A7 PUSH2 0x2150 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21BE DUP3 PUSH2 0x1751 JUMP JUMPDEST SWAP2 POP PUSH2 0x21C9 DUP4 PUSH2 0x1751 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x21FE JUMPI PUSH2 0x21FD PUSH2 0x2150 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2230 DUP3 PUSH2 0x2209 JUMP JUMPDEST PUSH2 0x223A DUP2 DUP6 PUSH2 0x2214 JUMP JUMPDEST SWAP4 POP PUSH2 0x224A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x16B2 JUMP JUMPDEST PUSH2 0x2253 DUP2 PUSH2 0x16E5 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2273 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x17E6 JUMP JUMPDEST PUSH2 0x2280 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x17E6 JUMP JUMPDEST PUSH2 0x228D PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x18FC JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x229F DUP2 DUP5 PUSH2 0x2225 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x22B9 DUP2 PUSH2 0x1607 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22D5 JUMPI PUSH2 0x22D4 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x22E3 DUP5 DUP3 DUP6 ADD PUSH2 0x22AA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE 0x1F CALL 0xE7 0xC 0x2D 0xE9 AND SLT SELFBALANCE DUP10 DUP3 0x4C 0xE0 CODESIZE 0xDB RETURNDATACOPY 0xB4 DUP7 CODESIZE SWAP9 DIFFICULTY ADD SWAP3 PUSH11 0x5E103CFFAE006F64736F6C PUSH4 0x43000808 STOP CALLER ","sourceMap":"628:16327:2:-:0;;;1390:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1464:5;1456;:13;;;;;;;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;;;;;;;:::i;:::-;;1390:113;;628:16327;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:75:13:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:307::-;1678:1;1688:113;1702:6;1699:1;1696:13;1688:113;;;1787:1;1782:3;1778:11;1772:18;1768:1;1763:3;1759:11;1752:39;1724:2;1721:1;1717:10;1712:15;;1688:113;;;1819:6;1816:1;1813:13;1810:101;;;1899:1;1890:6;1885:3;1881:16;1874:27;1810:101;1659:258;1610:307;;;:::o;1923:421::-;2012:5;2037:66;2053:49;2095:6;2053:49;:::i;:::-;2037:66;:::i;:::-;2028:75;;2126:6;2119:5;2112:21;2164:4;2157:5;2153:16;2202:3;2193:6;2188:3;2184:16;2181:25;2178:112;;;2209:79;;:::i;:::-;2178:112;2299:39;2331:6;2326:3;2321;2299:39;:::i;:::-;2018:326;1923:421;;;;;:::o;2364:355::-;2431:5;2480:3;2473:4;2465:6;2461:17;2457:27;2447:122;;2488:79;;:::i;:::-;2447:122;2598:6;2592:13;2623:90;2709:3;2701:6;2694:4;2686:6;2682:17;2623:90;:::i;:::-;2614:99;;2437:282;2364:355;;;;:::o;2725:853::-;2824:6;2832;2881:2;2869:9;2860:7;2856:23;2852:32;2849:119;;;2887:79;;:::i;:::-;2849:119;3028:1;3017:9;3013:17;3007:24;3058:18;3050:6;3047:30;3044:117;;;3080:79;;:::i;:::-;3044:117;3185:74;3251:7;3242:6;3231:9;3227:22;3185:74;:::i;:::-;3175:84;;2978:291;3329:2;3318:9;3314:18;3308:25;3360:18;3352:6;3349:30;3346:117;;;3382:79;;:::i;:::-;3346:117;3487:74;3553:7;3544:6;3533:9;3529:22;3487:74;:::i;:::-;3477:84;;3279:292;2725:853;;;;;:::o;3584:180::-;3632:77;3629:1;3622:88;3729:4;3726:1;3719:15;3753:4;3750:1;3743:15;3770:320;3814:6;3851:1;3845:4;3841:12;3831:22;;3898:1;3892:4;3888:12;3919:18;3909:81;;3975:4;3967:6;3963:17;3953:27;;3909:81;4037:2;4029:6;4026:14;4006:18;4003:38;4000:84;;;4056:18;;:::i;:::-;4000:84;3821:269;3770:320;;;:::o;628:16327:2:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1097":{"entryPoint":4788,"id":1097,"parameterSlots":4,"returnSlots":0},"@_approve_930":{"entryPoint":2576,"id":930,"parameterSlots":2,"returnSlots":0},"@_baseURI_367":{"entryPoint":4190,"id":367,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1084":{"entryPoint":4494,"id":1084,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_1038":{"entryPoint":4794,"id":1038,"parameterSlots":4,"returnSlots":1},"@_exists_599":{"entryPoint":4429,"id":599,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_633":{"entryPoint":2761,"id":633,"parameterSlots":2,"returnSlots":1},"@_msgSender_1601":{"entryPoint":2568,"id":1601,"parameterSlots":0,"returnSlots":1},"@_ownerOf_581":{"entryPoint":3672,"id":581,"parameterSlots":1,"returnSlots":1},"@_requireMinted_976":{"entryPoint":2493,"id":976,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_568":{"entryPoint":4098,"id":568,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_962":{"entryPoint":3733,"id":962,"parameterSlots":3,"returnSlots":0},"@_transfer_906":{"entryPoint":2910,"id":906,"parameterSlots":3,"returnSlots":0},"@approve_410":{"entryPoint":1142,"id":410,"parameterSlots":2,"returnSlots":0},"@balanceOf_271":{"entryPoint":1685,"id":271,"parameterSlots":1,"returnSlots":1},"@getApproved_428":{"entryPoint":1072,"id":428,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_463":{"entryPoint":2239,"id":463,"parameterSlots":2,"returnSlots":1},"@isContract_1277":{"entryPoint":5540,"id":1277,"parameterSlots":1,"returnSlots":1},"@log10_2524":{"entryPoint":5201,"id":2524,"parameterSlots":1,"returnSlots":1},"@name_309":{"entryPoint":926,"id":309,"parameterSlots":0,"returnSlots":1},"@ownerOf_299":{"entryPoint":1550,"id":299,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_509":{"entryPoint":1518,"id":509,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_539":{"entryPoint":2037,"id":539,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_445":{"entryPoint":2015,"id":445,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1809":{"entryPoint":2387,"id":1809,"parameterSlots":1,"returnSlots":1},"@supportsInterface_247":{"entryPoint":700,"id":247,"parameterSlots":1,"returnSlots":1},"@symbol_319":{"entryPoint":1869,"id":319,"parameterSlots":0,"returnSlots":1},"@toString_1669":{"entryPoint":4213,"id":1669,"parameterSlots":1,"returnSlots":1},"@tokenURI_358":{"entryPoint":2135,"id":358,"parameterSlots":1,"returnSlots":1},"@transferFrom_490":{"entryPoint":1422,"id":490,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":6743,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":6183,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":6461,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":5662,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":8874,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":6809,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":6002,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":6351,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":6986,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":6268,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":6855,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":6482,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":6204,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":5683,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":8895,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":6023,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":6118,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":5740,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":8741,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":5878,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7850,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack":{"entryPoint":7518,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":8414,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":8014,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":8160,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":8268,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":7772,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":7626,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":7226,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack":{"entryPoint":7372,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":6396,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7899,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":6133,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":8798,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":5755,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5935,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7553,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8449,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8049,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8195,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8303,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7807,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7661,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7261,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7407,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":6411,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":6652,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":5575,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":6679,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":8713,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":5782,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":8724,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":5793,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7839,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":8627,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":8575,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":6100,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":5728,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":5595,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":6068,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":5969,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":6728,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":5810,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":7097,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":6603,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x11":{"entryPoint":8528,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":8481,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":7050,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6556,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":6546,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":6551,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":5590,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":5585,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":5861,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af":{"entryPoint":7439,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":8335,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":7935,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":8081,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":8227,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":7693,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":7585,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":7147,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83":{"entryPoint":7293,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":6160,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":6438,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":5639,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":5979,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:23861:13","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:13","statements":[{"nodeType":"YulAssignment","src":"57:19:13","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:13","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:13"},"nodeType":"YulFunctionCall","src":"67:9:13"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:13"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:13","type":""}],"src":"7:75:13"},{"body":{"nodeType":"YulBlock","src":"177:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:13"},"nodeType":"YulFunctionCall","src":"187:12:13"},"nodeType":"YulExpressionStatement","src":"187:12:13"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:13"},{"body":{"nodeType":"YulBlock","src":"300:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:13"},"nodeType":"YulFunctionCall","src":"310:12:13"},"nodeType":"YulExpressionStatement","src":"310:12:13"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:13"},{"body":{"nodeType":"YulBlock","src":"378:105:13","statements":[{"nodeType":"YulAssignment","src":"388:89:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:13","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:13"},"nodeType":"YulFunctionCall","src":"399:78:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:13"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:13","type":""}],"src":"334:149:13"},{"body":{"nodeType":"YulBlock","src":"531:78:13","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:13"},"nodeType":"YulFunctionCall","src":"589:12:13"},"nodeType":"YulExpressionStatement","src":"589:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:13"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:13"},"nodeType":"YulFunctionCall","src":"561:23:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:13"},"nodeType":"YulFunctionCall","src":"551:34:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:13"},"nodeType":"YulFunctionCall","src":"544:42:13"},"nodeType":"YulIf","src":"541:62:13"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:13","type":""}],"src":"489:120:13"},{"body":{"nodeType":"YulBlock","src":"666:86:13","statements":[{"nodeType":"YulAssignment","src":"676:29:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:13"},"nodeType":"YulFunctionCall","src":"685:20:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:13"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:13"},"nodeType":"YulFunctionCall","src":"714:32:13"},"nodeType":"YulExpressionStatement","src":"714:32:13"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:13","type":""}],"src":"615:137:13"},{"body":{"nodeType":"YulBlock","src":"823:262:13","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:13"},"nodeType":"YulFunctionCall","src":"871:79:13"},"nodeType":"YulExpressionStatement","src":"871:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:13"},"nodeType":"YulFunctionCall","src":"840:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:13"},"nodeType":"YulFunctionCall","src":"836:32:13"},"nodeType":"YulIf","src":"833:119:13"},{"nodeType":"YulBlock","src":"962:116:13","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:13","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:13"},"nodeType":"YulFunctionCall","src":"1036:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:13"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:13"},"nodeType":"YulFunctionCall","src":"1016:52:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:13"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:13","type":""}],"src":"758:327:13"},{"body":{"nodeType":"YulBlock","src":"1133:48:13","statements":[{"nodeType":"YulAssignment","src":"1143:32:13","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:13"},"nodeType":"YulFunctionCall","src":"1161:13:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:13"},"nodeType":"YulFunctionCall","src":"1154:21:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:13"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:13","type":""}],"src":"1091:90:13"},{"body":{"nodeType":"YulBlock","src":"1246:50:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:13"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:13"},"nodeType":"YulFunctionCall","src":"1268:21:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:13"},"nodeType":"YulFunctionCall","src":"1256:34:13"},"nodeType":"YulExpressionStatement","src":"1256:34:13"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:13","type":""}],"src":"1187:109:13"},{"body":{"nodeType":"YulBlock","src":"1394:118:13","statements":[{"nodeType":"YulAssignment","src":"1404:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:13"},"nodeType":"YulFunctionCall","src":"1412:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:13"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:13"},"nodeType":"YulFunctionCall","src":"1487:17:13"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:13"},"nodeType":"YulFunctionCall","src":"1440:65:13"},"nodeType":"YulExpressionStatement","src":"1440:65:13"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:13","type":""}],"src":"1302:210:13"},{"body":{"nodeType":"YulBlock","src":"1577:40:13","statements":[{"nodeType":"YulAssignment","src":"1588:22:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1604:5:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1598:5:13"},"nodeType":"YulFunctionCall","src":"1598:12:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1588:6:13"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1560:5:13","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1570:6:13","type":""}],"src":"1518:99:13"},{"body":{"nodeType":"YulBlock","src":"1719:73:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1736:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"1741:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1729:6:13"},"nodeType":"YulFunctionCall","src":"1729:19:13"},"nodeType":"YulExpressionStatement","src":"1729:19:13"},{"nodeType":"YulAssignment","src":"1757:29:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1776:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"1781:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:13"},"nodeType":"YulFunctionCall","src":"1772:14:13"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1757:11:13"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1691:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"1696:6:13","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1707:11:13","type":""}],"src":"1623:169:13"},{"body":{"nodeType":"YulBlock","src":"1847:258:13","statements":[{"nodeType":"YulVariableDeclaration","src":"1857:10:13","value":{"kind":"number","nodeType":"YulLiteral","src":"1866:1:13","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1861:1:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"1926:63:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1951:3:13"},{"name":"i","nodeType":"YulIdentifier","src":"1956:1:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1947:3:13"},"nodeType":"YulFunctionCall","src":"1947:11:13"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1970:3:13"},{"name":"i","nodeType":"YulIdentifier","src":"1975:1:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1966:3:13"},"nodeType":"YulFunctionCall","src":"1966:11:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1960:5:13"},"nodeType":"YulFunctionCall","src":"1960:18:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1940:6:13"},"nodeType":"YulFunctionCall","src":"1940:39:13"},"nodeType":"YulExpressionStatement","src":"1940:39:13"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1887:1:13"},{"name":"length","nodeType":"YulIdentifier","src":"1890:6:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1884:2:13"},"nodeType":"YulFunctionCall","src":"1884:13:13"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1898:19:13","statements":[{"nodeType":"YulAssignment","src":"1900:15:13","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1909:1:13"},{"kind":"number","nodeType":"YulLiteral","src":"1912:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1905:3:13"},"nodeType":"YulFunctionCall","src":"1905:10:13"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1900:1:13"}]}]},"pre":{"nodeType":"YulBlock","src":"1880:3:13","statements":[]},"src":"1876:113:13"},{"body":{"nodeType":"YulBlock","src":"2023:76:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2073:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"2078:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2069:3:13"},"nodeType":"YulFunctionCall","src":"2069:16:13"},{"kind":"number","nodeType":"YulLiteral","src":"2087:1:13","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2062:6:13"},"nodeType":"YulFunctionCall","src":"2062:27:13"},"nodeType":"YulExpressionStatement","src":"2062:27:13"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2004:1:13"},{"name":"length","nodeType":"YulIdentifier","src":"2007:6:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2001:2:13"},"nodeType":"YulFunctionCall","src":"2001:13:13"},"nodeType":"YulIf","src":"1998:101:13"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1829:3:13","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1834:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"1839:6:13","type":""}],"src":"1798:307:13"},{"body":{"nodeType":"YulBlock","src":"2159:54:13","statements":[{"nodeType":"YulAssignment","src":"2169:38:13","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2187:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"2194:2:13","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2183:3:13"},"nodeType":"YulFunctionCall","src":"2183:14:13"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2203:2:13","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2199:3:13"},"nodeType":"YulFunctionCall","src":"2199:7:13"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2179:3:13"},"nodeType":"YulFunctionCall","src":"2179:28:13"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2169:6:13"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2142:5:13","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2152:6:13","type":""}],"src":"2111:102:13"},{"body":{"nodeType":"YulBlock","src":"2311:272:13","statements":[{"nodeType":"YulVariableDeclaration","src":"2321:53:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2368:5:13"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2335:32:13"},"nodeType":"YulFunctionCall","src":"2335:39:13"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2325:6:13","type":""}]},{"nodeType":"YulAssignment","src":"2383:78:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2449:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"2454:6:13"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2390:58:13"},"nodeType":"YulFunctionCall","src":"2390:71:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2383:3:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2496:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"2503:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2492:3:13"},"nodeType":"YulFunctionCall","src":"2492:16:13"},{"name":"pos","nodeType":"YulIdentifier","src":"2510:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"2515:6:13"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"2470:21:13"},"nodeType":"YulFunctionCall","src":"2470:52:13"},"nodeType":"YulExpressionStatement","src":"2470:52:13"},{"nodeType":"YulAssignment","src":"2531:46:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2542:3:13"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2569:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2547:21:13"},"nodeType":"YulFunctionCall","src":"2547:29:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2538:3:13"},"nodeType":"YulFunctionCall","src":"2538:39:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2531:3:13"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2292:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2299:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2307:3:13","type":""}],"src":"2219:364:13"},{"body":{"nodeType":"YulBlock","src":"2707:195:13","statements":[{"nodeType":"YulAssignment","src":"2717:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2729:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"2740:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2725:3:13"},"nodeType":"YulFunctionCall","src":"2725:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2717:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2764:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"2775:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2760:3:13"},"nodeType":"YulFunctionCall","src":"2760:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2783:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"2789:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2779:3:13"},"nodeType":"YulFunctionCall","src":"2779:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2753:6:13"},"nodeType":"YulFunctionCall","src":"2753:47:13"},"nodeType":"YulExpressionStatement","src":"2753:47:13"},{"nodeType":"YulAssignment","src":"2809:86:13","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2881:6:13"},{"name":"tail","nodeType":"YulIdentifier","src":"2890:4:13"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2817:63:13"},"nodeType":"YulFunctionCall","src":"2817:78:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2809:4:13"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2679:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2691:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2702:4:13","type":""}],"src":"2589:313:13"},{"body":{"nodeType":"YulBlock","src":"2953:32:13","statements":[{"nodeType":"YulAssignment","src":"2963:16:13","value":{"name":"value","nodeType":"YulIdentifier","src":"2974:5:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2963:7:13"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2935:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2945:7:13","type":""}],"src":"2908:77:13"},{"body":{"nodeType":"YulBlock","src":"3034:79:13","statements":[{"body":{"nodeType":"YulBlock","src":"3091:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3100:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3103:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3093:6:13"},"nodeType":"YulFunctionCall","src":"3093:12:13"},"nodeType":"YulExpressionStatement","src":"3093:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3057:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3082:5:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3064:17:13"},"nodeType":"YulFunctionCall","src":"3064:24:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3054:2:13"},"nodeType":"YulFunctionCall","src":"3054:35:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3047:6:13"},"nodeType":"YulFunctionCall","src":"3047:43:13"},"nodeType":"YulIf","src":"3044:63:13"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3027:5:13","type":""}],"src":"2991:122:13"},{"body":{"nodeType":"YulBlock","src":"3171:87:13","statements":[{"nodeType":"YulAssignment","src":"3181:29:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3203:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3190:12:13"},"nodeType":"YulFunctionCall","src":"3190:20:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3181:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3246:5:13"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3219:26:13"},"nodeType":"YulFunctionCall","src":"3219:33:13"},"nodeType":"YulExpressionStatement","src":"3219:33:13"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3149:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"3157:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3165:5:13","type":""}],"src":"3119:139:13"},{"body":{"nodeType":"YulBlock","src":"3330:263:13","statements":[{"body":{"nodeType":"YulBlock","src":"3376:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3378:77:13"},"nodeType":"YulFunctionCall","src":"3378:79:13"},"nodeType":"YulExpressionStatement","src":"3378:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3351:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"3360:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3347:3:13"},"nodeType":"YulFunctionCall","src":"3347:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"3372:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3343:3:13"},"nodeType":"YulFunctionCall","src":"3343:32:13"},"nodeType":"YulIf","src":"3340:119:13"},{"nodeType":"YulBlock","src":"3469:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"3484:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"3498:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3488:6:13","type":""}]},{"nodeType":"YulAssignment","src":"3513:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3548:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"3559:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3544:3:13"},"nodeType":"YulFunctionCall","src":"3544:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3568:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3523:20:13"},"nodeType":"YulFunctionCall","src":"3523:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3513:6:13"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3300:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3311:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3323:6:13","type":""}],"src":"3264:329:13"},{"body":{"nodeType":"YulBlock","src":"3644:81:13","statements":[{"nodeType":"YulAssignment","src":"3654:65:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3669:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"3676:42:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3665:3:13"},"nodeType":"YulFunctionCall","src":"3665:54:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3654:7:13"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3626:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3636:7:13","type":""}],"src":"3599:126:13"},{"body":{"nodeType":"YulBlock","src":"3776:51:13","statements":[{"nodeType":"YulAssignment","src":"3786:35:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3815:5:13"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3797:17:13"},"nodeType":"YulFunctionCall","src":"3797:24:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3786:7:13"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3758:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3768:7:13","type":""}],"src":"3731:96:13"},{"body":{"nodeType":"YulBlock","src":"3898:53:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3915:3:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3938:5:13"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3920:17:13"},"nodeType":"YulFunctionCall","src":"3920:24:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3908:6:13"},"nodeType":"YulFunctionCall","src":"3908:37:13"},"nodeType":"YulExpressionStatement","src":"3908:37:13"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3886:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3893:3:13","type":""}],"src":"3833:118:13"},{"body":{"nodeType":"YulBlock","src":"4055:124:13","statements":[{"nodeType":"YulAssignment","src":"4065:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4077:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"4088:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4073:3:13"},"nodeType":"YulFunctionCall","src":"4073:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4065:4:13"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4145:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4158:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"4169:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4154:3:13"},"nodeType":"YulFunctionCall","src":"4154:17:13"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4101:43:13"},"nodeType":"YulFunctionCall","src":"4101:71:13"},"nodeType":"YulExpressionStatement","src":"4101:71:13"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4027:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4039:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4050:4:13","type":""}],"src":"3957:222:13"},{"body":{"nodeType":"YulBlock","src":"4228:79:13","statements":[{"body":{"nodeType":"YulBlock","src":"4285:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4294:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4297:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4287:6:13"},"nodeType":"YulFunctionCall","src":"4287:12:13"},"nodeType":"YulExpressionStatement","src":"4287:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4251:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4276:5:13"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4258:17:13"},"nodeType":"YulFunctionCall","src":"4258:24:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4248:2:13"},"nodeType":"YulFunctionCall","src":"4248:35:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4241:6:13"},"nodeType":"YulFunctionCall","src":"4241:43:13"},"nodeType":"YulIf","src":"4238:63:13"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4221:5:13","type":""}],"src":"4185:122:13"},{"body":{"nodeType":"YulBlock","src":"4365:87:13","statements":[{"nodeType":"YulAssignment","src":"4375:29:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4397:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4384:12:13"},"nodeType":"YulFunctionCall","src":"4384:20:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4375:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4440:5:13"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4413:26:13"},"nodeType":"YulFunctionCall","src":"4413:33:13"},"nodeType":"YulExpressionStatement","src":"4413:33:13"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4343:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"4351:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4359:5:13","type":""}],"src":"4313:139:13"},{"body":{"nodeType":"YulBlock","src":"4541:391:13","statements":[{"body":{"nodeType":"YulBlock","src":"4587:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4589:77:13"},"nodeType":"YulFunctionCall","src":"4589:79:13"},"nodeType":"YulExpressionStatement","src":"4589:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4562:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"4571:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4558:3:13"},"nodeType":"YulFunctionCall","src":"4558:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"4583:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4554:3:13"},"nodeType":"YulFunctionCall","src":"4554:32:13"},"nodeType":"YulIf","src":"4551:119:13"},{"nodeType":"YulBlock","src":"4680:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"4695:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"4709:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4699:6:13","type":""}]},{"nodeType":"YulAssignment","src":"4724:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4759:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"4770:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4755:3:13"},"nodeType":"YulFunctionCall","src":"4755:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4779:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4734:20:13"},"nodeType":"YulFunctionCall","src":"4734:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4724:6:13"}]}]},{"nodeType":"YulBlock","src":"4807:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"4822:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"4836:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4826:6:13","type":""}]},{"nodeType":"YulAssignment","src":"4852:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4887:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"4898:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4883:3:13"},"nodeType":"YulFunctionCall","src":"4883:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4907:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4862:20:13"},"nodeType":"YulFunctionCall","src":"4862:53:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4852:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4503:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4514:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4526:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4534:6:13","type":""}],"src":"4458:474:13"},{"body":{"nodeType":"YulBlock","src":"5038:519:13","statements":[{"body":{"nodeType":"YulBlock","src":"5084:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5086:77:13"},"nodeType":"YulFunctionCall","src":"5086:79:13"},"nodeType":"YulExpressionStatement","src":"5086:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5059:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"5068:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5055:3:13"},"nodeType":"YulFunctionCall","src":"5055:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"5080:2:13","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5051:3:13"},"nodeType":"YulFunctionCall","src":"5051:32:13"},"nodeType":"YulIf","src":"5048:119:13"},{"nodeType":"YulBlock","src":"5177:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"5192:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"5206:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5196:6:13","type":""}]},{"nodeType":"YulAssignment","src":"5221:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5256:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"5267:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5252:3:13"},"nodeType":"YulFunctionCall","src":"5252:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5276:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5231:20:13"},"nodeType":"YulFunctionCall","src":"5231:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5221:6:13"}]}]},{"nodeType":"YulBlock","src":"5304:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"5319:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"5333:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5323:6:13","type":""}]},{"nodeType":"YulAssignment","src":"5349:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5384:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"5395:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5380:3:13"},"nodeType":"YulFunctionCall","src":"5380:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5404:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5359:20:13"},"nodeType":"YulFunctionCall","src":"5359:53:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5349:6:13"}]}]},{"nodeType":"YulBlock","src":"5432:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"5447:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"5461:2:13","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5451:6:13","type":""}]},{"nodeType":"YulAssignment","src":"5477:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5512:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"5523:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5508:3:13"},"nodeType":"YulFunctionCall","src":"5508:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5532:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5487:20:13"},"nodeType":"YulFunctionCall","src":"5487:53:13"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5477:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4992:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5003:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5015:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5023:6:13","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5031:6:13","type":""}],"src":"4938:619:13"},{"body":{"nodeType":"YulBlock","src":"5629:263:13","statements":[{"body":{"nodeType":"YulBlock","src":"5675:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5677:77:13"},"nodeType":"YulFunctionCall","src":"5677:79:13"},"nodeType":"YulExpressionStatement","src":"5677:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5650:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"5659:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5646:3:13"},"nodeType":"YulFunctionCall","src":"5646:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"5671:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5642:3:13"},"nodeType":"YulFunctionCall","src":"5642:32:13"},"nodeType":"YulIf","src":"5639:119:13"},{"nodeType":"YulBlock","src":"5768:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"5783:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"5797:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5787:6:13","type":""}]},{"nodeType":"YulAssignment","src":"5812:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5847:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"5858:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5843:3:13"},"nodeType":"YulFunctionCall","src":"5843:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5867:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5822:20:13"},"nodeType":"YulFunctionCall","src":"5822:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5812:6:13"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5599:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5610:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5622:6:13","type":""}],"src":"5563:329:13"},{"body":{"nodeType":"YulBlock","src":"5963:53:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5980:3:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6003:5:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5985:17:13"},"nodeType":"YulFunctionCall","src":"5985:24:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5973:6:13"},"nodeType":"YulFunctionCall","src":"5973:37:13"},"nodeType":"YulExpressionStatement","src":"5973:37:13"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5951:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5958:3:13","type":""}],"src":"5898:118:13"},{"body":{"nodeType":"YulBlock","src":"6120:124:13","statements":[{"nodeType":"YulAssignment","src":"6130:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6142:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"6153:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6138:3:13"},"nodeType":"YulFunctionCall","src":"6138:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6130:4:13"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6210:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6223:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"6234:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6219:3:13"},"nodeType":"YulFunctionCall","src":"6219:17:13"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"6166:43:13"},"nodeType":"YulFunctionCall","src":"6166:71:13"},"nodeType":"YulExpressionStatement","src":"6166:71:13"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6092:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6104:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6115:4:13","type":""}],"src":"6022:222:13"},{"body":{"nodeType":"YulBlock","src":"6290:76:13","statements":[{"body":{"nodeType":"YulBlock","src":"6344:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6353:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6356:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6346:6:13"},"nodeType":"YulFunctionCall","src":"6346:12:13"},"nodeType":"YulExpressionStatement","src":"6346:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6313:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6335:5:13"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"6320:14:13"},"nodeType":"YulFunctionCall","src":"6320:21:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6310:2:13"},"nodeType":"YulFunctionCall","src":"6310:32:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6303:6:13"},"nodeType":"YulFunctionCall","src":"6303:40:13"},"nodeType":"YulIf","src":"6300:60:13"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6283:5:13","type":""}],"src":"6250:116:13"},{"body":{"nodeType":"YulBlock","src":"6421:84:13","statements":[{"nodeType":"YulAssignment","src":"6431:29:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6453:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6440:12:13"},"nodeType":"YulFunctionCall","src":"6440:20:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6431:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6493:5:13"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"6469:23:13"},"nodeType":"YulFunctionCall","src":"6469:30:13"},"nodeType":"YulExpressionStatement","src":"6469:30:13"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6399:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"6407:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6415:5:13","type":""}],"src":"6372:133:13"},{"body":{"nodeType":"YulBlock","src":"6591:388:13","statements":[{"body":{"nodeType":"YulBlock","src":"6637:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6639:77:13"},"nodeType":"YulFunctionCall","src":"6639:79:13"},"nodeType":"YulExpressionStatement","src":"6639:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6612:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"6621:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6608:3:13"},"nodeType":"YulFunctionCall","src":"6608:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"6633:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6604:3:13"},"nodeType":"YulFunctionCall","src":"6604:32:13"},"nodeType":"YulIf","src":"6601:119:13"},{"nodeType":"YulBlock","src":"6730:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"6745:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"6759:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6749:6:13","type":""}]},{"nodeType":"YulAssignment","src":"6774:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6809:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"6820:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6805:3:13"},"nodeType":"YulFunctionCall","src":"6805:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6829:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6784:20:13"},"nodeType":"YulFunctionCall","src":"6784:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6774:6:13"}]}]},{"nodeType":"YulBlock","src":"6857:115:13","statements":[{"nodeType":"YulVariableDeclaration","src":"6872:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"6886:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6876:6:13","type":""}]},{"nodeType":"YulAssignment","src":"6902:60:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6934:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"6945:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6930:3:13"},"nodeType":"YulFunctionCall","src":"6930:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6954:7:13"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"6912:17:13"},"nodeType":"YulFunctionCall","src":"6912:50:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6902:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6553:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6564:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6576:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6584:6:13","type":""}],"src":"6511:468:13"},{"body":{"nodeType":"YulBlock","src":"7074:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7091:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7094:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7084:6:13"},"nodeType":"YulFunctionCall","src":"7084:12:13"},"nodeType":"YulExpressionStatement","src":"7084:12:13"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"6985:117:13"},{"body":{"nodeType":"YulBlock","src":"7197:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7214:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7217:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7207:6:13"},"nodeType":"YulFunctionCall","src":"7207:12:13"},"nodeType":"YulExpressionStatement","src":"7207:12:13"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"7108:117:13"},{"body":{"nodeType":"YulBlock","src":"7259:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7276:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7279:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7269:6:13"},"nodeType":"YulFunctionCall","src":"7269:88:13"},"nodeType":"YulExpressionStatement","src":"7269:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7373:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7376:4:13","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7366:6:13"},"nodeType":"YulFunctionCall","src":"7366:15:13"},"nodeType":"YulExpressionStatement","src":"7366:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7397:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7400:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7390:6:13"},"nodeType":"YulFunctionCall","src":"7390:15:13"},"nodeType":"YulExpressionStatement","src":"7390:15:13"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"7231:180:13"},{"body":{"nodeType":"YulBlock","src":"7460:238:13","statements":[{"nodeType":"YulVariableDeclaration","src":"7470:58:13","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7492:6:13"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7522:4:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7500:21:13"},"nodeType":"YulFunctionCall","src":"7500:27:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7488:3:13"},"nodeType":"YulFunctionCall","src":"7488:40:13"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"7474:10:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"7639:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7641:16:13"},"nodeType":"YulFunctionCall","src":"7641:18:13"},"nodeType":"YulExpressionStatement","src":"7641:18:13"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7582:10:13"},{"kind":"number","nodeType":"YulLiteral","src":"7594:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7579:2:13"},"nodeType":"YulFunctionCall","src":"7579:34:13"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7618:10:13"},{"name":"memPtr","nodeType":"YulIdentifier","src":"7630:6:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7615:2:13"},"nodeType":"YulFunctionCall","src":"7615:22:13"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7576:2:13"},"nodeType":"YulFunctionCall","src":"7576:62:13"},"nodeType":"YulIf","src":"7573:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7677:2:13","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7681:10:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7670:6:13"},"nodeType":"YulFunctionCall","src":"7670:22:13"},"nodeType":"YulExpressionStatement","src":"7670:22:13"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7446:6:13","type":""},{"name":"size","nodeType":"YulTypedName","src":"7454:4:13","type":""}],"src":"7417:281:13"},{"body":{"nodeType":"YulBlock","src":"7745:88:13","statements":[{"nodeType":"YulAssignment","src":"7755:30:13","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"7765:18:13"},"nodeType":"YulFunctionCall","src":"7765:20:13"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7755:6:13"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7814:6:13"},{"name":"size","nodeType":"YulIdentifier","src":"7822:4:13"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"7794:19:13"},"nodeType":"YulFunctionCall","src":"7794:33:13"},"nodeType":"YulExpressionStatement","src":"7794:33:13"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"7729:4:13","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"7738:6:13","type":""}],"src":"7704:129:13"},{"body":{"nodeType":"YulBlock","src":"7905:241:13","statements":[{"body":{"nodeType":"YulBlock","src":"8010:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"8012:16:13"},"nodeType":"YulFunctionCall","src":"8012:18:13"},"nodeType":"YulExpressionStatement","src":"8012:18:13"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7982:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"7990:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7979:2:13"},"nodeType":"YulFunctionCall","src":"7979:30:13"},"nodeType":"YulIf","src":"7976:56:13"},{"nodeType":"YulAssignment","src":"8042:37:13","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8072:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"8050:21:13"},"nodeType":"YulFunctionCall","src":"8050:29:13"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8042:4:13"}]},{"nodeType":"YulAssignment","src":"8116:23:13","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"8128:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"8134:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8124:3:13"},"nodeType":"YulFunctionCall","src":"8124:15:13"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8116:4:13"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"7889:6:13","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"7900:4:13","type":""}],"src":"7839:307:13"},{"body":{"nodeType":"YulBlock","src":"8203:103:13","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8226:3:13"},{"name":"src","nodeType":"YulIdentifier","src":"8231:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"8236:6:13"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"8213:12:13"},"nodeType":"YulFunctionCall","src":"8213:30:13"},"nodeType":"YulExpressionStatement","src":"8213:30:13"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8284:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"8289:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8280:3:13"},"nodeType":"YulFunctionCall","src":"8280:16:13"},{"kind":"number","nodeType":"YulLiteral","src":"8298:1:13","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8273:6:13"},"nodeType":"YulFunctionCall","src":"8273:27:13"},"nodeType":"YulExpressionStatement","src":"8273:27:13"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8185:3:13","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8190:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"8195:6:13","type":""}],"src":"8152:154:13"},{"body":{"nodeType":"YulBlock","src":"8395:327:13","statements":[{"nodeType":"YulAssignment","src":"8405:74:13","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8471:6:13"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8430:40:13"},"nodeType":"YulFunctionCall","src":"8430:48:13"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"8414:15:13"},"nodeType":"YulFunctionCall","src":"8414:65:13"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8405:5:13"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8495:5:13"},{"name":"length","nodeType":"YulIdentifier","src":"8502:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8488:6:13"},"nodeType":"YulFunctionCall","src":"8488:21:13"},"nodeType":"YulExpressionStatement","src":"8488:21:13"},{"nodeType":"YulVariableDeclaration","src":"8518:27:13","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8533:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"8540:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8529:3:13"},"nodeType":"YulFunctionCall","src":"8529:16:13"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"8522:3:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"8583:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"8585:77:13"},"nodeType":"YulFunctionCall","src":"8585:79:13"},"nodeType":"YulExpressionStatement","src":"8585:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8564:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"8569:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8560:3:13"},"nodeType":"YulFunctionCall","src":"8560:16:13"},{"name":"end","nodeType":"YulIdentifier","src":"8578:3:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8557:2:13"},"nodeType":"YulFunctionCall","src":"8557:25:13"},"nodeType":"YulIf","src":"8554:112:13"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8699:3:13"},{"name":"dst","nodeType":"YulIdentifier","src":"8704:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"8709:6:13"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"8675:23:13"},"nodeType":"YulFunctionCall","src":"8675:41:13"},"nodeType":"YulExpressionStatement","src":"8675:41:13"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8368:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"8373:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"8381:3:13","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8389:5:13","type":""}],"src":"8312:410:13"},{"body":{"nodeType":"YulBlock","src":"8802:277:13","statements":[{"body":{"nodeType":"YulBlock","src":"8851:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8853:77:13"},"nodeType":"YulFunctionCall","src":"8853:79:13"},"nodeType":"YulExpressionStatement","src":"8853:79:13"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8830:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"8838:4:13","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8826:3:13"},"nodeType":"YulFunctionCall","src":"8826:17:13"},{"name":"end","nodeType":"YulIdentifier","src":"8845:3:13"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8822:3:13"},"nodeType":"YulFunctionCall","src":"8822:27:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8815:6:13"},"nodeType":"YulFunctionCall","src":"8815:35:13"},"nodeType":"YulIf","src":"8812:122:13"},{"nodeType":"YulVariableDeclaration","src":"8943:34:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8970:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8957:12:13"},"nodeType":"YulFunctionCall","src":"8957:20:13"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8947:6:13","type":""}]},{"nodeType":"YulAssignment","src":"8986:87:13","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9046:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"9054:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9042:3:13"},"nodeType":"YulFunctionCall","src":"9042:17:13"},{"name":"length","nodeType":"YulIdentifier","src":"9061:6:13"},{"name":"end","nodeType":"YulIdentifier","src":"9069:3:13"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8995:46:13"},"nodeType":"YulFunctionCall","src":"8995:78:13"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8986:5:13"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8780:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"8788:3:13","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8796:5:13","type":""}],"src":"8741:338:13"},{"body":{"nodeType":"YulBlock","src":"9211:817:13","statements":[{"body":{"nodeType":"YulBlock","src":"9258:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9260:77:13"},"nodeType":"YulFunctionCall","src":"9260:79:13"},"nodeType":"YulExpressionStatement","src":"9260:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9232:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"9241:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9228:3:13"},"nodeType":"YulFunctionCall","src":"9228:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"9253:3:13","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9224:3:13"},"nodeType":"YulFunctionCall","src":"9224:33:13"},"nodeType":"YulIf","src":"9221:120:13"},{"nodeType":"YulBlock","src":"9351:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"9366:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"9380:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9370:6:13","type":""}]},{"nodeType":"YulAssignment","src":"9395:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9430:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"9441:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9426:3:13"},"nodeType":"YulFunctionCall","src":"9426:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9450:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9405:20:13"},"nodeType":"YulFunctionCall","src":"9405:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9395:6:13"}]}]},{"nodeType":"YulBlock","src":"9478:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"9493:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"9507:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9497:6:13","type":""}]},{"nodeType":"YulAssignment","src":"9523:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9558:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"9569:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9554:3:13"},"nodeType":"YulFunctionCall","src":"9554:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9578:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9533:20:13"},"nodeType":"YulFunctionCall","src":"9533:53:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9523:6:13"}]}]},{"nodeType":"YulBlock","src":"9606:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"9621:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"9635:2:13","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9625:6:13","type":""}]},{"nodeType":"YulAssignment","src":"9651:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9686:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"9697:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9682:3:13"},"nodeType":"YulFunctionCall","src":"9682:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9706:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9661:20:13"},"nodeType":"YulFunctionCall","src":"9661:53:13"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9651:6:13"}]}]},{"nodeType":"YulBlock","src":"9734:287:13","statements":[{"nodeType":"YulVariableDeclaration","src":"9749:46:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9780:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"9791:2:13","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9776:3:13"},"nodeType":"YulFunctionCall","src":"9776:18:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9763:12:13"},"nodeType":"YulFunctionCall","src":"9763:32:13"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9753:6:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"9842:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9844:77:13"},"nodeType":"YulFunctionCall","src":"9844:79:13"},"nodeType":"YulExpressionStatement","src":"9844:79:13"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9814:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"9822:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9811:2:13"},"nodeType":"YulFunctionCall","src":"9811:30:13"},"nodeType":"YulIf","src":"9808:117:13"},{"nodeType":"YulAssignment","src":"9939:72:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9983:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"9994:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9979:3:13"},"nodeType":"YulFunctionCall","src":"9979:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10003:7:13"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"9949:29:13"},"nodeType":"YulFunctionCall","src":"9949:62:13"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"9939:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9157:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9168:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9180:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9188:6:13","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9196:6:13","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9204:6:13","type":""}],"src":"9085:943:13"},{"body":{"nodeType":"YulBlock","src":"10117:391:13","statements":[{"body":{"nodeType":"YulBlock","src":"10163:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10165:77:13"},"nodeType":"YulFunctionCall","src":"10165:79:13"},"nodeType":"YulExpressionStatement","src":"10165:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10138:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"10147:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10134:3:13"},"nodeType":"YulFunctionCall","src":"10134:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"10159:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10130:3:13"},"nodeType":"YulFunctionCall","src":"10130:32:13"},"nodeType":"YulIf","src":"10127:119:13"},{"nodeType":"YulBlock","src":"10256:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"10271:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"10285:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10275:6:13","type":""}]},{"nodeType":"YulAssignment","src":"10300:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10335:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"10346:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10331:3:13"},"nodeType":"YulFunctionCall","src":"10331:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10355:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10310:20:13"},"nodeType":"YulFunctionCall","src":"10310:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10300:6:13"}]}]},{"nodeType":"YulBlock","src":"10383:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"10398:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"10412:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10402:6:13","type":""}]},{"nodeType":"YulAssignment","src":"10428:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10463:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"10474:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10459:3:13"},"nodeType":"YulFunctionCall","src":"10459:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10483:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10438:20:13"},"nodeType":"YulFunctionCall","src":"10438:53:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10428:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10079:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10090:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10102:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10110:6:13","type":""}],"src":"10034:474:13"},{"body":{"nodeType":"YulBlock","src":"10542:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10559:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10562:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10552:6:13"},"nodeType":"YulFunctionCall","src":"10552:88:13"},"nodeType":"YulExpressionStatement","src":"10552:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10656:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10659:4:13","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10649:6:13"},"nodeType":"YulFunctionCall","src":"10649:15:13"},"nodeType":"YulExpressionStatement","src":"10649:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10680:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10683:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10673:6:13"},"nodeType":"YulFunctionCall","src":"10673:15:13"},"nodeType":"YulExpressionStatement","src":"10673:15:13"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"10514:180:13"},{"body":{"nodeType":"YulBlock","src":"10751:269:13","statements":[{"nodeType":"YulAssignment","src":"10761:22:13","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10775:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"10781:1:13","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"10771:3:13"},"nodeType":"YulFunctionCall","src":"10771:12:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10761:6:13"}]},{"nodeType":"YulVariableDeclaration","src":"10792:38:13","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10822:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"10828:1:13","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10818:3:13"},"nodeType":"YulFunctionCall","src":"10818:12:13"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"10796:18:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"10869:51:13","statements":[{"nodeType":"YulAssignment","src":"10883:27:13","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10897:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"10905:4:13","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10893:3:13"},"nodeType":"YulFunctionCall","src":"10893:17:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10883:6:13"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10849:18:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10842:6:13"},"nodeType":"YulFunctionCall","src":"10842:26:13"},"nodeType":"YulIf","src":"10839:81:13"},{"body":{"nodeType":"YulBlock","src":"10972:42:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"10986:16:13"},"nodeType":"YulFunctionCall","src":"10986:18:13"},"nodeType":"YulExpressionStatement","src":"10986:18:13"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10936:18:13"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10959:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"10967:2:13","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10956:2:13"},"nodeType":"YulFunctionCall","src":"10956:14:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10933:2:13"},"nodeType":"YulFunctionCall","src":"10933:38:13"},"nodeType":"YulIf","src":"10930:84:13"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"10735:4:13","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"10744:6:13","type":""}],"src":"10700:320:13"},{"body":{"nodeType":"YulBlock","src":"11132:114:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11154:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"11162:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11150:3:13"},"nodeType":"YulFunctionCall","src":"11150:14:13"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"11166:34:13","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11143:6:13"},"nodeType":"YulFunctionCall","src":"11143:58:13"},"nodeType":"YulExpressionStatement","src":"11143:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11222:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"11230:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11218:3:13"},"nodeType":"YulFunctionCall","src":"11218:15:13"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"11235:3:13","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11211:6:13"},"nodeType":"YulFunctionCall","src":"11211:28:13"},"nodeType":"YulExpressionStatement","src":"11211:28:13"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11124:6:13","type":""}],"src":"11026:220:13"},{"body":{"nodeType":"YulBlock","src":"11398:220:13","statements":[{"nodeType":"YulAssignment","src":"11408:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11474:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"11479:2:13","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11415:58:13"},"nodeType":"YulFunctionCall","src":"11415:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11408:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11580:3:13"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"11491:88:13"},"nodeType":"YulFunctionCall","src":"11491:93:13"},"nodeType":"YulExpressionStatement","src":"11491:93:13"},{"nodeType":"YulAssignment","src":"11593:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11604:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"11609:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11600:3:13"},"nodeType":"YulFunctionCall","src":"11600:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11593:3:13"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11386:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11394:3:13","type":""}],"src":"11252:366:13"},{"body":{"nodeType":"YulBlock","src":"11795:248:13","statements":[{"nodeType":"YulAssignment","src":"11805:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11817:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"11828:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11813:3:13"},"nodeType":"YulFunctionCall","src":"11813:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11805:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11852:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"11863:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11848:3:13"},"nodeType":"YulFunctionCall","src":"11848:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11871:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"11877:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11867:3:13"},"nodeType":"YulFunctionCall","src":"11867:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11841:6:13"},"nodeType":"YulFunctionCall","src":"11841:47:13"},"nodeType":"YulExpressionStatement","src":"11841:47:13"},{"nodeType":"YulAssignment","src":"11897:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12031:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11905:124:13"},"nodeType":"YulFunctionCall","src":"11905:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11897:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11775:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11790:4:13","type":""}],"src":"11624:419:13"},{"body":{"nodeType":"YulBlock","src":"12155:142:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12177:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"12185:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12173:3:13"},"nodeType":"YulFunctionCall","src":"12173:14:13"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"12189:34:13","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12166:6:13"},"nodeType":"YulFunctionCall","src":"12166:58:13"},"nodeType":"YulExpressionStatement","src":"12166:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12245:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"12253:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12241:3:13"},"nodeType":"YulFunctionCall","src":"12241:15:13"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"12258:31:13","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12234:6:13"},"nodeType":"YulFunctionCall","src":"12234:56:13"},"nodeType":"YulExpressionStatement","src":"12234:56:13"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12147:6:13","type":""}],"src":"12049:248:13"},{"body":{"nodeType":"YulBlock","src":"12449:220:13","statements":[{"nodeType":"YulAssignment","src":"12459:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12525:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"12530:2:13","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12466:58:13"},"nodeType":"YulFunctionCall","src":"12466:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12459:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12631:3:13"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulIdentifier","src":"12542:88:13"},"nodeType":"YulFunctionCall","src":"12542:93:13"},"nodeType":"YulExpressionStatement","src":"12542:93:13"},{"nodeType":"YulAssignment","src":"12644:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12655:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"12660:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12651:3:13"},"nodeType":"YulFunctionCall","src":"12651:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12644:3:13"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12437:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12445:3:13","type":""}],"src":"12303:366:13"},{"body":{"nodeType":"YulBlock","src":"12846:248:13","statements":[{"nodeType":"YulAssignment","src":"12856:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12868:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"12879:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12864:3:13"},"nodeType":"YulFunctionCall","src":"12864:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12856:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12903:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"12914:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12899:3:13"},"nodeType":"YulFunctionCall","src":"12899:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12922:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"12928:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12918:3:13"},"nodeType":"YulFunctionCall","src":"12918:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12892:6:13"},"nodeType":"YulFunctionCall","src":"12892:47:13"},"nodeType":"YulExpressionStatement","src":"12892:47:13"},{"nodeType":"YulAssignment","src":"12948:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13082:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12956:124:13"},"nodeType":"YulFunctionCall","src":"12956:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12948:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12826:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12841:4:13","type":""}],"src":"12675:419:13"},{"body":{"nodeType":"YulBlock","src":"13206:126:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13228:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"13236:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13224:3:13"},"nodeType":"YulFunctionCall","src":"13224:14:13"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"13240:34:13","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13217:6:13"},"nodeType":"YulFunctionCall","src":"13217:58:13"},"nodeType":"YulExpressionStatement","src":"13217:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13296:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"13304:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13292:3:13"},"nodeType":"YulFunctionCall","src":"13292:15:13"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"13309:15:13","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13285:6:13"},"nodeType":"YulFunctionCall","src":"13285:40:13"},"nodeType":"YulExpressionStatement","src":"13285:40:13"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13198:6:13","type":""}],"src":"13100:232:13"},{"body":{"nodeType":"YulBlock","src":"13484:220:13","statements":[{"nodeType":"YulAssignment","src":"13494:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13560:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"13565:2:13","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13501:58:13"},"nodeType":"YulFunctionCall","src":"13501:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13494:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13666:3:13"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulIdentifier","src":"13577:88:13"},"nodeType":"YulFunctionCall","src":"13577:93:13"},"nodeType":"YulExpressionStatement","src":"13577:93:13"},{"nodeType":"YulAssignment","src":"13679:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13690:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"13695:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13686:3:13"},"nodeType":"YulFunctionCall","src":"13686:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13679:3:13"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13472:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13480:3:13","type":""}],"src":"13338:366:13"},{"body":{"nodeType":"YulBlock","src":"13881:248:13","statements":[{"nodeType":"YulAssignment","src":"13891:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13903:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"13914:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13899:3:13"},"nodeType":"YulFunctionCall","src":"13899:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13891:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13938:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"13949:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13934:3:13"},"nodeType":"YulFunctionCall","src":"13934:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13957:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"13963:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13953:3:13"},"nodeType":"YulFunctionCall","src":"13953:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13927:6:13"},"nodeType":"YulFunctionCall","src":"13927:47:13"},"nodeType":"YulExpressionStatement","src":"13927:47:13"},{"nodeType":"YulAssignment","src":"13983:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14117:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13991:124:13"},"nodeType":"YulFunctionCall","src":"13991:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13983:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13861:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13876:4:13","type":""}],"src":"13710:419:13"},{"body":{"nodeType":"YulBlock","src":"14241:68:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14263:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"14271:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14259:3:13"},"nodeType":"YulFunctionCall","src":"14259:14:13"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"14275:26:13","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14252:6:13"},"nodeType":"YulFunctionCall","src":"14252:50:13"},"nodeType":"YulExpressionStatement","src":"14252:50:13"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14233:6:13","type":""}],"src":"14135:174:13"},{"body":{"nodeType":"YulBlock","src":"14461:220:13","statements":[{"nodeType":"YulAssignment","src":"14471:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14537:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"14542:2:13","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14478:58:13"},"nodeType":"YulFunctionCall","src":"14478:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14471:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14643:3:13"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"14554:88:13"},"nodeType":"YulFunctionCall","src":"14554:93:13"},"nodeType":"YulExpressionStatement","src":"14554:93:13"},{"nodeType":"YulAssignment","src":"14656:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14667:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"14672:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14663:3:13"},"nodeType":"YulFunctionCall","src":"14663:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14656:3:13"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14449:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14457:3:13","type":""}],"src":"14315:366:13"},{"body":{"nodeType":"YulBlock","src":"14858:248:13","statements":[{"nodeType":"YulAssignment","src":"14868:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14880:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"14891:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14876:3:13"},"nodeType":"YulFunctionCall","src":"14876:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14868:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14915:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"14926:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14911:3:13"},"nodeType":"YulFunctionCall","src":"14911:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14934:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"14940:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14930:3:13"},"nodeType":"YulFunctionCall","src":"14930:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14904:6:13"},"nodeType":"YulFunctionCall","src":"14904:47:13"},"nodeType":"YulExpressionStatement","src":"14904:47:13"},{"nodeType":"YulAssignment","src":"14960:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15094:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14968:124:13"},"nodeType":"YulFunctionCall","src":"14968:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14960:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14838:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14853:4:13","type":""}],"src":"14687:419:13"},{"body":{"nodeType":"YulBlock","src":"15218:122:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15240:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"15248:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15236:3:13"},"nodeType":"YulFunctionCall","src":"15236:14:13"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"15252:34:13","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15229:6:13"},"nodeType":"YulFunctionCall","src":"15229:58:13"},"nodeType":"YulExpressionStatement","src":"15229:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15308:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"15316:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15304:3:13"},"nodeType":"YulFunctionCall","src":"15304:15:13"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"15321:11:13","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15297:6:13"},"nodeType":"YulFunctionCall","src":"15297:36:13"},"nodeType":"YulExpressionStatement","src":"15297:36:13"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15210:6:13","type":""}],"src":"15112:228:13"},{"body":{"nodeType":"YulBlock","src":"15492:220:13","statements":[{"nodeType":"YulAssignment","src":"15502:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15568:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"15573:2:13","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15509:58:13"},"nodeType":"YulFunctionCall","src":"15509:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15502:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15674:3:13"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"15585:88:13"},"nodeType":"YulFunctionCall","src":"15585:93:13"},"nodeType":"YulExpressionStatement","src":"15585:93:13"},{"nodeType":"YulAssignment","src":"15687:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15698:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"15703:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15694:3:13"},"nodeType":"YulFunctionCall","src":"15694:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15687:3:13"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15480:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15488:3:13","type":""}],"src":"15346:366:13"},{"body":{"nodeType":"YulBlock","src":"15889:248:13","statements":[{"nodeType":"YulAssignment","src":"15899:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15911:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"15922:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15907:3:13"},"nodeType":"YulFunctionCall","src":"15907:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15899:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15946:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"15957:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15942:3:13"},"nodeType":"YulFunctionCall","src":"15942:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15965:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"15971:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15961:3:13"},"nodeType":"YulFunctionCall","src":"15961:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15935:6:13"},"nodeType":"YulFunctionCall","src":"15935:47:13"},"nodeType":"YulExpressionStatement","src":"15935:47:13"},{"nodeType":"YulAssignment","src":"15991:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16125:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15999:124:13"},"nodeType":"YulFunctionCall","src":"15999:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15991:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15869:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15884:4:13","type":""}],"src":"15718:419:13"},{"body":{"nodeType":"YulBlock","src":"16257:34:13","statements":[{"nodeType":"YulAssignment","src":"16267:18:13","value":{"name":"pos","nodeType":"YulIdentifier","src":"16282:3:13"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"16267:11:13"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16229:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"16234:6:13","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"16245:11:13","type":""}],"src":"16143:148:13"},{"body":{"nodeType":"YulBlock","src":"16407:267:13","statements":[{"nodeType":"YulVariableDeclaration","src":"16417:53:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16464:5:13"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"16431:32:13"},"nodeType":"YulFunctionCall","src":"16431:39:13"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"16421:6:13","type":""}]},{"nodeType":"YulAssignment","src":"16479:96:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16563:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"16568:6:13"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16486:76:13"},"nodeType":"YulFunctionCall","src":"16486:89:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16479:3:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16610:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"16617:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16606:3:13"},"nodeType":"YulFunctionCall","src":"16606:16:13"},{"name":"pos","nodeType":"YulIdentifier","src":"16624:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"16629:6:13"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"16584:21:13"},"nodeType":"YulFunctionCall","src":"16584:52:13"},"nodeType":"YulExpressionStatement","src":"16584:52:13"},{"nodeType":"YulAssignment","src":"16645:23:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16656:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"16661:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16652:3:13"},"nodeType":"YulFunctionCall","src":"16652:16:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16645:3:13"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16388:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16395:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16403:3:13","type":""}],"src":"16297:377:13"},{"body":{"nodeType":"YulBlock","src":"16864:251:13","statements":[{"nodeType":"YulAssignment","src":"16875:102:13","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16964:6:13"},{"name":"pos","nodeType":"YulIdentifier","src":"16973:3:13"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16882:81:13"},"nodeType":"YulFunctionCall","src":"16882:95:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16875:3:13"}]},{"nodeType":"YulAssignment","src":"16987:102:13","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17076:6:13"},{"name":"pos","nodeType":"YulIdentifier","src":"17085:3:13"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16994:81:13"},"nodeType":"YulFunctionCall","src":"16994:95:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16987:3:13"}]},{"nodeType":"YulAssignment","src":"17099:10:13","value":{"name":"pos","nodeType":"YulIdentifier","src":"17106:3:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17099:3:13"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16835:3:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16841:6:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16849:6:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16860:3:13","type":""}],"src":"16680:435:13"},{"body":{"nodeType":"YulBlock","src":"17227:118:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17249:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"17257:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17245:3:13"},"nodeType":"YulFunctionCall","src":"17245:14:13"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"17261:34:13","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17238:6:13"},"nodeType":"YulFunctionCall","src":"17238:58:13"},"nodeType":"YulExpressionStatement","src":"17238:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17317:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"17325:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17313:3:13"},"nodeType":"YulFunctionCall","src":"17313:15:13"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"17330:7:13","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17306:6:13"},"nodeType":"YulFunctionCall","src":"17306:32:13"},"nodeType":"YulExpressionStatement","src":"17306:32:13"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17219:6:13","type":""}],"src":"17121:224:13"},{"body":{"nodeType":"YulBlock","src":"17497:220:13","statements":[{"nodeType":"YulAssignment","src":"17507:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17573:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"17578:2:13","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17514:58:13"},"nodeType":"YulFunctionCall","src":"17514:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17507:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17679:3:13"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"17590:88:13"},"nodeType":"YulFunctionCall","src":"17590:93:13"},"nodeType":"YulExpressionStatement","src":"17590:93:13"},{"nodeType":"YulAssignment","src":"17692:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17703:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"17708:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17699:3:13"},"nodeType":"YulFunctionCall","src":"17699:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17692:3:13"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17485:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17493:3:13","type":""}],"src":"17351:366:13"},{"body":{"nodeType":"YulBlock","src":"17894:248:13","statements":[{"nodeType":"YulAssignment","src":"17904:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17916:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"17927:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17912:3:13"},"nodeType":"YulFunctionCall","src":"17912:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17904:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17951:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"17962:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17947:3:13"},"nodeType":"YulFunctionCall","src":"17947:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17970:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"17976:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17966:3:13"},"nodeType":"YulFunctionCall","src":"17966:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17940:6:13"},"nodeType":"YulFunctionCall","src":"17940:47:13"},"nodeType":"YulExpressionStatement","src":"17940:47:13"},{"nodeType":"YulAssignment","src":"17996:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18130:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18004:124:13"},"nodeType":"YulFunctionCall","src":"18004:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17996:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17874:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17889:4:13","type":""}],"src":"17723:419:13"},{"body":{"nodeType":"YulBlock","src":"18254:117:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18276:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"18284:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18272:3:13"},"nodeType":"YulFunctionCall","src":"18272:14:13"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"18288:34:13","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18265:6:13"},"nodeType":"YulFunctionCall","src":"18265:58:13"},"nodeType":"YulExpressionStatement","src":"18265:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18344:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"18352:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18340:3:13"},"nodeType":"YulFunctionCall","src":"18340:15:13"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"18357:6:13","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18333:6:13"},"nodeType":"YulFunctionCall","src":"18333:31:13"},"nodeType":"YulExpressionStatement","src":"18333:31:13"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18246:6:13","type":""}],"src":"18148:223:13"},{"body":{"nodeType":"YulBlock","src":"18523:220:13","statements":[{"nodeType":"YulAssignment","src":"18533:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18599:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"18604:2:13","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18540:58:13"},"nodeType":"YulFunctionCall","src":"18540:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18533:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18705:3:13"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"18616:88:13"},"nodeType":"YulFunctionCall","src":"18616:93:13"},"nodeType":"YulExpressionStatement","src":"18616:93:13"},{"nodeType":"YulAssignment","src":"18718:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18729:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"18734:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18725:3:13"},"nodeType":"YulFunctionCall","src":"18725:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18718:3:13"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18511:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18519:3:13","type":""}],"src":"18377:366:13"},{"body":{"nodeType":"YulBlock","src":"18920:248:13","statements":[{"nodeType":"YulAssignment","src":"18930:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18942:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"18953:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18938:3:13"},"nodeType":"YulFunctionCall","src":"18938:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18930:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18977:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"18988:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18973:3:13"},"nodeType":"YulFunctionCall","src":"18973:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18996:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"19002:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18992:3:13"},"nodeType":"YulFunctionCall","src":"18992:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18966:6:13"},"nodeType":"YulFunctionCall","src":"18966:47:13"},"nodeType":"YulExpressionStatement","src":"18966:47:13"},{"nodeType":"YulAssignment","src":"19022:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19156:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19030:124:13"},"nodeType":"YulFunctionCall","src":"19030:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19022:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18900:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18915:4:13","type":""}],"src":"18749:419:13"},{"body":{"nodeType":"YulBlock","src":"19280:69:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19302:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"19310:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19298:3:13"},"nodeType":"YulFunctionCall","src":"19298:14:13"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"19314:27:13","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19291:6:13"},"nodeType":"YulFunctionCall","src":"19291:51:13"},"nodeType":"YulExpressionStatement","src":"19291:51:13"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19272:6:13","type":""}],"src":"19174:175:13"},{"body":{"nodeType":"YulBlock","src":"19501:220:13","statements":[{"nodeType":"YulAssignment","src":"19511:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19577:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"19582:2:13","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19518:58:13"},"nodeType":"YulFunctionCall","src":"19518:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19511:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19683:3:13"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"19594:88:13"},"nodeType":"YulFunctionCall","src":"19594:93:13"},"nodeType":"YulExpressionStatement","src":"19594:93:13"},{"nodeType":"YulAssignment","src":"19696:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19707:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"19712:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19703:3:13"},"nodeType":"YulFunctionCall","src":"19703:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19696:3:13"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19489:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19497:3:13","type":""}],"src":"19355:366:13"},{"body":{"nodeType":"YulBlock","src":"19898:248:13","statements":[{"nodeType":"YulAssignment","src":"19908:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19920:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"19931:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19916:3:13"},"nodeType":"YulFunctionCall","src":"19916:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19908:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19955:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"19966:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19951:3:13"},"nodeType":"YulFunctionCall","src":"19951:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19974:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"19980:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19970:3:13"},"nodeType":"YulFunctionCall","src":"19970:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19944:6:13"},"nodeType":"YulFunctionCall","src":"19944:47:13"},"nodeType":"YulExpressionStatement","src":"19944:47:13"},{"nodeType":"YulAssignment","src":"20000:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20134:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20008:124:13"},"nodeType":"YulFunctionCall","src":"20008:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20000:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19878:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19893:4:13","type":""}],"src":"19727:419:13"},{"body":{"nodeType":"YulBlock","src":"20258:131:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20280:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"20288:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20276:3:13"},"nodeType":"YulFunctionCall","src":"20276:14:13"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"20292:34:13","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20269:6:13"},"nodeType":"YulFunctionCall","src":"20269:58:13"},"nodeType":"YulExpressionStatement","src":"20269:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20348:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"20356:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20344:3:13"},"nodeType":"YulFunctionCall","src":"20344:15:13"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"20361:20:13","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20337:6:13"},"nodeType":"YulFunctionCall","src":"20337:45:13"},"nodeType":"YulExpressionStatement","src":"20337:45:13"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20250:6:13","type":""}],"src":"20152:237:13"},{"body":{"nodeType":"YulBlock","src":"20541:220:13","statements":[{"nodeType":"YulAssignment","src":"20551:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20617:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"20622:2:13","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20558:58:13"},"nodeType":"YulFunctionCall","src":"20558:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20551:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20723:3:13"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"20634:88:13"},"nodeType":"YulFunctionCall","src":"20634:93:13"},"nodeType":"YulExpressionStatement","src":"20634:93:13"},{"nodeType":"YulAssignment","src":"20736:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20747:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"20752:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20743:3:13"},"nodeType":"YulFunctionCall","src":"20743:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20736:3:13"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20529:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20537:3:13","type":""}],"src":"20395:366:13"},{"body":{"nodeType":"YulBlock","src":"20938:248:13","statements":[{"nodeType":"YulAssignment","src":"20948:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20960:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"20971:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20956:3:13"},"nodeType":"YulFunctionCall","src":"20956:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20948:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20995:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"21006:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20991:3:13"},"nodeType":"YulFunctionCall","src":"20991:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21014:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"21020:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21010:3:13"},"nodeType":"YulFunctionCall","src":"21010:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20984:6:13"},"nodeType":"YulFunctionCall","src":"20984:47:13"},"nodeType":"YulExpressionStatement","src":"20984:47:13"},{"nodeType":"YulAssignment","src":"21040:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21174:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21048:124:13"},"nodeType":"YulFunctionCall","src":"21048:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21040:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20918:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20933:4:13","type":""}],"src":"20767:419:13"},{"body":{"nodeType":"YulBlock","src":"21220:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21237:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21240:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21230:6:13"},"nodeType":"YulFunctionCall","src":"21230:88:13"},"nodeType":"YulExpressionStatement","src":"21230:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21334:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21337:4:13","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21327:6:13"},"nodeType":"YulFunctionCall","src":"21327:15:13"},"nodeType":"YulExpressionStatement","src":"21327:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21358:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21361:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21351:6:13"},"nodeType":"YulFunctionCall","src":"21351:15:13"},"nodeType":"YulExpressionStatement","src":"21351:15:13"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"21192:180:13"},{"body":{"nodeType":"YulBlock","src":"21406:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21423:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21426:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21416:6:13"},"nodeType":"YulFunctionCall","src":"21416:88:13"},"nodeType":"YulExpressionStatement","src":"21416:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21520:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21523:4:13","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21513:6:13"},"nodeType":"YulFunctionCall","src":"21513:15:13"},"nodeType":"YulExpressionStatement","src":"21513:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21544:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21547:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21537:6:13"},"nodeType":"YulFunctionCall","src":"21537:15:13"},"nodeType":"YulExpressionStatement","src":"21537:15:13"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"21378:180:13"},{"body":{"nodeType":"YulBlock","src":"21609:146:13","statements":[{"nodeType":"YulAssignment","src":"21619:25:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21642:1:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21624:17:13"},"nodeType":"YulFunctionCall","src":"21624:20:13"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"21619:1:13"}]},{"nodeType":"YulAssignment","src":"21653:25:13","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"21676:1:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21658:17:13"},"nodeType":"YulFunctionCall","src":"21658:20:13"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"21653:1:13"}]},{"body":{"nodeType":"YulBlock","src":"21700:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"21702:16:13"},"nodeType":"YulFunctionCall","src":"21702:18:13"},"nodeType":"YulExpressionStatement","src":"21702:18:13"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21694:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"21697:1:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"21691:2:13"},"nodeType":"YulFunctionCall","src":"21691:8:13"},"nodeType":"YulIf","src":"21688:34:13"},{"nodeType":"YulAssignment","src":"21732:17:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21744:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"21747:1:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21740:3:13"},"nodeType":"YulFunctionCall","src":"21740:9:13"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"21732:4:13"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"21595:1:13","type":""},{"name":"y","nodeType":"YulTypedName","src":"21598:1:13","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"21604:4:13","type":""}],"src":"21564:191:13"},{"body":{"nodeType":"YulBlock","src":"21805:261:13","statements":[{"nodeType":"YulAssignment","src":"21815:25:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21838:1:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21820:17:13"},"nodeType":"YulFunctionCall","src":"21820:20:13"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"21815:1:13"}]},{"nodeType":"YulAssignment","src":"21849:25:13","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"21872:1:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21854:17:13"},"nodeType":"YulFunctionCall","src":"21854:20:13"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"21849:1:13"}]},{"body":{"nodeType":"YulBlock","src":"22012:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"22014:16:13"},"nodeType":"YulFunctionCall","src":"22014:18:13"},"nodeType":"YulExpressionStatement","src":"22014:18:13"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21933:1:13"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21940:66:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"22008:1:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21936:3:13"},"nodeType":"YulFunctionCall","src":"21936:74:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21930:2:13"},"nodeType":"YulFunctionCall","src":"21930:81:13"},"nodeType":"YulIf","src":"21927:107:13"},{"nodeType":"YulAssignment","src":"22044:16:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22055:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"22058:1:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22051:3:13"},"nodeType":"YulFunctionCall","src":"22051:9:13"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"22044:3:13"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"21792:1:13","type":""},{"name":"y","nodeType":"YulTypedName","src":"21795:1:13","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"21801:3:13","type":""}],"src":"21761:305:13"},{"body":{"nodeType":"YulBlock","src":"22130:40:13","statements":[{"nodeType":"YulAssignment","src":"22141:22:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22157:5:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22151:5:13"},"nodeType":"YulFunctionCall","src":"22151:12:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"22141:6:13"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22113:5:13","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"22123:6:13","type":""}],"src":"22072:98:13"},{"body":{"nodeType":"YulBlock","src":"22271:73:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22288:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"22293:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22281:6:13"},"nodeType":"YulFunctionCall","src":"22281:19:13"},"nodeType":"YulExpressionStatement","src":"22281:19:13"},{"nodeType":"YulAssignment","src":"22309:29:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22328:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"22333:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22324:3:13"},"nodeType":"YulFunctionCall","src":"22324:14:13"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"22309:11:13"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22243:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"22248:6:13","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"22259:11:13","type":""}],"src":"22176:168:13"},{"body":{"nodeType":"YulBlock","src":"22440:270:13","statements":[{"nodeType":"YulVariableDeclaration","src":"22450:52:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22496:5:13"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"22464:31:13"},"nodeType":"YulFunctionCall","src":"22464:38:13"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"22454:6:13","type":""}]},{"nodeType":"YulAssignment","src":"22511:77:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22576:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"22581:6:13"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22518:57:13"},"nodeType":"YulFunctionCall","src":"22518:70:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22511:3:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22623:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"22630:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22619:3:13"},"nodeType":"YulFunctionCall","src":"22619:16:13"},{"name":"pos","nodeType":"YulIdentifier","src":"22637:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"22642:6:13"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"22597:21:13"},"nodeType":"YulFunctionCall","src":"22597:52:13"},"nodeType":"YulExpressionStatement","src":"22597:52:13"},{"nodeType":"YulAssignment","src":"22658:46:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22669:3:13"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22696:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"22674:21:13"},"nodeType":"YulFunctionCall","src":"22674:29:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22665:3:13"},"nodeType":"YulFunctionCall","src":"22665:39:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22658:3:13"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22421:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"22428:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22436:3:13","type":""}],"src":"22350:360:13"},{"body":{"nodeType":"YulBlock","src":"22916:440:13","statements":[{"nodeType":"YulAssignment","src":"22926:27:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22938:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"22949:3:13","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22934:3:13"},"nodeType":"YulFunctionCall","src":"22934:19:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22926:4:13"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23007:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23020:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"23031:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23016:3:13"},"nodeType":"YulFunctionCall","src":"23016:17:13"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"22963:43:13"},"nodeType":"YulFunctionCall","src":"22963:71:13"},"nodeType":"YulExpressionStatement","src":"22963:71:13"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23088:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23101:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"23112:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23097:3:13"},"nodeType":"YulFunctionCall","src":"23097:18:13"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"23044:43:13"},"nodeType":"YulFunctionCall","src":"23044:72:13"},"nodeType":"YulExpressionStatement","src":"23044:72:13"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"23170:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23183:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"23194:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23179:3:13"},"nodeType":"YulFunctionCall","src":"23179:18:13"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"23126:43:13"},"nodeType":"YulFunctionCall","src":"23126:72:13"},"nodeType":"YulExpressionStatement","src":"23126:72:13"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23219:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"23230:2:13","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23215:3:13"},"nodeType":"YulFunctionCall","src":"23215:18:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23239:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"23245:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23235:3:13"},"nodeType":"YulFunctionCall","src":"23235:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23208:6:13"},"nodeType":"YulFunctionCall","src":"23208:48:13"},"nodeType":"YulExpressionStatement","src":"23208:48:13"},{"nodeType":"YulAssignment","src":"23265:84:13","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"23335:6:13"},{"name":"tail","nodeType":"YulIdentifier","src":"23344:4:13"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23273:61:13"},"nodeType":"YulFunctionCall","src":"23273:76:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23265:4:13"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22864:9:13","type":""},{"name":"value3","nodeType":"YulTypedName","src":"22876:6:13","type":""},{"name":"value2","nodeType":"YulTypedName","src":"22884:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22892:6:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22900:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22911:4:13","type":""}],"src":"22716:640:13"},{"body":{"nodeType":"YulBlock","src":"23424:79:13","statements":[{"nodeType":"YulAssignment","src":"23434:22:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"23449:6:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23443:5:13"},"nodeType":"YulFunctionCall","src":"23443:13:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"23434:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23491:5:13"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"23465:25:13"},"nodeType":"YulFunctionCall","src":"23465:32:13"},"nodeType":"YulExpressionStatement","src":"23465:32:13"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"23402:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"23410:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"23418:5:13","type":""}],"src":"23362:141:13"},{"body":{"nodeType":"YulBlock","src":"23585:273:13","statements":[{"body":{"nodeType":"YulBlock","src":"23631:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"23633:77:13"},"nodeType":"YulFunctionCall","src":"23633:79:13"},"nodeType":"YulExpressionStatement","src":"23633:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"23606:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"23615:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23602:3:13"},"nodeType":"YulFunctionCall","src":"23602:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"23627:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"23598:3:13"},"nodeType":"YulFunctionCall","src":"23598:32:13"},"nodeType":"YulIf","src":"23595:119:13"},{"nodeType":"YulBlock","src":"23724:127:13","statements":[{"nodeType":"YulVariableDeclaration","src":"23739:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"23753:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"23743:6:13","type":""}]},{"nodeType":"YulAssignment","src":"23768:73:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23813:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"23824:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23809:3:13"},"nodeType":"YulFunctionCall","src":"23809:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"23833:7:13"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"23778:30:13"},"nodeType":"YulFunctionCall","src":"23778:63:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"23768:6:13"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23555:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"23566:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"23578:6:13","type":""}],"src":"23509:349:13"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":13,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e99190611633565b6102bc565b6040516100fb919061167b565b60405180910390f35b61010c61039e565b604051610119919061172f565b60405180910390f35b61013c60048036038101906101379190611787565b610430565b60405161014991906117f5565b60405180910390f35b61016c6004803603810190610167919061183c565b610476565b005b6101886004803603810190610183919061187c565b61058e565b005b6101a4600480360381019061019f919061187c565b6105ee565b005b6101c060048036038101906101bb9190611787565b61060e565b6040516101cd91906117f5565b60405180910390f35b6101f060048036038101906101eb91906118cf565b610695565b6040516101fd919061190b565b60405180910390f35b61020e61074d565b60405161021b919061172f565b60405180910390f35b61023e60048036038101906102399190611952565b6107df565b005b61025a60048036038101906102559190611ac7565b6107f5565b005b61027660048036038101906102719190611787565b610857565b604051610283919061172f565b60405180910390f35b6102a660048036038101906102a19190611b4a565b6108bf565b6040516102b3919061167b565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610953565b5b9050919050565b6060600080546103ad90611bb9565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611bb9565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109bd565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e990611c5d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610511610a08565b73ffffffffffffffffffffffffffffffffffffffff161480610540575061053f8161053a610a08565b6108bf565b5b61057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057690611cef565b60405180910390fd5b6105898383610a10565b505050565b61059f610599610a08565b82610ac9565b6105de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d590611d81565b60405180910390fd5b6105e9838383610b5e565b505050565b610609838383604051806020016040528060008152506107f5565b505050565b60008061061a83610e58565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611ded565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fd90611e7f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075c90611bb9565b80601f016020809104026020016040519081016040528092919081815260200182805461078890611bb9565b80156107d55780601f106107aa576101008083540402835291602001916107d5565b820191906000526020600020905b8154815290600101906020018083116107b857829003601f168201915b5050505050905090565b6107f16107ea610a08565b8383610e95565b5050565b610806610800610a08565b83610ac9565b610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c90611d81565b60405180910390fd5b61085184848484611002565b50505050565b6060610862826109bd565b600061086c61105e565b9050600081511161088c57604051806020016040528060008152506108b7565b8061089684611075565b6040516020016108a7929190611edb565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c68161114d565b610a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fc90611ded565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a838361060e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad58361060e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b175750610b1681856108bf565b5b80610b5557508373ffffffffffffffffffffffffffffffffffffffff16610b3d84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7e8261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611f71565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90612003565b60405180910390fd5b610c51838383600161118e565b8273ffffffffffffffffffffffffffffffffffffffff16610c718261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90611f71565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e5383838360016112b4565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efb9061206f565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff5919061167b565b60405180910390a3505050565b61100d848484610b5e565b611019848484846112ba565b611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90612101565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161108484611451565b01905060008167ffffffffffffffff8111156110a3576110a261199c565b5b6040519080825280601f01601f1916602001820160405280156110d55781602001600182028036833780820191505090505b509050600082602001820190505b600115611142578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161112c5761112b612121565b5b049450600085141561113d57611142565b6110e3565b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661116f83610e58565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60018111156112ae57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146112225780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461121a919061217f565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146112ad5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112a591906121b3565b925050819055505b5b50505050565b50505050565b60006112db8473ffffffffffffffffffffffffffffffffffffffff166115a4565b15611444578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611304610a08565b8786866040518563ffffffff1660e01b8152600401611326949392919061225e565b602060405180830381600087803b15801561134057600080fd5b505af192505050801561137157506040513d601f19601f8201168201806040525081019061136e91906122bf565b60015b6113f4573d80600081146113a1576040519150601f19603f3d011682016040523d82523d6000602084013e6113a6565b606091505b506000815114156113ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e390612101565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611449565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106114af577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816114a5576114a4612121565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106114ec576d04ee2d6d415b85acef810000000083816114e2576114e1612121565b5b0492506020810190505b662386f26fc10000831061151b57662386f26fc10000838161151157611510612121565b5b0492506010810190505b6305f5e1008310611544576305f5e100838161153a57611539612121565b5b0492506008810190505b612710831061156957612710838161155f5761155e612121565b5b0492506004810190505b6064831061158c576064838161158257611581612121565b5b0492506002810190505b600a831061159b576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611610816115db565b811461161b57600080fd5b50565b60008135905061162d81611607565b92915050565b600060208284031215611649576116486115d1565b5b60006116578482850161161e565b91505092915050565b60008115159050919050565b61167581611660565b82525050565b6000602082019050611690600083018461166c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156116d05780820151818401526020810190506116b5565b838111156116df576000848401525b50505050565b6000601f19601f8301169050919050565b600061170182611696565b61170b81856116a1565b935061171b8185602086016116b2565b611724816116e5565b840191505092915050565b6000602082019050818103600083015261174981846116f6565b905092915050565b6000819050919050565b61176481611751565b811461176f57600080fd5b50565b6000813590506117818161175b565b92915050565b60006020828403121561179d5761179c6115d1565b5b60006117ab84828501611772565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117df826117b4565b9050919050565b6117ef816117d4565b82525050565b600060208201905061180a60008301846117e6565b92915050565b611819816117d4565b811461182457600080fd5b50565b60008135905061183681611810565b92915050565b60008060408385031215611853576118526115d1565b5b600061186185828601611827565b925050602061187285828601611772565b9150509250929050565b600080600060608486031215611895576118946115d1565b5b60006118a386828701611827565b93505060206118b486828701611827565b92505060406118c586828701611772565b9150509250925092565b6000602082840312156118e5576118e46115d1565b5b60006118f384828501611827565b91505092915050565b61190581611751565b82525050565b600060208201905061192060008301846118fc565b92915050565b61192f81611660565b811461193a57600080fd5b50565b60008135905061194c81611926565b92915050565b60008060408385031215611969576119686115d1565b5b600061197785828601611827565b92505060206119888582860161193d565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119d4826116e5565b810181811067ffffffffffffffff821117156119f3576119f261199c565b5b80604052505050565b6000611a066115c7565b9050611a1282826119cb565b919050565b600067ffffffffffffffff821115611a3257611a3161199c565b5b611a3b826116e5565b9050602081019050919050565b82818337600083830152505050565b6000611a6a611a6584611a17565b6119fc565b905082815260208101848484011115611a8657611a85611997565b5b611a91848285611a48565b509392505050565b600082601f830112611aae57611aad611992565b5b8135611abe848260208601611a57565b91505092915050565b60008060008060808587031215611ae157611ae06115d1565b5b6000611aef87828801611827565b9450506020611b0087828801611827565b9350506040611b1187828801611772565b925050606085013567ffffffffffffffff811115611b3257611b316115d6565b5b611b3e87828801611a99565b91505092959194509250565b60008060408385031215611b6157611b606115d1565b5b6000611b6f85828601611827565b9250506020611b8085828601611827565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611bd157607f821691505b60208210811415611be557611be4611b8a565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c476021836116a1565b9150611c5282611beb565b604082019050919050565b60006020820190508181036000830152611c7681611c3a565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000611cd9603d836116a1565b9150611ce482611c7d565b604082019050919050565b60006020820190508181036000830152611d0881611ccc565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000611d6b602d836116a1565b9150611d7682611d0f565b604082019050919050565b60006020820190508181036000830152611d9a81611d5e565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000611dd76018836116a1565b9150611de282611da1565b602082019050919050565b60006020820190508181036000830152611e0681611dca565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000611e696029836116a1565b9150611e7482611e0d565b604082019050919050565b60006020820190508181036000830152611e9881611e5c565b9050919050565b600081905092915050565b6000611eb582611696565b611ebf8185611e9f565b9350611ecf8185602086016116b2565b80840191505092915050565b6000611ee78285611eaa565b9150611ef38284611eaa565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000611f5b6025836116a1565b9150611f6682611eff565b604082019050919050565b60006020820190508181036000830152611f8a81611f4e565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611fed6024836116a1565b9150611ff882611f91565b604082019050919050565b6000602082019050818103600083015261201c81611fe0565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006120596019836116a1565b915061206482612023565b602082019050919050565b600060208201905081810360008301526120888161204c565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006120eb6032836116a1565b91506120f68261208f565b604082019050919050565b6000602082019050818103600083015261211a816120de565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061218a82611751565b915061219583611751565b9250828210156121a8576121a7612150565b5b828203905092915050565b60006121be82611751565b91506121c983611751565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156121fe576121fd612150565b5b828201905092915050565b600081519050919050565b600082825260208201905092915050565b600061223082612209565b61223a8185612214565b935061224a8185602086016116b2565b612253816116e5565b840191505092915050565b600060808201905061227360008301876117e6565b61228060208301866117e6565b61228d60408301856118fc565b818103606083015261229f8184612225565b905095945050505050565b6000815190506122b981611607565b92915050565b6000602082840312156122d5576122d46115d1565b5b60006122e3848285016122aa565b9150509291505056fea2646970667358221220f01ff1e70c2de916124789824ce038db3eb48638984401926a5e103cffae006f64736f6c63430008080033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1633 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x167B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x172F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x183C JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x187C JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x187C JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x18CF JUMP JUMPDEST PUSH2 0x695 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x190B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x172F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x1952 JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x1AC7 JUMP JUMPDEST PUSH2 0x7F5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x857 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x172F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1B4A JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x167B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x953 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1BB9 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1BB9 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E9 SWAP1 PUSH2 0x1C5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x511 PUSH2 0xA08 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x540 JUMPI POP PUSH2 0x53F DUP2 PUSH2 0x53A PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST JUMPDEST PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x576 SWAP1 PUSH2 0x1CEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x589 DUP4 DUP4 PUSH2 0xA10 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59F PUSH2 0x599 PUSH2 0xA08 JUMP JUMPDEST DUP3 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D5 SWAP1 PUSH2 0x1D81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E9 DUP4 DUP4 DUP4 PUSH2 0xB5E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x609 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x61A DUP4 PUSH2 0xE58 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x68C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x683 SWAP1 PUSH2 0x1DED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x706 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FD SWAP1 PUSH2 0x1E7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x75C SWAP1 PUSH2 0x1BB9 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x788 SWAP1 PUSH2 0x1BB9 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7AA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x7EA PUSH2 0xA08 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE95 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x806 PUSH2 0x800 PUSH2 0xA08 JUMP JUMPDEST DUP4 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x845 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x83C SWAP1 PUSH2 0x1D81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x851 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1002 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x862 DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86C PUSH2 0x105E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x88C JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B7 JUMP JUMPDEST DUP1 PUSH2 0x896 DUP5 PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A7 SWAP3 SWAP2 SWAP1 PUSH2 0x1EDB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C6 DUP2 PUSH2 0x114D JUMP JUMPDEST PUSH2 0xA05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9FC SWAP1 PUSH2 0x1DED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA83 DUP4 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD5 DUP4 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB17 JUMPI POP PUSH2 0xB16 DUP2 DUP6 PUSH2 0x8BF JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB55 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3D DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7E DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCB SWAP1 PUSH2 0x1F71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC3B SWAP1 PUSH2 0x2003 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC51 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x118E JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC71 DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1F71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE53 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x12B4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEFB SWAP1 PUSH2 0x206F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF5 SWAP2 SWAP1 PUSH2 0x167B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x100D DUP5 DUP5 DUP5 PUSH2 0xB5E JUMP JUMPDEST PUSH2 0x1019 DUP5 DUP5 DUP5 DUP5 PUSH2 0x12BA JUMP JUMPDEST PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104F SWAP1 PUSH2 0x2101 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1084 DUP5 PUSH2 0x1451 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10A3 JUMPI PUSH2 0x10A2 PUSH2 0x199C JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1142 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x112C JUMPI PUSH2 0x112B PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x113D JUMPI PUSH2 0x1142 JUMP JUMPDEST PUSH2 0x10E3 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x116F DUP4 PUSH2 0xE58 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x12AE JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1222 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x121A SWAP2 SWAP1 PUSH2 0x217F JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12AD JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12A5 SWAP2 SWAP1 PUSH2 0x21B3 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12DB DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x15A4 JUMP JUMPDEST ISZERO PUSH2 0x1444 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1304 PUSH2 0xA08 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1326 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x225E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1371 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x136E SWAP2 SWAP1 PUSH2 0x22BF JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x13F4 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x13A1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x13A6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x13EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13E3 SWAP1 PUSH2 0x2101 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1449 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x14AF JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x14A5 JUMPI PUSH2 0x14A4 PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x14EC JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x14E2 JUMPI PUSH2 0x14E1 PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x151B JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1511 JUMPI PUSH2 0x1510 PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1544 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x153A JUMPI PUSH2 0x1539 PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1569 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x155F JUMPI PUSH2 0x155E PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x158C JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1582 JUMPI PUSH2 0x1581 PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x159B JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1610 DUP2 PUSH2 0x15DB JUMP JUMPDEST DUP2 EQ PUSH2 0x161B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x162D DUP2 PUSH2 0x1607 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1649 JUMPI PUSH2 0x1648 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1657 DUP5 DUP3 DUP6 ADD PUSH2 0x161E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1675 DUP2 PUSH2 0x1660 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1690 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x166C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16D0 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x16B5 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x16DF JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1701 DUP3 PUSH2 0x1696 JUMP JUMPDEST PUSH2 0x170B DUP2 DUP6 PUSH2 0x16A1 JUMP JUMPDEST SWAP4 POP PUSH2 0x171B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x16B2 JUMP JUMPDEST PUSH2 0x1724 DUP2 PUSH2 0x16E5 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1749 DUP2 DUP5 PUSH2 0x16F6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1764 DUP2 PUSH2 0x1751 JUMP JUMPDEST DUP2 EQ PUSH2 0x176F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1781 DUP2 PUSH2 0x175B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x179D JUMPI PUSH2 0x179C PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17AB DUP5 DUP3 DUP6 ADD PUSH2 0x1772 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17DF DUP3 PUSH2 0x17B4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17EF DUP2 PUSH2 0x17D4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x180A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17E6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1819 DUP2 PUSH2 0x17D4 JUMP JUMPDEST DUP2 EQ PUSH2 0x1824 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1836 DUP2 PUSH2 0x1810 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1853 JUMPI PUSH2 0x1852 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1861 DUP6 DUP3 DUP7 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1872 DUP6 DUP3 DUP7 ADD PUSH2 0x1772 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1895 JUMPI PUSH2 0x1894 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18A3 DUP7 DUP3 DUP8 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x18B4 DUP7 DUP3 DUP8 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x18C5 DUP7 DUP3 DUP8 ADD PUSH2 0x1772 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18E5 JUMPI PUSH2 0x18E4 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18F3 DUP5 DUP3 DUP6 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1905 DUP2 PUSH2 0x1751 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1920 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18FC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x192F DUP2 PUSH2 0x1660 JUMP JUMPDEST DUP2 EQ PUSH2 0x193A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x194C DUP2 PUSH2 0x1926 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1969 JUMPI PUSH2 0x1968 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1977 DUP6 DUP3 DUP7 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1988 DUP6 DUP3 DUP7 ADD PUSH2 0x193D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x19D4 DUP3 PUSH2 0x16E5 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x19F3 JUMPI PUSH2 0x19F2 PUSH2 0x199C JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A06 PUSH2 0x15C7 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A12 DUP3 DUP3 PUSH2 0x19CB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1A32 JUMPI PUSH2 0x1A31 PUSH2 0x199C JUMP JUMPDEST JUMPDEST PUSH2 0x1A3B DUP3 PUSH2 0x16E5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A6A PUSH2 0x1A65 DUP5 PUSH2 0x1A17 JUMP JUMPDEST PUSH2 0x19FC JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1A86 JUMPI PUSH2 0x1A85 PUSH2 0x1997 JUMP JUMPDEST JUMPDEST PUSH2 0x1A91 DUP5 DUP3 DUP6 PUSH2 0x1A48 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1AAE JUMPI PUSH2 0x1AAD PUSH2 0x1992 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1ABE DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1A57 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1AE1 JUMPI PUSH2 0x1AE0 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1AEF DUP8 DUP3 DUP9 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1B00 DUP8 DUP3 DUP9 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1B11 DUP8 DUP3 DUP9 ADD PUSH2 0x1772 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B32 JUMPI PUSH2 0x1B31 PUSH2 0x15D6 JUMP JUMPDEST JUMPDEST PUSH2 0x1B3E DUP8 DUP3 DUP9 ADD PUSH2 0x1A99 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B61 JUMPI PUSH2 0x1B60 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B6F DUP6 DUP3 DUP7 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1B80 DUP6 DUP3 DUP7 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1BD1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1BE5 JUMPI PUSH2 0x1BE4 PUSH2 0x1B8A JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C47 PUSH1 0x21 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C52 DUP3 PUSH2 0x1BEB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C76 DUP2 PUSH2 0x1C3A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CD9 PUSH1 0x3D DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CE4 DUP3 PUSH2 0x1C7D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D08 DUP2 PUSH2 0x1CCC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D6B PUSH1 0x2D DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D76 DUP3 PUSH2 0x1D0F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D9A DUP2 PUSH2 0x1D5E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DD7 PUSH1 0x18 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DE2 DUP3 PUSH2 0x1DA1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E06 DUP2 PUSH2 0x1DCA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E69 PUSH1 0x29 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E74 DUP3 PUSH2 0x1E0D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E98 DUP2 PUSH2 0x1E5C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EB5 DUP3 PUSH2 0x1696 JUMP JUMPDEST PUSH2 0x1EBF DUP2 DUP6 PUSH2 0x1E9F JUMP JUMPDEST SWAP4 POP PUSH2 0x1ECF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x16B2 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EE7 DUP3 DUP6 PUSH2 0x1EAA JUMP JUMPDEST SWAP2 POP PUSH2 0x1EF3 DUP3 DUP5 PUSH2 0x1EAA JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F5B PUSH1 0x25 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F66 DUP3 PUSH2 0x1EFF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F8A DUP2 PUSH2 0x1F4E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FED PUSH1 0x24 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FF8 DUP3 PUSH2 0x1F91 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x201C DUP2 PUSH2 0x1FE0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2059 PUSH1 0x19 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x2064 DUP3 PUSH2 0x2023 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2088 DUP2 PUSH2 0x204C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20EB PUSH1 0x32 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x20F6 DUP3 PUSH2 0x208F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x211A DUP2 PUSH2 0x20DE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x218A DUP3 PUSH2 0x1751 JUMP JUMPDEST SWAP2 POP PUSH2 0x2195 DUP4 PUSH2 0x1751 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x21A8 JUMPI PUSH2 0x21A7 PUSH2 0x2150 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21BE DUP3 PUSH2 0x1751 JUMP JUMPDEST SWAP2 POP PUSH2 0x21C9 DUP4 PUSH2 0x1751 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x21FE JUMPI PUSH2 0x21FD PUSH2 0x2150 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2230 DUP3 PUSH2 0x2209 JUMP JUMPDEST PUSH2 0x223A DUP2 DUP6 PUSH2 0x2214 JUMP JUMPDEST SWAP4 POP PUSH2 0x224A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x16B2 JUMP JUMPDEST PUSH2 0x2253 DUP2 PUSH2 0x16E5 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2273 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x17E6 JUMP JUMPDEST PUSH2 0x2280 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x17E6 JUMP JUMPDEST PUSH2 0x228D PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x18FC JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x229F DUP2 DUP5 PUSH2 0x2225 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x22B9 DUP2 PUSH2 0x1607 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22D5 JUMPI PUSH2 0x22D4 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x22E3 DUP5 DUP3 DUP6 ADD PUSH2 0x22AA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE 0x1F CALL 0xE7 0xC 0x2D 0xE9 AND SLT SELFBALANCE DUP10 DUP3 0x4C 0xE0 CODESIZE 0xDB RETURNDATACOPY 0xB4 DUP7 CODESIZE SWAP9 DIFFICULTY ADD SWAP3 PUSH11 0x5E103CFFAE006F64736F6C PUSH4 0x43000808 STOP CALLER ","sourceMap":"628:16327:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4612:326;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5004:179;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2190:219;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5249:314;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2801:276;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4388:162;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1570:300;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;4612:326::-;4801:41;4820:12;:10;:12::i;:::-;4834:7;4801:18;:41::i;:::-;4793:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;:::-;4612:326;;;:::o;5004:179::-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;2190:219::-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;1929:204::-;2001:7;2045:1;2028:19;;:5;:19;;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;4169:153::-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;4388:162::-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;829:155:9:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;13466:133:2:-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13466:133;:::o;640:96:7:-;693:7;719:10;712:17;;640:96;:::o;12768:171:2:-;12869:2;12842:15;:24;12858:7;12842:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12924:7;12920:2;12886:46;;12895:23;12910:7;12895:14;:23::i;:::-;12886:46;;;;;;;;;;;;12768:171;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11423:1233::-;11577:4;11550:31;;:23;11565:7;11550:14;:23::i;:::-;:31;;;11542:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11655:1;11641:16;;:2;:16;;;;11633:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;11851:31;;:23;11866:7;11851:14;:23::i;:::-;:31;;;11843:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11993:15;:24;12009:7;11993:24;;;;;;;;;;;;11986:31;;;;;;;;;;;12480:1;12461:9;:15;12471:4;12461:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12512:1;12495:9;:13;12505:2;12495:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12552:2;12533:7;:16;12541:7;12533:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12589:7;12585:2;12570:27;;12579:4;12570:27;;;;;;;;;;;;12608:41;12628:4;12634:2;12638:7;12647:1;12608:19;:41::i;:::-;11423:1233;;;:::o;6838:115::-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;13075:307::-;13225:8;13216:17;;:5;:17;;;;13208:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13311:8;13273:18;:25;13292:5;13273:25;;;;;;;;;;;;;;;:35;13299:8;13273:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13356:8;13334:41;;13349:5;13334:41;;;13366:8;13334:41;;;;;;:::i;:::-;;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;3319:92::-;3370:13;3395:9;;;;;;;;;;;;;;3319:92;:::o;415:696:8:-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;:::i;:::-;;;;;1045:1;1036:5;:10;1032:21;;;1048:5;;1032:21;788:280;;;1088:6;1081:13;;;;;415:696;;;:::o;7256:126:2:-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;15698:396::-;15882:1;15870:9;:13;15866:222;;;15919:1;15903:18;;:4;:18;;;15899:85;;15960:9;15941;:15;15951:4;15941:15;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;15899:85;16015:1;16001:16;;:2;:16;;;15997:81;;16054:9;16037;:13;16047:2;16037:13;;;;;;;;;;;;;;;;:26;;;;;;;:::i;:::-;;;;;;;;15997:81;15866:222;15698:396;;;;:::o;16800:153::-;;;;;:::o;14151:831::-;14300:4;14320:15;:2;:13;;;:15::i;:::-;14316:660;;;14371:2;14355:36;;;14392:12;:10;:12::i;:::-;14406:4;14412:7;14421:4;14355:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14610:1;14593:6;:13;:18;14589:321;;;14635:60;;;;;;;;;;:::i;:::-;;;;;;;;14589:321;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;14486:41;;;14476:51;;;:6;:51;;;;14469:58;;;;;14316:660;14961:4;14954:11;;14151:831;;;;;;;:::o;9889:890:11:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;:::i;:::-;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;:::i;:::-;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;:::i;:::-;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;:::i;:::-;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;:::i;:::-;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;:::i;:::-;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;1175:320:6:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;7:75:13:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:307::-;1866:1;1876:113;1890:6;1887:1;1884:13;1876:113;;;1975:1;1970:3;1966:11;1960:18;1956:1;1951:3;1947:11;1940:39;1912:2;1909:1;1905:10;1900:15;;1876:113;;;2007:6;2004:1;2001:13;1998:101;;;2087:1;2078:6;2073:3;2069:16;2062:27;1998:101;1847:258;1798:307;;;:::o;2111:102::-;2152:6;2203:2;2199:7;2194:2;2187:5;2183:14;2179:28;2169:38;;2111:102;;;:::o;2219:364::-;2307:3;2335:39;2368:5;2335:39;:::i;:::-;2390:71;2454:6;2449:3;2390:71;:::i;:::-;2383:78;;2470:52;2515:6;2510:3;2503:4;2496:5;2492:16;2470:52;:::i;:::-;2547:29;2569:6;2547:29;:::i;:::-;2542:3;2538:39;2531:46;;2311:272;2219:364;;;;:::o;2589:313::-;2702:4;2740:2;2729:9;2725:18;2717:26;;2789:9;2783:4;2779:20;2775:1;2764:9;2760:17;2753:47;2817:78;2890:4;2881:6;2817:78;:::i;:::-;2809:86;;2589:313;;;;:::o;2908:77::-;2945:7;2974:5;2963:16;;2908:77;;;:::o;2991:122::-;3064:24;3082:5;3064:24;:::i;:::-;3057:5;3054:35;3044:63;;3103:1;3100;3093:12;3044:63;2991:122;:::o;3119:139::-;3165:5;3203:6;3190:20;3181:29;;3219:33;3246:5;3219:33;:::i;:::-;3119:139;;;;:::o;3264:329::-;3323:6;3372:2;3360:9;3351:7;3347:23;3343:32;3340:119;;;3378:79;;:::i;:::-;3340:119;3498:1;3523:53;3568:7;3559:6;3548:9;3544:22;3523:53;:::i;:::-;3513:63;;3469:117;3264:329;;;;:::o;3599:126::-;3636:7;3676:42;3669:5;3665:54;3654:65;;3599:126;;;:::o;3731:96::-;3768:7;3797:24;3815:5;3797:24;:::i;:::-;3786:35;;3731:96;;;:::o;3833:118::-;3920:24;3938:5;3920:24;:::i;:::-;3915:3;3908:37;3833:118;;:::o;3957:222::-;4050:4;4088:2;4077:9;4073:18;4065:26;;4101:71;4169:1;4158:9;4154:17;4145:6;4101:71;:::i;:::-;3957:222;;;;:::o;4185:122::-;4258:24;4276:5;4258:24;:::i;:::-;4251:5;4248:35;4238:63;;4297:1;4294;4287:12;4238:63;4185:122;:::o;4313:139::-;4359:5;4397:6;4384:20;4375:29;;4413:33;4440:5;4413:33;:::i;:::-;4313:139;;;;:::o;4458:474::-;4526:6;4534;4583:2;4571:9;4562:7;4558:23;4554:32;4551:119;;;4589:79;;:::i;:::-;4551:119;4709:1;4734:53;4779:7;4770:6;4759:9;4755:22;4734:53;:::i;:::-;4724:63;;4680:117;4836:2;4862:53;4907:7;4898:6;4887:9;4883:22;4862:53;:::i;:::-;4852:63;;4807:118;4458:474;;;;;:::o;4938:619::-;5015:6;5023;5031;5080:2;5068:9;5059:7;5055:23;5051:32;5048:119;;;5086:79;;:::i;:::-;5048:119;5206:1;5231:53;5276:7;5267:6;5256:9;5252:22;5231:53;:::i;:::-;5221:63;;5177:117;5333:2;5359:53;5404:7;5395:6;5384:9;5380:22;5359:53;:::i;:::-;5349:63;;5304:118;5461:2;5487:53;5532:7;5523:6;5512:9;5508:22;5487:53;:::i;:::-;5477:63;;5432:118;4938:619;;;;;:::o;5563:329::-;5622:6;5671:2;5659:9;5650:7;5646:23;5642:32;5639:119;;;5677:79;;:::i;:::-;5639:119;5797:1;5822:53;5867:7;5858:6;5847:9;5843:22;5822:53;:::i;:::-;5812:63;;5768:117;5563:329;;;;:::o;5898:118::-;5985:24;6003:5;5985:24;:::i;:::-;5980:3;5973:37;5898:118;;:::o;6022:222::-;6115:4;6153:2;6142:9;6138:18;6130:26;;6166:71;6234:1;6223:9;6219:17;6210:6;6166:71;:::i;:::-;6022:222;;;;:::o;6250:116::-;6320:21;6335:5;6320:21;:::i;:::-;6313:5;6310:32;6300:60;;6356:1;6353;6346:12;6300:60;6250:116;:::o;6372:133::-;6415:5;6453:6;6440:20;6431:29;;6469:30;6493:5;6469:30;:::i;:::-;6372:133;;;;:::o;6511:468::-;6576:6;6584;6633:2;6621:9;6612:7;6608:23;6604:32;6601:119;;;6639:79;;:::i;:::-;6601:119;6759:1;6784:53;6829:7;6820:6;6809:9;6805:22;6784:53;:::i;:::-;6774:63;;6730:117;6886:2;6912:50;6954:7;6945:6;6934:9;6930:22;6912:50;:::i;:::-;6902:60;;6857:115;6511:468;;;;;:::o;6985:117::-;7094:1;7091;7084:12;7108:117;7217:1;7214;7207:12;7231:180;7279:77;7276:1;7269:88;7376:4;7373:1;7366:15;7400:4;7397:1;7390:15;7417:281;7500:27;7522:4;7500:27;:::i;:::-;7492:6;7488:40;7630:6;7618:10;7615:22;7594:18;7582:10;7579:34;7576:62;7573:88;;;7641:18;;:::i;:::-;7573:88;7681:10;7677:2;7670:22;7460:238;7417:281;;:::o;7704:129::-;7738:6;7765:20;;:::i;:::-;7755:30;;7794:33;7822:4;7814:6;7794:33;:::i;:::-;7704:129;;;:::o;7839:307::-;7900:4;7990:18;7982:6;7979:30;7976:56;;;8012:18;;:::i;:::-;7976:56;8050:29;8072:6;8050:29;:::i;:::-;8042:37;;8134:4;8128;8124:15;8116:23;;7839:307;;;:::o;8152:154::-;8236:6;8231:3;8226;8213:30;8298:1;8289:6;8284:3;8280:16;8273:27;8152:154;;;:::o;8312:410::-;8389:5;8414:65;8430:48;8471:6;8430:48;:::i;:::-;8414:65;:::i;:::-;8405:74;;8502:6;8495:5;8488:21;8540:4;8533:5;8529:16;8578:3;8569:6;8564:3;8560:16;8557:25;8554:112;;;8585:79;;:::i;:::-;8554:112;8675:41;8709:6;8704:3;8699;8675:41;:::i;:::-;8395:327;8312:410;;;;;:::o;8741:338::-;8796:5;8845:3;8838:4;8830:6;8826:17;8822:27;8812:122;;8853:79;;:::i;:::-;8812:122;8970:6;8957:20;8995:78;9069:3;9061:6;9054:4;9046:6;9042:17;8995:78;:::i;:::-;8986:87;;8802:277;8741:338;;;;:::o;9085:943::-;9180:6;9188;9196;9204;9253:3;9241:9;9232:7;9228:23;9224:33;9221:120;;;9260:79;;:::i;:::-;9221:120;9380:1;9405:53;9450:7;9441:6;9430:9;9426:22;9405:53;:::i;:::-;9395:63;;9351:117;9507:2;9533:53;9578:7;9569:6;9558:9;9554:22;9533:53;:::i;:::-;9523:63;;9478:118;9635:2;9661:53;9706:7;9697:6;9686:9;9682:22;9661:53;:::i;:::-;9651:63;;9606:118;9791:2;9780:9;9776:18;9763:32;9822:18;9814:6;9811:30;9808:117;;;9844:79;;:::i;:::-;9808:117;9949:62;10003:7;9994:6;9983:9;9979:22;9949:62;:::i;:::-;9939:72;;9734:287;9085:943;;;;;;;:::o;10034:474::-;10102:6;10110;10159:2;10147:9;10138:7;10134:23;10130:32;10127:119;;;10165:79;;:::i;:::-;10127:119;10285:1;10310:53;10355:7;10346:6;10335:9;10331:22;10310:53;:::i;:::-;10300:63;;10256:117;10412:2;10438:53;10483:7;10474:6;10463:9;10459:22;10438:53;:::i;:::-;10428:63;;10383:118;10034:474;;;;;:::o;10514:180::-;10562:77;10559:1;10552:88;10659:4;10656:1;10649:15;10683:4;10680:1;10673:15;10700:320;10744:6;10781:1;10775:4;10771:12;10761:22;;10828:1;10822:4;10818:12;10849:18;10839:81;;10905:4;10897:6;10893:17;10883:27;;10839:81;10967:2;10959:6;10956:14;10936:18;10933:38;10930:84;;;10986:18;;:::i;:::-;10930:84;10751:269;10700:320;;;:::o;11026:220::-;11166:34;11162:1;11154:6;11150:14;11143:58;11235:3;11230:2;11222:6;11218:15;11211:28;11026:220;:::o;11252:366::-;11394:3;11415:67;11479:2;11474:3;11415:67;:::i;:::-;11408:74;;11491:93;11580:3;11491:93;:::i;:::-;11609:2;11604:3;11600:12;11593:19;;11252:366;;;:::o;11624:419::-;11790:4;11828:2;11817:9;11813:18;11805:26;;11877:9;11871:4;11867:20;11863:1;11852:9;11848:17;11841:47;11905:131;12031:4;11905:131;:::i;:::-;11897:139;;11624:419;;;:::o;12049:248::-;12189:34;12185:1;12177:6;12173:14;12166:58;12258:31;12253:2;12245:6;12241:15;12234:56;12049:248;:::o;12303:366::-;12445:3;12466:67;12530:2;12525:3;12466:67;:::i;:::-;12459:74;;12542:93;12631:3;12542:93;:::i;:::-;12660:2;12655:3;12651:12;12644:19;;12303:366;;;:::o;12675:419::-;12841:4;12879:2;12868:9;12864:18;12856:26;;12928:9;12922:4;12918:20;12914:1;12903:9;12899:17;12892:47;12956:131;13082:4;12956:131;:::i;:::-;12948:139;;12675:419;;;:::o;13100:232::-;13240:34;13236:1;13228:6;13224:14;13217:58;13309:15;13304:2;13296:6;13292:15;13285:40;13100:232;:::o;13338:366::-;13480:3;13501:67;13565:2;13560:3;13501:67;:::i;:::-;13494:74;;13577:93;13666:3;13577:93;:::i;:::-;13695:2;13690:3;13686:12;13679:19;;13338:366;;;:::o;13710:419::-;13876:4;13914:2;13903:9;13899:18;13891:26;;13963:9;13957:4;13953:20;13949:1;13938:9;13934:17;13927:47;13991:131;14117:4;13991:131;:::i;:::-;13983:139;;13710:419;;;:::o;14135:174::-;14275:26;14271:1;14263:6;14259:14;14252:50;14135:174;:::o;14315:366::-;14457:3;14478:67;14542:2;14537:3;14478:67;:::i;:::-;14471:74;;14554:93;14643:3;14554:93;:::i;:::-;14672:2;14667:3;14663:12;14656:19;;14315:366;;;:::o;14687:419::-;14853:4;14891:2;14880:9;14876:18;14868:26;;14940:9;14934:4;14930:20;14926:1;14915:9;14911:17;14904:47;14968:131;15094:4;14968:131;:::i;:::-;14960:139;;14687:419;;;:::o;15112:228::-;15252:34;15248:1;15240:6;15236:14;15229:58;15321:11;15316:2;15308:6;15304:15;15297:36;15112:228;:::o;15346:366::-;15488:3;15509:67;15573:2;15568:3;15509:67;:::i;:::-;15502:74;;15585:93;15674:3;15585:93;:::i;:::-;15703:2;15698:3;15694:12;15687:19;;15346:366;;;:::o;15718:419::-;15884:4;15922:2;15911:9;15907:18;15899:26;;15971:9;15965:4;15961:20;15957:1;15946:9;15942:17;15935:47;15999:131;16125:4;15999:131;:::i;:::-;15991:139;;15718:419;;;:::o;16143:148::-;16245:11;16282:3;16267:18;;16143:148;;;;:::o;16297:377::-;16403:3;16431:39;16464:5;16431:39;:::i;:::-;16486:89;16568:6;16563:3;16486:89;:::i;:::-;16479:96;;16584:52;16629:6;16624:3;16617:4;16610:5;16606:16;16584:52;:::i;:::-;16661:6;16656:3;16652:16;16645:23;;16407:267;16297:377;;;;:::o;16680:435::-;16860:3;16882:95;16973:3;16964:6;16882:95;:::i;:::-;16875:102;;16994:95;17085:3;17076:6;16994:95;:::i;:::-;16987:102;;17106:3;17099:10;;16680:435;;;;;:::o;17121:224::-;17261:34;17257:1;17249:6;17245:14;17238:58;17330:7;17325:2;17317:6;17313:15;17306:32;17121:224;:::o;17351:366::-;17493:3;17514:67;17578:2;17573:3;17514:67;:::i;:::-;17507:74;;17590:93;17679:3;17590:93;:::i;:::-;17708:2;17703:3;17699:12;17692:19;;17351:366;;;:::o;17723:419::-;17889:4;17927:2;17916:9;17912:18;17904:26;;17976:9;17970:4;17966:20;17962:1;17951:9;17947:17;17940:47;18004:131;18130:4;18004:131;:::i;:::-;17996:139;;17723:419;;;:::o;18148:223::-;18288:34;18284:1;18276:6;18272:14;18265:58;18357:6;18352:2;18344:6;18340:15;18333:31;18148:223;:::o;18377:366::-;18519:3;18540:67;18604:2;18599:3;18540:67;:::i;:::-;18533:74;;18616:93;18705:3;18616:93;:::i;:::-;18734:2;18729:3;18725:12;18718:19;;18377:366;;;:::o;18749:419::-;18915:4;18953:2;18942:9;18938:18;18930:26;;19002:9;18996:4;18992:20;18988:1;18977:9;18973:17;18966:47;19030:131;19156:4;19030:131;:::i;:::-;19022:139;;18749:419;;;:::o;19174:175::-;19314:27;19310:1;19302:6;19298:14;19291:51;19174:175;:::o;19355:366::-;19497:3;19518:67;19582:2;19577:3;19518:67;:::i;:::-;19511:74;;19594:93;19683:3;19594:93;:::i;:::-;19712:2;19707:3;19703:12;19696:19;;19355:366;;;:::o;19727:419::-;19893:4;19931:2;19920:9;19916:18;19908:26;;19980:9;19974:4;19970:20;19966:1;19955:9;19951:17;19944:47;20008:131;20134:4;20008:131;:::i;:::-;20000:139;;19727:419;;;:::o;20152:237::-;20292:34;20288:1;20280:6;20276:14;20269:58;20361:20;20356:2;20348:6;20344:15;20337:45;20152:237;:::o;20395:366::-;20537:3;20558:67;20622:2;20617:3;20558:67;:::i;:::-;20551:74;;20634:93;20723:3;20634:93;:::i;:::-;20752:2;20747:3;20743:12;20736:19;;20395:366;;;:::o;20767:419::-;20933:4;20971:2;20960:9;20956:18;20948:26;;21020:9;21014:4;21010:20;21006:1;20995:9;20991:17;20984:47;21048:131;21174:4;21048:131;:::i;:::-;21040:139;;20767:419;;;:::o;21192:180::-;21240:77;21237:1;21230:88;21337:4;21334:1;21327:15;21361:4;21358:1;21351:15;21378:180;21426:77;21423:1;21416:88;21523:4;21520:1;21513:15;21547:4;21544:1;21537:15;21564:191;21604:4;21624:20;21642:1;21624:20;:::i;:::-;21619:25;;21658:20;21676:1;21658:20;:::i;:::-;21653:25;;21697:1;21694;21691:8;21688:34;;;21702:18;;:::i;:::-;21688:34;21747:1;21744;21740:9;21732:17;;21564:191;;;;:::o;21761:305::-;21801:3;21820:20;21838:1;21820:20;:::i;:::-;21815:25;;21854:20;21872:1;21854:20;:::i;:::-;21849:25;;22008:1;21940:66;21936:74;21933:1;21930:81;21927:107;;;22014:18;;:::i;:::-;21927:107;22058:1;22055;22051:9;22044:16;;21761:305;;;;:::o;22072:98::-;22123:6;22157:5;22151:12;22141:22;;22072:98;;;:::o;22176:168::-;22259:11;22293:6;22288:3;22281:19;22333:4;22328:3;22324:14;22309:29;;22176:168;;;;:::o;22350:360::-;22436:3;22464:38;22496:5;22464:38;:::i;:::-;22518:70;22581:6;22576:3;22518:70;:::i;:::-;22511:77;;22597:52;22642:6;22637:3;22630:4;22623:5;22619:16;22597:52;:::i;:::-;22674:29;22696:6;22674:29;:::i;:::-;22669:3;22665:39;22658:46;;22440:270;22350:360;;;;:::o;22716:640::-;22911:4;22949:3;22938:9;22934:19;22926:27;;22963:71;23031:1;23020:9;23016:17;23007:6;22963:71;:::i;:::-;23044:72;23112:2;23101:9;23097:18;23088:6;23044:72;:::i;:::-;23126;23194:2;23183:9;23179:18;23170:6;23126:72;:::i;:::-;23245:9;23239:4;23235:20;23230:2;23219:9;23215:18;23208:48;23273:76;23344:4;23335:6;23273:76;:::i;:::-;23265:84;;22716:640;;;;;;;:::o;23362:141::-;23418:5;23449:6;23443:13;23434:22;;23465:32;23491:5;23465:32;:::i;:::-;23362:141;;;;:::o;23509:349::-;23578:6;23627:2;23615:9;23606:7;23602:23;23598:32;23595:119;;;23633:79;;:::i;:::-;23595:119;23753:1;23778:63;23833:7;23824:6;23813:9;23809:22;23778:63;:::i;:::-;23768:73;;23724:127;23509:349;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1798800","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2924","getApproved(uint256)":"5277","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"3025","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"774","symbol()":"infinite","tokenURI(uint256)":"3467","transferFrom(address,address,uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,uint256,uint256)":"17","_approve(address,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256,uint256)":"infinite","_burn(uint256)":"infinite","_checkOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"2312","_isApprovedOrOwner(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_ownerOf(uint256)":"2248","_requireMinted(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_safeTransfer(address,address,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":179,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":181,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":185,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":189,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":193,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":199,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200f524f3074f7c67af838fdb41cf3e1f996979e864ac9ec066d3e9105cf86e5a564736f6c63430008080033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF MSTORE 0x4F ADDRESS PUSH21 0xF7C67AF838FDB41CF3E1F996979E864AC9EC066D3E SWAP2 SDIV 0xCF DUP7 0xE5 0xA5 PUSH5 0x736F6C6343 STOP ADDMOD ADDMOD STOP CALLER ","sourceMap":"194:8964:6:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200f524f3074f7c67af838fdb41cf3e1f996979e864ac9ec066d3e9105cf86e5a564736f6c63430008080033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF MSTORE 0x4F ADDRESS PUSH21 0xF7C67AF838FDB41CF3E1F996979E864AC9EC066D3E SWAP2 SDIV 0xCF DUP7 0xE5 0xA5 PUSH5 0x736F6C6343 STOP ADDMOD ADDMOD STOP CALLER ","sourceMap":"194:8964:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205f54f2c212423b7275651189ff7138ccf3977173284535445362de83acdb688864736f6c63430008080033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F SLOAD CALLCODE 0xC2 SLT TIMESTAMP EXTCODESIZE PUSH19 0x75651189FF7138CCF3977173284535445362DE DUP4 0xAC 0xDB PUSH9 0x8864736F6C63430008 ADDMOD STOP CALLER ","sourceMap":"188:2065:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205f54f2c212423b7275651189ff7138ccf3977173284535445362de83acdb688864736f6c63430008080033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5F SLOAD CALLCODE 0xC2 SLT TIMESTAMP EXTCODESIZE PUSH19 0x75651189FF7138CCF3977173284535445362DE DUP4 0xAC 0xDB PUSH9 0x8864736F6C63430008 ADDMOD STOP CALLER ","sourceMap":"188:2065:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a944f0c3a5e364d4ccc39a2f7083ee298c9b8a37dcf2184ff19bd4a18cc1d1a664736f6c63430008080033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 DIFFICULTY CREATE 0xC3 0xA5 0xE3 PUSH5 0xD4CCC39A2F PUSH17 0x83EE298C9B8A37DCF2184FF19BD4A18CC1 0xD1 0xA6 PUSH5 0x736F6C6343 STOP ADDMOD ADDMOD STOP CALLER ","sourceMap":"202:12302:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a944f0c3a5e364d4ccc39a2f7083ee298c9b8a37dcf2184ff19bd4a18cc1d1a664736f6c63430008080033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 DIFFICULTY CREATE 0xC3 0xA5 0xE3 PUSH5 0xD4CCC39A2F PUSH17 0x83EE298C9B8A37DCF2184FF19BD4A18CC1 0xD1 0xA6 PUSH5 0x736F6C6343 STOP ADDMOD ADDMOD STOP CALLER ","sourceMap":"202:12302:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/RandomIpfsNft.sol":{"RandomIpfsNft":{"abi":[{"inputs":[{"internalType":"address","name":"vrfCoordinatorV2","type":"address"},{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"bytes32","name":"gasLane","type":"bytes32"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[],"name":"RandomIpfsNft__RangeOutOfBounds","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"moddedRng","type":"uint256"}],"name":"getBreedFromModdedRng","outputs":[{"internalType":"enum RandomIpfsNft.Breed","name":"","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getChanceArray","outputs":[{"internalType":"uint256[3]","name":"","type":"uint256[3]"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"requestNft","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"s_requestIdToSender","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"s_tokenCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_21":{"entryPoint":null,"id":21,"parameterSlots":1,"returnSlots":0},"@_216":{"entryPoint":null,"id":216,"parameterSlots":2,"returnSlots":0},"@_2763":{"entryPoint":null,"id":2763,"parameterSlots":4,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":660,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":788,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint32_fromMemory":{"entryPoint":853,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64_fromMemory":{"entryPoint":729,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint64t_bytes32t_uint32_fromMemory":{"entryPoint":876,"id":null,"parameterSlots":2,"returnSlots":4},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":614,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":752,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":582,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":811,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":683,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":1037,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x22":{"entryPoint":990,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":577,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":634,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":762,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint32":{"entryPoint":827,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":703,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3288:13","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:13","statements":[{"nodeType":"YulAssignment","src":"57:19:13","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:13","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:13"},"nodeType":"YulFunctionCall","src":"67:9:13"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:13"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:13","type":""}],"src":"7:75:13"},{"body":{"nodeType":"YulBlock","src":"177:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:13"},"nodeType":"YulFunctionCall","src":"187:12:13"},"nodeType":"YulExpressionStatement","src":"187:12:13"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:13"},{"body":{"nodeType":"YulBlock","src":"300:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:13"},"nodeType":"YulFunctionCall","src":"310:12:13"},"nodeType":"YulExpressionStatement","src":"310:12:13"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:13"},{"body":{"nodeType":"YulBlock","src":"379:81:13","statements":[{"nodeType":"YulAssignment","src":"389:65:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:13"},"nodeType":"YulFunctionCall","src":"400:54:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:13"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:13","type":""}],"src":"334:126:13"},{"body":{"nodeType":"YulBlock","src":"511:51:13","statements":[{"nodeType":"YulAssignment","src":"521:35:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:13"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:13"},"nodeType":"YulFunctionCall","src":"532:24:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:13"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:13","type":""}],"src":"466:96:13"},{"body":{"nodeType":"YulBlock","src":"611:79:13","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:13"},"nodeType":"YulFunctionCall","src":"670:12:13"},"nodeType":"YulExpressionStatement","src":"670:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:13"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:13"},"nodeType":"YulFunctionCall","src":"641:24:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:13"},"nodeType":"YulFunctionCall","src":"631:35:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:13"},"nodeType":"YulFunctionCall","src":"624:43:13"},"nodeType":"YulIf","src":"621:63:13"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:13","type":""}],"src":"568:122:13"},{"body":{"nodeType":"YulBlock","src":"759:80:13","statements":[{"nodeType":"YulAssignment","src":"769:22:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"784:6:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"778:5:13"},"nodeType":"YulFunctionCall","src":"778:13:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"769:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"827:5:13"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"800:26:13"},"nodeType":"YulFunctionCall","src":"800:33:13"},"nodeType":"YulExpressionStatement","src":"800:33:13"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"737:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"745:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"753:5:13","type":""}],"src":"696:143:13"},{"body":{"nodeType":"YulBlock","src":"889:57:13","statements":[{"nodeType":"YulAssignment","src":"899:41:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"914:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"921:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"910:3:13"},"nodeType":"YulFunctionCall","src":"910:30:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"899:7:13"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"871:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"881:7:13","type":""}],"src":"845:101:13"},{"body":{"nodeType":"YulBlock","src":"994:78:13","statements":[{"body":{"nodeType":"YulBlock","src":"1050:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1059:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1062:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1052:6:13"},"nodeType":"YulFunctionCall","src":"1052:12:13"},"nodeType":"YulExpressionStatement","src":"1052:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1017:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1041:5:13"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"1024:16:13"},"nodeType":"YulFunctionCall","src":"1024:23:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1014:2:13"},"nodeType":"YulFunctionCall","src":"1014:34:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1007:6:13"},"nodeType":"YulFunctionCall","src":"1007:42:13"},"nodeType":"YulIf","src":"1004:62:13"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"987:5:13","type":""}],"src":"952:120:13"},{"body":{"nodeType":"YulBlock","src":"1140:79:13","statements":[{"nodeType":"YulAssignment","src":"1150:22:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1165:6:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1159:5:13"},"nodeType":"YulFunctionCall","src":"1159:13:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1150:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1207:5:13"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"1181:25:13"},"nodeType":"YulFunctionCall","src":"1181:32:13"},"nodeType":"YulExpressionStatement","src":"1181:32:13"}]},"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1118:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"1126:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1134:5:13","type":""}],"src":"1078:141:13"},{"body":{"nodeType":"YulBlock","src":"1270:32:13","statements":[{"nodeType":"YulAssignment","src":"1280:16:13","value":{"name":"value","nodeType":"YulIdentifier","src":"1291:5:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1280:7:13"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1252:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1262:7:13","type":""}],"src":"1225:77:13"},{"body":{"nodeType":"YulBlock","src":"1351:79:13","statements":[{"body":{"nodeType":"YulBlock","src":"1408:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1417:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1420:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1410:6:13"},"nodeType":"YulFunctionCall","src":"1410:12:13"},"nodeType":"YulExpressionStatement","src":"1410:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1374:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1399:5:13"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1381:17:13"},"nodeType":"YulFunctionCall","src":"1381:24:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1371:2:13"},"nodeType":"YulFunctionCall","src":"1371:35:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1364:6:13"},"nodeType":"YulFunctionCall","src":"1364:43:13"},"nodeType":"YulIf","src":"1361:63:13"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1344:5:13","type":""}],"src":"1308:122:13"},{"body":{"nodeType":"YulBlock","src":"1499:80:13","statements":[{"nodeType":"YulAssignment","src":"1509:22:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1524:6:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1518:5:13"},"nodeType":"YulFunctionCall","src":"1518:13:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1509:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1567:5:13"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"1540:26:13"},"nodeType":"YulFunctionCall","src":"1540:33:13"},"nodeType":"YulExpressionStatement","src":"1540:33:13"}]},"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1477:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"1485:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1493:5:13","type":""}],"src":"1436:143:13"},{"body":{"nodeType":"YulBlock","src":"1629:49:13","statements":[{"nodeType":"YulAssignment","src":"1639:33:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1654:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"1661:10:13","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1650:3:13"},"nodeType":"YulFunctionCall","src":"1650:22:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1639:7:13"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1611:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1621:7:13","type":""}],"src":"1585:93:13"},{"body":{"nodeType":"YulBlock","src":"1726:78:13","statements":[{"body":{"nodeType":"YulBlock","src":"1782:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1791:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1794:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1784:6:13"},"nodeType":"YulFunctionCall","src":"1784:12:13"},"nodeType":"YulExpressionStatement","src":"1784:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1749:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1773:5:13"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"1756:16:13"},"nodeType":"YulFunctionCall","src":"1756:23:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1746:2:13"},"nodeType":"YulFunctionCall","src":"1746:34:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1739:6:13"},"nodeType":"YulFunctionCall","src":"1739:42:13"},"nodeType":"YulIf","src":"1736:62:13"}]},"name":"validator_revert_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1719:5:13","type":""}],"src":"1684:120:13"},{"body":{"nodeType":"YulBlock","src":"1872:79:13","statements":[{"nodeType":"YulAssignment","src":"1882:22:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1897:6:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1891:5:13"},"nodeType":"YulFunctionCall","src":"1891:13:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1882:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1939:5:13"}],"functionName":{"name":"validator_revert_t_uint32","nodeType":"YulIdentifier","src":"1913:25:13"},"nodeType":"YulFunctionCall","src":"1913:32:13"},"nodeType":"YulExpressionStatement","src":"1913:32:13"}]},"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1850:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"1858:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1866:5:13","type":""}],"src":"1810:141:13"},{"body":{"nodeType":"YulBlock","src":"2083:690:13","statements":[{"body":{"nodeType":"YulBlock","src":"2130:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2132:77:13"},"nodeType":"YulFunctionCall","src":"2132:79:13"},"nodeType":"YulExpressionStatement","src":"2132:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2104:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"2113:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2100:3:13"},"nodeType":"YulFunctionCall","src":"2100:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"2125:3:13","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2096:3:13"},"nodeType":"YulFunctionCall","src":"2096:33:13"},"nodeType":"YulIf","src":"2093:120:13"},{"nodeType":"YulBlock","src":"2223:128:13","statements":[{"nodeType":"YulVariableDeclaration","src":"2238:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"2252:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2242:6:13","type":""}]},{"nodeType":"YulAssignment","src":"2267:74:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2313:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"2324:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2309:3:13"},"nodeType":"YulFunctionCall","src":"2309:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2333:7:13"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"2277:31:13"},"nodeType":"YulFunctionCall","src":"2277:64:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2267:6:13"}]}]},{"nodeType":"YulBlock","src":"2361:128:13","statements":[{"nodeType":"YulVariableDeclaration","src":"2376:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"2390:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2380:6:13","type":""}]},{"nodeType":"YulAssignment","src":"2406:73:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2451:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"2462:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2447:3:13"},"nodeType":"YulFunctionCall","src":"2447:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2471:7:13"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"2416:30:13"},"nodeType":"YulFunctionCall","src":"2416:63:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2406:6:13"}]}]},{"nodeType":"YulBlock","src":"2499:129:13","statements":[{"nodeType":"YulVariableDeclaration","src":"2514:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"2528:2:13","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2518:6:13","type":""}]},{"nodeType":"YulAssignment","src":"2544:74:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2590:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"2601:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2586:3:13"},"nodeType":"YulFunctionCall","src":"2586:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2610:7:13"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulIdentifier","src":"2554:31:13"},"nodeType":"YulFunctionCall","src":"2554:64:13"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2544:6:13"}]}]},{"nodeType":"YulBlock","src":"2638:128:13","statements":[{"nodeType":"YulVariableDeclaration","src":"2653:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"2667:2:13","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2657:6:13","type":""}]},{"nodeType":"YulAssignment","src":"2683:73:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2728:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"2739:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2724:3:13"},"nodeType":"YulFunctionCall","src":"2724:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2748:7:13"}],"functionName":{"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulIdentifier","src":"2693:30:13"},"nodeType":"YulFunctionCall","src":"2693:63:13"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2683:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint64t_bytes32t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2029:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2040:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2052:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2060:6:13","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2068:6:13","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2076:6:13","type":""}],"src":"1957:816:13"},{"body":{"nodeType":"YulBlock","src":"2807:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2824:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2827:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2817:6:13"},"nodeType":"YulFunctionCall","src":"2817:88:13"},"nodeType":"YulExpressionStatement","src":"2817:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2921:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2924:4:13","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2914:6:13"},"nodeType":"YulFunctionCall","src":"2914:15:13"},"nodeType":"YulExpressionStatement","src":"2914:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2945:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2948:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2938:6:13"},"nodeType":"YulFunctionCall","src":"2938:15:13"},"nodeType":"YulExpressionStatement","src":"2938:15:13"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"2779:180:13"},{"body":{"nodeType":"YulBlock","src":"3016:269:13","statements":[{"nodeType":"YulAssignment","src":"3026:22:13","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3040:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"3046:1:13","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3036:3:13"},"nodeType":"YulFunctionCall","src":"3036:12:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3026:6:13"}]},{"nodeType":"YulVariableDeclaration","src":"3057:38:13","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3087:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"3093:1:13","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3083:3:13"},"nodeType":"YulFunctionCall","src":"3083:12:13"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"3061:18:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"3134:51:13","statements":[{"nodeType":"YulAssignment","src":"3148:27:13","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3162:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"3170:4:13","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3158:3:13"},"nodeType":"YulFunctionCall","src":"3158:17:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3148:6:13"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3114:18:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3107:6:13"},"nodeType":"YulFunctionCall","src":"3107:26:13"},"nodeType":"YulIf","src":"3104:81:13"},{"body":{"nodeType":"YulBlock","src":"3237:42:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"3251:16:13"},"nodeType":"YulFunctionCall","src":"3251:18:13"},"nodeType":"YulExpressionStatement","src":"3251:18:13"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3201:18:13"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3224:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"3232:2:13","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3221:2:13"},"nodeType":"YulFunctionCall","src":"3221:14:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3198:2:13"},"nodeType":"YulFunctionCall","src":"3198:38:13"},"nodeType":"YulIf","src":"3195:84:13"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3000:4:13","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3009:6:13","type":""}],"src":"2965:320:13"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function validator_revert_t_uint32(value) {\n        if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint32(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint64t_bytes32t_uint32_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint64_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n}\n","id":13,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101206040523480156200001257600080fd5b50604051620031cc380380620031cc83398181016040528101906200003891906200036c565b6040518060400160405280600f81526020017f52616e646f6d2049504653204e465400000000000000000000000000000000008152506040518060400160405280600381526020017f52494e0000000000000000000000000000000000000000000000000000000000815250858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508160009080519060200190620000f592919062000191565b5080600190805190602001906200010e92919062000191565b5050508373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508267ffffffffffffffff1660c08167ffffffffffffffff1660c01b815250508160e081815250508063ffffffff166101008163ffffffff1660e01b815250505050505062000443565b8280546200019f906200040d565b90600052602060002090601f016020900481019282620001c357600085556200020f565b82601f10620001de57805160ff19168380011785556200020f565b828001600101855582156200020f579182015b828111156200020e578251825591602001919060010190620001f1565b5b5090506200021e919062000222565b5090565b5b808211156200023d57600081600090555060010162000223565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002738262000246565b9050919050565b620002858162000266565b81146200029157600080fd5b50565b600081519050620002a5816200027a565b92915050565b600067ffffffffffffffff82169050919050565b620002ca81620002ab565b8114620002d657600080fd5b50565b600081519050620002ea81620002bf565b92915050565b6000819050919050565b6200030581620002f0565b81146200031157600080fd5b50565b6000815190506200032581620002fa565b92915050565b600063ffffffff82169050919050565b62000346816200032b565b81146200035257600080fd5b50565b60008151905062000366816200033b565b92915050565b6000806000806080858703121562000389576200038862000241565b5b6000620003998782880162000294565b9450506020620003ac87828801620002d9565b9350506040620003bf8782880162000314565b9250506060620003d28782880162000355565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200042657607f821691505b602082108114156200043d576200043c620003de565b5b50919050565b60805160601c60a05160601c60c05160c01c60e0516101005160e01c612d316200049b6000396000610ba701526000610b6301526000610b8401526000610b270152600081816106be01526107120152612d316000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80636352211e116100ad578063a51cccf311610071578063a51cccf31461031a578063aa1524911461034a578063b88d4fde14610368578063c87b56dd14610384578063e985e9c5146103b457610121565b80636352211e1461025057806370a082311461028057806395d89b41146102b0578063a22cb465146102ce578063a36f573b146102ea57610121565b80630b21a83b116100f45780630b21a83b146101c05780631fe543e3146101de57806323b872dd146101fa57806342842e0e146102165780635dacf5f41461023257610121565b806301ffc9a71461012657806306fdde0314610156578063081812fc14610174578063095ea7b3146101a4575b600080fd5b610140600480360381019061013b9190611b6f565b6103e4565b60405161014d9190611bb7565b60405180910390f35b61015e6104c6565b60405161016b9190611c6b565b60405180910390f35b61018e60048036038101906101899190611cc3565b610558565b60405161019b9190611d31565b60405180910390f35b6101be60048036038101906101b99190611d78565b61059e565b005b6101c86106b6565b6040516101d59190611dc7565b60405180910390f35b6101f860048036038101906101f39190611f2a565b6106bc565b005b610214600480360381019061020f9190611f86565b61077c565b005b610230600480360381019061022b9190611f86565b6107dc565b005b61023a6107fc565b6040516102479190612084565b60405180910390f35b61026a60048036038101906102659190611cc3565b610827565b6040516102779190611d31565b60405180910390f35b61029a6004803603810190610295919061209f565b6108ae565b6040516102a79190611dc7565b60405180910390f35b6102b8610966565b6040516102c59190611c6b565b60405180910390f35b6102e860048036038101906102e391906120f8565b6109f8565b005b61030460048036038101906102ff9190611cc3565b610a0e565b6040516103119190611d31565b60405180910390f35b610334600480360381019061032f9190611cc3565b610a41565b60405161034191906121af565b60405180910390f35b610352610b23565b60405161035f9190611dc7565b60405180910390f35b610382600480360381019061037d919061227f565b610c91565b005b61039e60048036038101906103999190611cc3565b610cf3565b6040516103ab9190611c6b565b60405180910390f35b6103ce60048036038101906103c99190612302565b610cfa565b6040516103db9190611bb7565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104af57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104bf57506104be82610d8e565b5b9050919050565b6060600080546104d590612371565b80601f016020809104026020016040519081016040528092919081815260200182805461050190612371565b801561054e5780601f106105235761010080835404028352916020019161054e565b820191906000526020600020905b81548152906001019060200180831161053157829003601f168201915b5050505050905090565b600061056382610df8565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105a982610827565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561061a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061190612415565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610639610e43565b73ffffffffffffffffffffffffffffffffffffffff161480610668575061066781610662610e43565b610cfa565b5b6106a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069e906124a7565b60405180910390fd5b6106b18383610e4b565b505050565b60075481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461076e57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016107659291906124c7565b60405180910390fd5b6107788282610f04565b5050565b61078d610787610e43565b82610f8e565b6107cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c390612562565b60405180910390fd5b6107d7838383611023565b505050565b6107f783838360405180602001604052806000815250610c91565b505050565b610804611ae1565b6040518060600160405280600a8152602001601e81526020016064815250905090565b6000806108338361131d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089c906125ce565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561091f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091690612660565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461097590612371565b80601f01602080910402602001604051908101604052809291908181526020018280546109a190612371565b80156109ee5780601f106109c3576101008083540402835291602001916109ee565b820191906000526020600020905b8154815290600101906020018083116109d157829003601f168201915b5050505050905090565b610a0a610a03610e43565b838361135a565b5050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600090506000610a526107fc565b905060005b6003811015610aeb57828510158015610a915750818160038110610a7e57610a7d612680565b5b602002015183610a8e91906126de565b85105b15610ab357806002811115610aa957610aa8612138565b5b9350505050610b1e565b818160038110610ac657610ac5612680565b5b602002015183610ad691906126de565b92508080610ae390612734565b915050610a57565b506040517f12806c9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610be89594939291906127f5565b602060405180830381600087803b158015610c0257600080fd5b505af1158015610c16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3a919061285d565b9050336006600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090565b610ca2610c9c610e43565b83610f8e565b610ce1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd890612562565b60405180910390fd5b610ced848484846114c7565b50505050565b6060919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610e0181611523565b610e40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e37906125ce565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610ebe83610827565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006006600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060075490506000606484600081518110610f5b57610f5a612680565b5b6020026020010151610f6d91906128b9565b90506000610f7a82610a41565b9050610f868484611564565b505050505050565b600080610f9a83610827565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610fdc5750610fdb8185610cfa565b5b8061101a57508373ffffffffffffffffffffffffffffffffffffffff1661100284610558565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661104382610827565b73ffffffffffffffffffffffffffffffffffffffff1614611099576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110909061295c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611109576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611100906129ee565b60405180910390fd5b6111168383836001611582565b8273ffffffffffffffffffffffffffffffffffffffff1661113682610827565b73ffffffffffffffffffffffffffffffffffffffff161461118c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111839061295c565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461131883838360016116a8565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156113c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c090612a5a565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516114ba9190611bb7565b60405180910390a3505050565b6114d2848484611023565b6114de848484846116ae565b61151d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151490612aec565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff166115458361131d565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b61157e828260405180602001604052806000815250611845565b5050565b60018111156116a257600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146116165780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461160e9190612b0c565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146116a15780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461169991906126de565b925050819055505b5b50505050565b50505050565b60006116cf8473ffffffffffffffffffffffffffffffffffffffff166118a0565b15611838578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026116f8610e43565b8786866040518563ffffffff1660e01b815260040161171a9493929190612b95565b602060405180830381600087803b15801561173457600080fd5b505af192505050801561176557506040513d601f19601f820116820180604052508101906117629190612bf6565b60015b6117e8573d8060008114611795576040519150601f19603f3d011682016040523d82523d6000602084013e61179a565b606091505b506000815114156117e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d790612aec565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061183d565b600190505b949350505050565b61184f83836118c3565b61185c60008484846116ae565b61189b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189290612aec565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611933576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192a90612c6f565b60405180910390fd5b61193c81611523565b1561197c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197390612cdb565b60405180910390fd5b61198a600083836001611582565b61199381611523565b156119d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ca90612cdb565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611add6000838360016116a8565b5050565b6040518060600160405280600390602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611b4c81611b17565b8114611b5757600080fd5b50565b600081359050611b6981611b43565b92915050565b600060208284031215611b8557611b84611b0d565b5b6000611b9384828501611b5a565b91505092915050565b60008115159050919050565b611bb181611b9c565b82525050565b6000602082019050611bcc6000830184611ba8565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611c0c578082015181840152602081019050611bf1565b83811115611c1b576000848401525b50505050565b6000601f19601f8301169050919050565b6000611c3d82611bd2565b611c478185611bdd565b9350611c57818560208601611bee565b611c6081611c21565b840191505092915050565b60006020820190508181036000830152611c858184611c32565b905092915050565b6000819050919050565b611ca081611c8d565b8114611cab57600080fd5b50565b600081359050611cbd81611c97565b92915050565b600060208284031215611cd957611cd8611b0d565b5b6000611ce784828501611cae565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d1b82611cf0565b9050919050565b611d2b81611d10565b82525050565b6000602082019050611d466000830184611d22565b92915050565b611d5581611d10565b8114611d6057600080fd5b50565b600081359050611d7281611d4c565b92915050565b60008060408385031215611d8f57611d8e611b0d565b5b6000611d9d85828601611d63565b9250506020611dae85828601611cae565b9150509250929050565b611dc181611c8d565b82525050565b6000602082019050611ddc6000830184611db8565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e1f82611c21565b810181811067ffffffffffffffff82111715611e3e57611e3d611de7565b5b80604052505050565b6000611e51611b03565b9050611e5d8282611e16565b919050565b600067ffffffffffffffff821115611e7d57611e7c611de7565b5b602082029050602081019050919050565b600080fd5b6000611ea6611ea184611e62565b611e47565b90508083825260208201905060208402830185811115611ec957611ec8611e8e565b5b835b81811015611ef25780611ede8882611cae565b845260208401935050602081019050611ecb565b5050509392505050565b600082601f830112611f1157611f10611de2565b5b8135611f21848260208601611e93565b91505092915050565b60008060408385031215611f4157611f40611b0d565b5b6000611f4f85828601611cae565b925050602083013567ffffffffffffffff811115611f7057611f6f611b12565b5b611f7c85828601611efc565b9150509250929050565b600080600060608486031215611f9f57611f9e611b0d565b5b6000611fad86828701611d63565b9350506020611fbe86828701611d63565b9250506040611fcf86828701611cae565b9150509250925092565b600060039050919050565b600081905092915050565b6000819050919050565b61200281611c8d565b82525050565b60006120148383611ff9565b60208301905092915050565b6000602082019050919050565b61203681611fd9565b6120408184611fe4565b925061204b82611fef565b8060005b8381101561207c5781516120638782612008565b965061206e83612020565b92505060018101905061204f565b505050505050565b6000606082019050612099600083018461202d565b92915050565b6000602082840312156120b5576120b4611b0d565b5b60006120c384828501611d63565b91505092915050565b6120d581611b9c565b81146120e057600080fd5b50565b6000813590506120f2816120cc565b92915050565b6000806040838503121561210f5761210e611b0d565b5b600061211d85828601611d63565b925050602061212e858286016120e3565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061217857612177612138565b5b50565b600081905061218982612167565b919050565b60006121998261217b565b9050919050565b6121a98161218e565b82525050565b60006020820190506121c460008301846121a0565b92915050565b600080fd5b600067ffffffffffffffff8211156121ea576121e9611de7565b5b6121f382611c21565b9050602081019050919050565b82818337600083830152505050565b600061222261221d846121cf565b611e47565b90508281526020810184848401111561223e5761223d6121ca565b5b612249848285612200565b509392505050565b600082601f83011261226657612265611de2565b5b813561227684826020860161220f565b91505092915050565b6000806000806080858703121561229957612298611b0d565b5b60006122a787828801611d63565b94505060206122b887828801611d63565b93505060406122c987828801611cae565b925050606085013567ffffffffffffffff8111156122ea576122e9611b12565b5b6122f687828801612251565b91505092959194509250565b6000806040838503121561231957612318611b0d565b5b600061232785828601611d63565b925050602061233885828601611d63565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061238957607f821691505b6020821081141561239d5761239c612342565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006123ff602183611bdd565b915061240a826123a3565b604082019050919050565b6000602082019050818103600083015261242e816123f2565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612491603d83611bdd565b915061249c82612435565b604082019050919050565b600060208201905081810360008301526124c081612484565b9050919050565b60006040820190506124dc6000830185611d22565b6124e96020830184611d22565b9392505050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b600061254c602d83611bdd565b9150612557826124f0565b604082019050919050565b6000602082019050818103600083015261257b8161253f565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006125b8601883611bdd565b91506125c382612582565b602082019050919050565b600060208201905081810360008301526125e7816125ab565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061264a602983611bdd565b9150612655826125ee565b604082019050919050565b600060208201905081810360008301526126798161263d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126e982611c8d565b91506126f483611c8d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612729576127286126af565b5b828201905092915050565b600061273f82611c8d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612772576127716126af565b5b600182019050919050565b6000819050919050565b6127908161277d565b82525050565b600067ffffffffffffffff82169050919050565b6127b381612796565b82525050565b600061ffff82169050919050565b6127d0816127b9565b82525050565b600063ffffffff82169050919050565b6127ef816127d6565b82525050565b600060a08201905061280a6000830188612787565b61281760208301876127aa565b61282460408301866127c7565b61283160608301856127e6565b61283e60808301846127e6565b9695505050505050565b60008151905061285781611c97565b92915050565b60006020828403121561287357612872611b0d565b5b600061288184828501612848565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006128c482611c8d565b91506128cf83611c8d565b9250826128df576128de61288a565b5b828206905092915050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612946602583611bdd565b9150612951826128ea565b604082019050919050565b6000602082019050818103600083015261297581612939565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006129d8602483611bdd565b91506129e38261297c565b604082019050919050565b60006020820190508181036000830152612a07816129cb565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612a44601983611bdd565b9150612a4f82612a0e565b602082019050919050565b60006020820190508181036000830152612a7381612a37565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612ad6603283611bdd565b9150612ae182612a7a565b604082019050919050565b60006020820190508181036000830152612b0581612ac9565b9050919050565b6000612b1782611c8d565b9150612b2283611c8d565b925082821015612b3557612b346126af565b5b828203905092915050565b600081519050919050565b600082825260208201905092915050565b6000612b6782612b40565b612b718185612b4b565b9350612b81818560208601611bee565b612b8a81611c21565b840191505092915050565b6000608082019050612baa6000830187611d22565b612bb76020830186611d22565b612bc46040830185611db8565b8181036060830152612bd68184612b5c565b905095945050505050565b600081519050612bf081611b43565b92915050565b600060208284031215612c0c57612c0b611b0d565b5b6000612c1a84828501612be1565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612c59602083611bdd565b9150612c6482612c23565b602082019050919050565b60006020820190508181036000830152612c8881612c4c565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612cc5601c83611bdd565b9150612cd082612c8f565b602082019050919050565b60006020820190508181036000830152612cf481612cb8565b905091905056fea264697066735822122049c321713b151e0adb671b80d665d11c035b381ddeefcff324980e72362a88fd64736f6c63430008080033","opcodes":"PUSH2 0x120 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x31CC CODESIZE SUB DUP1 PUSH3 0x31CC DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x38 SWAP2 SWAP1 PUSH3 0x36C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x52616E646F6D2049504653204E46540000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x52494E0000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP6 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP POP DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xF5 SWAP3 SWAP2 SWAP1 PUSH3 0x191 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x10E SWAP3 SWAP2 SWAP1 PUSH3 0x191 JUMP JUMPDEST POP POP POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xC0 SHL DUP2 MSTORE POP POP DUP2 PUSH1 0xE0 DUP2 DUP2 MSTORE POP POP DUP1 PUSH4 0xFFFFFFFF AND PUSH2 0x100 DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE POP POP POP POP POP POP PUSH3 0x443 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x19F SWAP1 PUSH3 0x40D JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x1C3 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x20F JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x1DE JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x20F JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x20F JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x20E JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x1F1 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x21E SWAP2 SWAP1 PUSH3 0x222 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x23D JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x223 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x273 DUP3 PUSH3 0x246 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x285 DUP2 PUSH3 0x266 JUMP JUMPDEST DUP2 EQ PUSH3 0x291 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x2A5 DUP2 PUSH3 0x27A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x2CA DUP2 PUSH3 0x2AB JUMP JUMPDEST DUP2 EQ PUSH3 0x2D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x2EA DUP2 PUSH3 0x2BF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x305 DUP2 PUSH3 0x2F0 JUMP JUMPDEST DUP2 EQ PUSH3 0x311 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x325 DUP2 PUSH3 0x2FA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x346 DUP2 PUSH3 0x32B JUMP JUMPDEST DUP2 EQ PUSH3 0x352 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x366 DUP2 PUSH3 0x33B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x389 JUMPI PUSH3 0x388 PUSH3 0x241 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x399 DUP8 DUP3 DUP9 ADD PUSH3 0x294 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH3 0x3AC DUP8 DUP3 DUP9 ADD PUSH3 0x2D9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH3 0x3BF DUP8 DUP3 DUP9 ADD PUSH3 0x314 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH3 0x3D2 DUP8 DUP3 DUP9 ADD PUSH3 0x355 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x426 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x43D JUMPI PUSH3 0x43C PUSH3 0x3DE JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH1 0xC0 SHR PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0xE0 SHR PUSH2 0x2D31 PUSH3 0x49B PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0xBA7 ADD MSTORE PUSH1 0x0 PUSH2 0xB63 ADD MSTORE PUSH1 0x0 PUSH2 0xB84 ADD MSTORE PUSH1 0x0 PUSH2 0xB27 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x6BE ADD MSTORE PUSH2 0x712 ADD MSTORE PUSH2 0x2D31 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x121 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xA51CCCF3 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xA51CCCF3 EQ PUSH2 0x31A JUMPI DUP1 PUSH4 0xAA152491 EQ PUSH2 0x34A JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x368 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x384 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x3B4 JUMPI PUSH2 0x121 JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x2B0 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x2CE JUMPI DUP1 PUSH4 0xA36F573B EQ PUSH2 0x2EA JUMPI PUSH2 0x121 JUMP JUMPDEST DUP1 PUSH4 0xB21A83B GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0xB21A83B EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0x5DACF5F4 EQ PUSH2 0x232 JUMPI PUSH2 0x121 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1A4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x140 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x13B SWAP2 SWAP1 PUSH2 0x1B6F JUMP JUMPDEST PUSH2 0x3E4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14D SWAP2 SWAP1 PUSH2 0x1BB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15E PUSH2 0x4C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16B SWAP2 SWAP1 PUSH2 0x1C6B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x189 SWAP2 SWAP1 PUSH2 0x1CC3 JUMP JUMPDEST PUSH2 0x558 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19B SWAP2 SWAP1 PUSH2 0x1D31 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1BE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B9 SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST PUSH2 0x59E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C8 PUSH2 0x6B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D5 SWAP2 SWAP1 PUSH2 0x1DC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x1F2A JUMP JUMPDEST PUSH2 0x6BC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x214 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20F SWAP2 SWAP1 PUSH2 0x1F86 JUMP JUMPDEST PUSH2 0x77C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0x1F86 JUMP JUMPDEST PUSH2 0x7DC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x23A PUSH2 0x7FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x247 SWAP2 SWAP1 PUSH2 0x2084 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x26A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x265 SWAP2 SWAP1 PUSH2 0x1CC3 JUMP JUMPDEST PUSH2 0x827 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x277 SWAP2 SWAP1 PUSH2 0x1D31 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x29A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x295 SWAP2 SWAP1 PUSH2 0x209F JUMP JUMPDEST PUSH2 0x8AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A7 SWAP2 SWAP1 PUSH2 0x1DC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B8 PUSH2 0x966 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP2 SWAP1 PUSH2 0x1C6B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E3 SWAP2 SWAP1 PUSH2 0x20F8 JUMP JUMPDEST PUSH2 0x9F8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x304 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FF SWAP2 SWAP1 PUSH2 0x1CC3 JUMP JUMPDEST PUSH2 0xA0E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x311 SWAP2 SWAP1 PUSH2 0x1D31 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x334 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x32F SWAP2 SWAP1 PUSH2 0x1CC3 JUMP JUMPDEST PUSH2 0xA41 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x341 SWAP2 SWAP1 PUSH2 0x21AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x352 PUSH2 0xB23 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x35F SWAP2 SWAP1 PUSH2 0x1DC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x382 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x37D SWAP2 SWAP1 PUSH2 0x227F JUMP JUMPDEST PUSH2 0xC91 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x39E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x399 SWAP2 SWAP1 PUSH2 0x1CC3 JUMP JUMPDEST PUSH2 0xCF3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3AB SWAP2 SWAP1 PUSH2 0x1C6B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3CE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0x2302 JUMP JUMPDEST PUSH2 0xCFA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3DB SWAP2 SWAP1 PUSH2 0x1BB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x4AF JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x4BF JUMPI POP PUSH2 0x4BE DUP3 PUSH2 0xD8E JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x4D5 SWAP1 PUSH2 0x2371 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x501 SWAP1 PUSH2 0x2371 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x54E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x523 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x54E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x531 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x563 DUP3 PUSH2 0xDF8 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5A9 DUP3 PUSH2 0x827 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x61A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x611 SWAP1 PUSH2 0x2415 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x639 PUSH2 0xE43 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x668 JUMPI POP PUSH2 0x667 DUP2 PUSH2 0x662 PUSH2 0xE43 JUMP JUMPDEST PUSH2 0xCFA JUMP JUMPDEST JUMPDEST PUSH2 0x6A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x69E SWAP1 PUSH2 0x24A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6B1 DUP4 DUP4 PUSH2 0xE4B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x76E JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x765 SWAP3 SWAP2 SWAP1 PUSH2 0x24C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x778 DUP3 DUP3 PUSH2 0xF04 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x78D PUSH2 0x787 PUSH2 0xE43 JUMP JUMPDEST DUP3 PUSH2 0xF8E JUMP JUMPDEST PUSH2 0x7CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7C3 SWAP1 PUSH2 0x2562 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7D7 DUP4 DUP4 DUP4 PUSH2 0x1023 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x7F7 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xC91 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x804 PUSH2 0x1AE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x64 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x833 DUP4 PUSH2 0x131D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x8A5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x89C SWAP1 PUSH2 0x25CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x91F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x916 SWAP1 PUSH2 0x2660 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x975 SWAP1 PUSH2 0x2371 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9A1 SWAP1 PUSH2 0x2371 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x9EE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x9C3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x9EE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x9D1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xA0A PUSH2 0xA03 PUSH2 0xE43 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x135A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 PUSH2 0xA52 PUSH2 0x7FC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xAEB JUMPI DUP3 DUP6 LT ISZERO DUP1 ISZERO PUSH2 0xA91 JUMPI POP DUP2 DUP2 PUSH1 0x3 DUP2 LT PUSH2 0xA7E JUMPI PUSH2 0xA7D PUSH2 0x2680 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP4 PUSH2 0xA8E SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST DUP6 LT JUMPDEST ISZERO PUSH2 0xAB3 JUMPI DUP1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xAA9 JUMPI PUSH2 0xAA8 PUSH2 0x2138 JUMP JUMPDEST JUMPDEST SWAP4 POP POP POP POP PUSH2 0xB1E JUMP JUMPDEST DUP2 DUP2 PUSH1 0x3 DUP2 LT PUSH2 0xAC6 JUMPI PUSH2 0xAC5 PUSH2 0x2680 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP4 PUSH2 0xAD6 SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST SWAP3 POP DUP1 DUP1 PUSH2 0xAE3 SWAP1 PUSH2 0x2734 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xA57 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x12806C9D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBE8 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x27F5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC16 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC3A SWAP2 SWAP1 PUSH2 0x285D JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x6 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0xCA2 PUSH2 0xC9C PUSH2 0xE43 JUMP JUMPDEST DUP4 PUSH2 0xF8E JUMP JUMPDEST PUSH2 0xCE1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCD8 SWAP1 PUSH2 0x2562 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCED DUP5 DUP5 DUP5 DUP5 PUSH2 0x14C7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE01 DUP2 PUSH2 0x1523 JUMP JUMPDEST PUSH2 0xE40 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE37 SWAP1 PUSH2 0x25CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xEBE DUP4 PUSH2 0x827 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x7 SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x64 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xF5B JUMPI PUSH2 0xF5A PUSH2 0x2680 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xF6D SWAP2 SWAP1 PUSH2 0x28B9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF7A DUP3 PUSH2 0xA41 JUMP JUMPDEST SWAP1 POP PUSH2 0xF86 DUP5 DUP5 PUSH2 0x1564 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xF9A DUP4 PUSH2 0x827 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xFDC JUMPI POP PUSH2 0xFDB DUP2 DUP6 PUSH2 0xCFA JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x101A JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1002 DUP5 PUSH2 0x558 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1043 DUP3 PUSH2 0x827 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1099 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1090 SWAP1 PUSH2 0x295C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1109 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1100 SWAP1 PUSH2 0x29EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1116 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1582 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1136 DUP3 PUSH2 0x827 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x118C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1183 SWAP1 PUSH2 0x295C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1318 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x16A8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x13C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13C0 SWAP1 PUSH2 0x2A5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x14BA SWAP2 SWAP1 PUSH2 0x1BB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x14D2 DUP5 DUP5 DUP5 PUSH2 0x1023 JUMP JUMPDEST PUSH2 0x14DE DUP5 DUP5 DUP5 DUP5 PUSH2 0x16AE JUMP JUMPDEST PUSH2 0x151D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1514 SWAP1 PUSH2 0x2AEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1545 DUP4 PUSH2 0x131D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x157E DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1845 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x16A2 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1616 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x160E SWAP2 SWAP1 PUSH2 0x2B0C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x16A1 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1699 SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16CF DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x18A0 JUMP JUMPDEST ISZERO PUSH2 0x1838 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x16F8 PUSH2 0xE43 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x171A SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B95 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1734 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1765 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1762 SWAP2 SWAP1 PUSH2 0x2BF6 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x17E8 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1795 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x179A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x17E0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17D7 SWAP1 PUSH2 0x2AEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x183D JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x184F DUP4 DUP4 PUSH2 0x18C3 JUMP JUMPDEST PUSH2 0x185C PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x16AE JUMP JUMPDEST PUSH2 0x189B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1892 SWAP1 PUSH2 0x2AEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1933 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x192A SWAP1 PUSH2 0x2C6F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x193C DUP2 PUSH2 0x1523 JUMP JUMPDEST ISZERO PUSH2 0x197C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1973 SWAP1 PUSH2 0x2CDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x198A PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1582 JUMP JUMPDEST PUSH2 0x1993 DUP2 PUSH2 0x1523 JUMP JUMPDEST ISZERO PUSH2 0x19D3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19CA SWAP1 PUSH2 0x2CDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1ADD PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x16A8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B4C DUP2 PUSH2 0x1B17 JUMP JUMPDEST DUP2 EQ PUSH2 0x1B57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1B69 DUP2 PUSH2 0x1B43 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B85 JUMPI PUSH2 0x1B84 PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B93 DUP5 DUP3 DUP6 ADD PUSH2 0x1B5A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BB1 DUP2 PUSH2 0x1B9C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1BCC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1BA8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C0C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1BF1 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1C1B JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C3D DUP3 PUSH2 0x1BD2 JUMP JUMPDEST PUSH2 0x1C47 DUP2 DUP6 PUSH2 0x1BDD JUMP JUMPDEST SWAP4 POP PUSH2 0x1C57 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1BEE JUMP JUMPDEST PUSH2 0x1C60 DUP2 PUSH2 0x1C21 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C85 DUP2 DUP5 PUSH2 0x1C32 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1CA0 DUP2 PUSH2 0x1C8D JUMP JUMPDEST DUP2 EQ PUSH2 0x1CAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1CBD DUP2 PUSH2 0x1C97 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CD9 JUMPI PUSH2 0x1CD8 PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1CE7 DUP5 DUP3 DUP6 ADD PUSH2 0x1CAE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D1B DUP3 PUSH2 0x1CF0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1D2B DUP2 PUSH2 0x1D10 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1D46 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1D22 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1D55 DUP2 PUSH2 0x1D10 JUMP JUMPDEST DUP2 EQ PUSH2 0x1D60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1D72 DUP2 PUSH2 0x1D4C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D8F JUMPI PUSH2 0x1D8E PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1D9D DUP6 DUP3 DUP7 ADD PUSH2 0x1D63 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1DAE DUP6 DUP3 DUP7 ADD PUSH2 0x1CAE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1DC1 DUP2 PUSH2 0x1C8D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1DDC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1DB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1E1F DUP3 PUSH2 0x1C21 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1E3E JUMPI PUSH2 0x1E3D PUSH2 0x1DE7 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E51 PUSH2 0x1B03 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E5D DUP3 DUP3 PUSH2 0x1E16 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1E7D JUMPI PUSH2 0x1E7C PUSH2 0x1DE7 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1EA6 PUSH2 0x1EA1 DUP5 PUSH2 0x1E62 JUMP JUMPDEST PUSH2 0x1E47 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x1EC9 JUMPI PUSH2 0x1EC8 PUSH2 0x1E8E JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1EF2 JUMPI DUP1 PUSH2 0x1EDE DUP9 DUP3 PUSH2 0x1CAE JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1ECB JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1F11 JUMPI PUSH2 0x1F10 PUSH2 0x1DE2 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1F21 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1E93 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F41 JUMPI PUSH2 0x1F40 PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1F4F DUP6 DUP3 DUP7 ADD PUSH2 0x1CAE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F70 JUMPI PUSH2 0x1F6F PUSH2 0x1B12 JUMP JUMPDEST JUMPDEST PUSH2 0x1F7C DUP6 DUP3 DUP7 ADD PUSH2 0x1EFC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F9F JUMPI PUSH2 0x1F9E PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1FAD DUP7 DUP3 DUP8 ADD PUSH2 0x1D63 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1FBE DUP7 DUP3 DUP8 ADD PUSH2 0x1D63 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1FCF DUP7 DUP3 DUP8 ADD PUSH2 0x1CAE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2002 DUP2 PUSH2 0x1C8D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2014 DUP4 DUP4 PUSH2 0x1FF9 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2036 DUP2 PUSH2 0x1FD9 JUMP JUMPDEST PUSH2 0x2040 DUP2 DUP5 PUSH2 0x1FE4 JUMP JUMPDEST SWAP3 POP PUSH2 0x204B DUP3 PUSH2 0x1FEF JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x207C JUMPI DUP2 MLOAD PUSH2 0x2063 DUP8 DUP3 PUSH2 0x2008 JUMP JUMPDEST SWAP7 POP PUSH2 0x206E DUP4 PUSH2 0x2020 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x204F JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2099 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x202D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20B5 JUMPI PUSH2 0x20B4 PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20C3 DUP5 DUP3 DUP6 ADD PUSH2 0x1D63 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x20D5 DUP2 PUSH2 0x1B9C JUMP JUMPDEST DUP2 EQ PUSH2 0x20E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x20F2 DUP2 PUSH2 0x20CC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x210F JUMPI PUSH2 0x210E PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x211D DUP6 DUP3 DUP7 ADD PUSH2 0x1D63 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x212E DUP6 DUP3 DUP7 ADD PUSH2 0x20E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x2178 JUMPI PUSH2 0x2177 PUSH2 0x2138 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x2189 DUP3 PUSH2 0x2167 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2199 DUP3 PUSH2 0x217B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21A9 DUP2 PUSH2 0x218E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x21C4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x21A0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x21EA JUMPI PUSH2 0x21E9 PUSH2 0x1DE7 JUMP JUMPDEST JUMPDEST PUSH2 0x21F3 DUP3 PUSH2 0x1C21 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2222 PUSH2 0x221D DUP5 PUSH2 0x21CF JUMP JUMPDEST PUSH2 0x1E47 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x223E JUMPI PUSH2 0x223D PUSH2 0x21CA JUMP JUMPDEST JUMPDEST PUSH2 0x2249 DUP5 DUP3 DUP6 PUSH2 0x2200 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2266 JUMPI PUSH2 0x2265 PUSH2 0x1DE2 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2276 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x220F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2299 JUMPI PUSH2 0x2298 PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x22A7 DUP8 DUP3 DUP9 ADD PUSH2 0x1D63 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x22B8 DUP8 DUP3 DUP9 ADD PUSH2 0x1D63 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x22C9 DUP8 DUP3 DUP9 ADD PUSH2 0x1CAE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x22EA JUMPI PUSH2 0x22E9 PUSH2 0x1B12 JUMP JUMPDEST JUMPDEST PUSH2 0x22F6 DUP8 DUP3 DUP9 ADD PUSH2 0x2251 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2319 JUMPI PUSH2 0x2318 PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2327 DUP6 DUP3 DUP7 ADD PUSH2 0x1D63 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2338 DUP6 DUP3 DUP7 ADD PUSH2 0x1D63 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2389 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x239D JUMPI PUSH2 0x239C PUSH2 0x2342 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23FF PUSH1 0x21 DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x240A DUP3 PUSH2 0x23A3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x242E DUP2 PUSH2 0x23F2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2491 PUSH1 0x3D DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x249C DUP3 PUSH2 0x2435 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x24C0 DUP2 PUSH2 0x2484 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x24DC PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1D22 JUMP JUMPDEST PUSH2 0x24E9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1D22 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x254C PUSH1 0x2D DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x2557 DUP3 PUSH2 0x24F0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x257B DUP2 PUSH2 0x253F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25B8 PUSH1 0x18 DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x25C3 DUP3 PUSH2 0x2582 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x25E7 DUP2 PUSH2 0x25AB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x264A PUSH1 0x29 DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x2655 DUP3 PUSH2 0x25EE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2679 DUP2 PUSH2 0x263D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x26E9 DUP3 PUSH2 0x1C8D JUMP JUMPDEST SWAP2 POP PUSH2 0x26F4 DUP4 PUSH2 0x1C8D JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x2729 JUMPI PUSH2 0x2728 PUSH2 0x26AF JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x273F DUP3 PUSH2 0x1C8D JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x2772 JUMPI PUSH2 0x2771 PUSH2 0x26AF JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2790 DUP2 PUSH2 0x277D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x27B3 DUP2 PUSH2 0x2796 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x27D0 DUP2 PUSH2 0x27B9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x27EF DUP2 PUSH2 0x27D6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x280A PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x2787 JUMP JUMPDEST PUSH2 0x2817 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x27AA JUMP JUMPDEST PUSH2 0x2824 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x27C7 JUMP JUMPDEST PUSH2 0x2831 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x27E6 JUMP JUMPDEST PUSH2 0x283E PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x27E6 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2857 DUP2 PUSH2 0x1C97 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2873 JUMPI PUSH2 0x2872 PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2881 DUP5 DUP3 DUP6 ADD PUSH2 0x2848 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x28C4 DUP3 PUSH2 0x1C8D JUMP JUMPDEST SWAP2 POP PUSH2 0x28CF DUP4 PUSH2 0x1C8D JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x28DF JUMPI PUSH2 0x28DE PUSH2 0x288A JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2946 PUSH1 0x25 DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x2951 DUP3 PUSH2 0x28EA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2975 DUP2 PUSH2 0x2939 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29D8 PUSH1 0x24 DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x29E3 DUP3 PUSH2 0x297C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A07 DUP2 PUSH2 0x29CB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A44 PUSH1 0x19 DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x2A4F DUP3 PUSH2 0x2A0E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A73 DUP2 PUSH2 0x2A37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AD6 PUSH1 0x32 DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x2AE1 DUP3 PUSH2 0x2A7A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B05 DUP2 PUSH2 0x2AC9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B17 DUP3 PUSH2 0x1C8D JUMP JUMPDEST SWAP2 POP PUSH2 0x2B22 DUP4 PUSH2 0x1C8D JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x2B35 JUMPI PUSH2 0x2B34 PUSH2 0x26AF JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B67 DUP3 PUSH2 0x2B40 JUMP JUMPDEST PUSH2 0x2B71 DUP2 DUP6 PUSH2 0x2B4B JUMP JUMPDEST SWAP4 POP PUSH2 0x2B81 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1BEE JUMP JUMPDEST PUSH2 0x2B8A DUP2 PUSH2 0x1C21 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2BAA PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1D22 JUMP JUMPDEST PUSH2 0x2BB7 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1D22 JUMP JUMPDEST PUSH2 0x2BC4 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1DB8 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2BD6 DUP2 DUP5 PUSH2 0x2B5C JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2BF0 DUP2 PUSH2 0x1B43 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C0C JUMPI PUSH2 0x2C0B PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2C1A DUP5 DUP3 DUP6 ADD PUSH2 0x2BE1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C59 PUSH1 0x20 DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x2C64 DUP3 PUSH2 0x2C23 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C88 DUP2 PUSH2 0x2C4C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CC5 PUSH1 0x1C DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x2CD0 DUP3 PUSH2 0x2C8F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CF4 DUP2 PUSH2 0x2CB8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x49 0xC3 0x21 PUSH18 0x3B151E0ADB671B80D665D11C035B381DDEEF 0xCF RETURN 0x24 SWAP9 0xE PUSH19 0x362A88FD64736F6C6343000808003300000000 ","sourceMap":"301:2821:12:-:0;;;1216:408;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1390:113:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1375:16:12;5616:15:0;5599:32;;;;;;;;;;;;5556:80;1464:5:2;1456;:13;;;;;;;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;;;;;;;:::i;:::-;;1390:113;;1481:16:12::2;1436:62;;;;;;;;;;::::0;::::2;1527:14;1508:33;;;;;;;;;;::::0;::::2;1563:7;1551:19;;;;::::0;::::2;1601:16;1580:37;;;;;;;;;;::::0;::::2;1216:408:::0;;;;301:2821;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;88:117:13:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:101::-;881:7;921:18;914:5;910:30;899:41;;845:101;;;:::o;952:120::-;1024:23;1041:5;1024:23;:::i;:::-;1017:5;1014:34;1004:62;;1062:1;1059;1052:12;1004:62;952:120;:::o;1078:141::-;1134:5;1165:6;1159:13;1150:22;;1181:32;1207:5;1181:32;:::i;:::-;1078:141;;;;:::o;1225:77::-;1262:7;1291:5;1280:16;;1225:77;;;:::o;1308:122::-;1381:24;1399:5;1381:24;:::i;:::-;1374:5;1371:35;1361:63;;1420:1;1417;1410:12;1361:63;1308:122;:::o;1436:143::-;1493:5;1524:6;1518:13;1509:22;;1540:33;1567:5;1540:33;:::i;:::-;1436:143;;;;:::o;1585:93::-;1621:7;1661:10;1654:5;1650:22;1639:33;;1585:93;;;:::o;1684:120::-;1756:23;1773:5;1756:23;:::i;:::-;1749:5;1746:34;1736:62;;1794:1;1791;1784:12;1736:62;1684:120;:::o;1810:141::-;1866:5;1897:6;1891:13;1882:22;;1913:32;1939:5;1913:32;:::i;:::-;1810:141;;;;:::o;1957:816::-;2052:6;2060;2068;2076;2125:3;2113:9;2104:7;2100:23;2096:33;2093:120;;;2132:79;;:::i;:::-;2093:120;2252:1;2277:64;2333:7;2324:6;2313:9;2309:22;2277:64;:::i;:::-;2267:74;;2223:128;2390:2;2416:63;2471:7;2462:6;2451:9;2447:22;2416:63;:::i;:::-;2406:73;;2361:128;2528:2;2554:64;2610:7;2601:6;2590:9;2586:22;2554:64;:::i;:::-;2544:74;;2499:129;2667:2;2693:63;2748:7;2739:6;2728:9;2724:22;2693:63;:::i;:::-;2683:73;;2638:128;1957:816;;;;;;;:::o;2779:180::-;2827:77;2824:1;2817:88;2924:4;2921:1;2914:15;2948:4;2945:1;2938:15;2965:320;3009:6;3046:1;3040:4;3036:12;3026:22;;3093:1;3087:4;3083:12;3114:18;3104:81;;3170:4;3162:6;3158:17;3148:27;;3104:81;3232:2;3224:6;3221:14;3201:18;3198:38;3195:84;;;3251:18;;:::i;:::-;3195:84;3016:269;2965:320;;;:::o;301:2821:12:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1097":{"entryPoint":5800,"id":1097,"parameterSlots":4,"returnSlots":0},"@_approve_930":{"entryPoint":3659,"id":930,"parameterSlots":2,"returnSlots":0},"@_beforeTokenTransfer_1084":{"entryPoint":5506,"id":1084,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_1038":{"entryPoint":5806,"id":1038,"parameterSlots":4,"returnSlots":1},"@_exists_599":{"entryPoint":5411,"id":599,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_633":{"entryPoint":3982,"id":633,"parameterSlots":2,"returnSlots":1},"@_mint_754":{"entryPoint":6339,"id":754,"parameterSlots":2,"returnSlots":0},"@_msgSender_1601":{"entryPoint":3651,"id":1601,"parameterSlots":0,"returnSlots":1},"@_ownerOf_581":{"entryPoint":4893,"id":581,"parameterSlots":1,"returnSlots":1},"@_requireMinted_976":{"entryPoint":3576,"id":976,"parameterSlots":1,"returnSlots":0},"@_safeMint_648":{"entryPoint":5476,"id":648,"parameterSlots":2,"returnSlots":0},"@_safeMint_677":{"entryPoint":6213,"id":677,"parameterSlots":3,"returnSlots":0},"@_safeTransfer_568":{"entryPoint":5319,"id":568,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_962":{"entryPoint":4954,"id":962,"parameterSlots":3,"returnSlots":0},"@_transfer_906":{"entryPoint":4131,"id":906,"parameterSlots":3,"returnSlots":0},"@approve_410":{"entryPoint":1438,"id":410,"parameterSlots":2,"returnSlots":0},"@balanceOf_271":{"entryPoint":2222,"id":271,"parameterSlots":1,"returnSlots":1},"@fulfillRandomWords_2827":{"entryPoint":3844,"id":2827,"parameterSlots":2,"returnSlots":0},"@getApproved_428":{"entryPoint":1368,"id":428,"parameterSlots":1,"returnSlots":1},"@getBreedFromModdedRng_2888":{"entryPoint":2625,"id":2888,"parameterSlots":1,"returnSlots":1},"@getChanceArray_2901":{"entryPoint":2044,"id":2901,"parameterSlots":0,"returnSlots":1},"@isApprovedForAll_463":{"entryPoint":3322,"id":463,"parameterSlots":2,"returnSlots":1},"@isContract_1277":{"entryPoint":6304,"id":1277,"parameterSlots":1,"returnSlots":1},"@name_309":{"entryPoint":1222,"id":309,"parameterSlots":0,"returnSlots":1},"@ownerOf_299":{"entryPoint":2087,"id":299,"parameterSlots":1,"returnSlots":1},"@rawFulfillRandomWords_56":{"entryPoint":1724,"id":56,"parameterSlots":2,"returnSlots":0},"@requestNft_2787":{"entryPoint":2851,"id":2787,"parameterSlots":0,"returnSlots":1},"@s_requestIdToSender_2721":{"entryPoint":2574,"id":2721,"parameterSlots":0,"returnSlots":0},"@s_tokenCounter_2723":{"entryPoint":1718,"id":2723,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_509":{"entryPoint":2012,"id":509,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_539":{"entryPoint":3217,"id":539,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_445":{"entryPoint":2552,"id":445,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1809":{"entryPoint":3470,"id":1809,"parameterSlots":1,"returnSlots":1},"@supportsInterface_247":{"entryPoint":996,"id":247,"parameterSlots":1,"returnSlots":1},"@symbol_319":{"entryPoint":2406,"id":319,"parameterSlots":0,"returnSlots":1},"@tokenURI_2910":{"entryPoint":3315,"id":2910,"parameterSlots":1,"returnSlots":1},"@transferFrom_490":{"entryPoint":1916,"id":490,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":7827,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":8719,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":7523,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":7932,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":8419,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":7002,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":11233,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":8785,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":7342,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":10312,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":8351,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":8962,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":8070,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":8831,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":8440,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":7544,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":7023,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":11254,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":7363,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":10333,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":7978,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encodeUpdatedPos_t_uint256_to_t_uint256":{"entryPoint":8200,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":7458,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_uint256_$3_memory_ptr_to_t_array$_t_uint256_$3_memory_ptr_fromStack":{"entryPoint":8237,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":7080,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":10119,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":11100,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_enum$_Breed_$2702_to_t_uint8_fromStack":{"entryPoint":8608,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":7218,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack":{"entryPoint":9535,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":10953,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":10553,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack":{"entryPoint":11448,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":10699,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":10807,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":9789,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack":{"entryPoint":11340,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":9643,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":9202,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack":{"entryPoint":9348,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint16_to_t_uint16_fromStack":{"entryPoint":10183,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256":{"entryPoint":8185,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":7608,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint32_to_t_uint32_fromStack":{"entryPoint":10214,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":10154,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":7473,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":9415,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":11157,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$3_memory_ptr__to_t_array$_t_uint256_$3_memory_ptr__fromStack_reversed":{"entryPoint":8324,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":7095,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed":{"entryPoint":10229,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_enum$_Breed_$2702__to_t_uint8__fromStack_reversed":{"entryPoint":8623,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7275,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9570,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10988,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10588,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11483,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10734,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10842,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9824,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11375,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9678,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9237,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9383,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":7623,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":7751,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":6915,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":7778,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":8655,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_uint256_$3_memory_ptr":{"entryPoint":8175,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_uint256_$3_memory_ptr":{"entryPoint":8153,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":11072,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":7122,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_uint256_$3_memory_ptr":{"entryPoint":8224,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_uint256_$3_memory_ptr_fromStack":{"entryPoint":8164,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":11083,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":7133,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":9950,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":11020,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":7440,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":7068,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":10109,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":6935,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_enum$_Breed_$2702":{"entryPoint":8571,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint16":{"entryPoint":10169,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":7408,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":7309,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":10198,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":10134,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_enum$_Breed_$2702_to_t_uint8":{"entryPoint":8590,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":8704,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":7150,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":9073,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":7702,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":10036,"id":null,"parameterSlots":1,"returnSlots":1},"mod_t_uint256":{"entryPoint":10425,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":9903,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":10378,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":8504,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":9026,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":9856,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":7655,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":7650,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":7822,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":8650,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":6930,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":6925,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":7201,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af":{"entryPoint":9456,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":10874,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":10474,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57":{"entryPoint":11407,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":10620,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":10766,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":9710,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6":{"entryPoint":11299,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":9602,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":9123,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83":{"entryPoint":9269,"id":null,"parameterSlots":1,"returnSlots":0},"validator_assert_t_enum$_Breed_$2702":{"entryPoint":8551,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":7500,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":8396,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":6979,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":7319,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:32890:13","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:13","statements":[{"nodeType":"YulAssignment","src":"57:19:13","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:13","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:13"},"nodeType":"YulFunctionCall","src":"67:9:13"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:13"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:13","type":""}],"src":"7:75:13"},{"body":{"nodeType":"YulBlock","src":"177:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:13"},"nodeType":"YulFunctionCall","src":"187:12:13"},"nodeType":"YulExpressionStatement","src":"187:12:13"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:13"},{"body":{"nodeType":"YulBlock","src":"300:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:13"},"nodeType":"YulFunctionCall","src":"310:12:13"},"nodeType":"YulExpressionStatement","src":"310:12:13"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:13"},{"body":{"nodeType":"YulBlock","src":"378:105:13","statements":[{"nodeType":"YulAssignment","src":"388:89:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:13","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:13"},"nodeType":"YulFunctionCall","src":"399:78:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:13"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:13","type":""}],"src":"334:149:13"},{"body":{"nodeType":"YulBlock","src":"531:78:13","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:13"},"nodeType":"YulFunctionCall","src":"589:12:13"},"nodeType":"YulExpressionStatement","src":"589:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:13"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:13"},"nodeType":"YulFunctionCall","src":"561:23:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:13"},"nodeType":"YulFunctionCall","src":"551:34:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:13"},"nodeType":"YulFunctionCall","src":"544:42:13"},"nodeType":"YulIf","src":"541:62:13"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:13","type":""}],"src":"489:120:13"},{"body":{"nodeType":"YulBlock","src":"666:86:13","statements":[{"nodeType":"YulAssignment","src":"676:29:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:13"},"nodeType":"YulFunctionCall","src":"685:20:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:13"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:13"},"nodeType":"YulFunctionCall","src":"714:32:13"},"nodeType":"YulExpressionStatement","src":"714:32:13"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:13","type":""}],"src":"615:137:13"},{"body":{"nodeType":"YulBlock","src":"823:262:13","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:13"},"nodeType":"YulFunctionCall","src":"871:79:13"},"nodeType":"YulExpressionStatement","src":"871:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:13"},"nodeType":"YulFunctionCall","src":"840:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:13"},"nodeType":"YulFunctionCall","src":"836:32:13"},"nodeType":"YulIf","src":"833:119:13"},{"nodeType":"YulBlock","src":"962:116:13","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:13","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:13"},"nodeType":"YulFunctionCall","src":"1036:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:13"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:13"},"nodeType":"YulFunctionCall","src":"1016:52:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:13"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:13","type":""}],"src":"758:327:13"},{"body":{"nodeType":"YulBlock","src":"1133:48:13","statements":[{"nodeType":"YulAssignment","src":"1143:32:13","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:13"},"nodeType":"YulFunctionCall","src":"1161:13:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:13"},"nodeType":"YulFunctionCall","src":"1154:21:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:13"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:13","type":""}],"src":"1091:90:13"},{"body":{"nodeType":"YulBlock","src":"1246:50:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:13"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:13"},"nodeType":"YulFunctionCall","src":"1268:21:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:13"},"nodeType":"YulFunctionCall","src":"1256:34:13"},"nodeType":"YulExpressionStatement","src":"1256:34:13"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:13","type":""}],"src":"1187:109:13"},{"body":{"nodeType":"YulBlock","src":"1394:118:13","statements":[{"nodeType":"YulAssignment","src":"1404:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:13"},"nodeType":"YulFunctionCall","src":"1412:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:13"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:13"},"nodeType":"YulFunctionCall","src":"1487:17:13"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:13"},"nodeType":"YulFunctionCall","src":"1440:65:13"},"nodeType":"YulExpressionStatement","src":"1440:65:13"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:13","type":""}],"src":"1302:210:13"},{"body":{"nodeType":"YulBlock","src":"1577:40:13","statements":[{"nodeType":"YulAssignment","src":"1588:22:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1604:5:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1598:5:13"},"nodeType":"YulFunctionCall","src":"1598:12:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1588:6:13"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1560:5:13","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1570:6:13","type":""}],"src":"1518:99:13"},{"body":{"nodeType":"YulBlock","src":"1719:73:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1736:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"1741:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1729:6:13"},"nodeType":"YulFunctionCall","src":"1729:19:13"},"nodeType":"YulExpressionStatement","src":"1729:19:13"},{"nodeType":"YulAssignment","src":"1757:29:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1776:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"1781:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:13"},"nodeType":"YulFunctionCall","src":"1772:14:13"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1757:11:13"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1691:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"1696:6:13","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1707:11:13","type":""}],"src":"1623:169:13"},{"body":{"nodeType":"YulBlock","src":"1847:258:13","statements":[{"nodeType":"YulVariableDeclaration","src":"1857:10:13","value":{"kind":"number","nodeType":"YulLiteral","src":"1866:1:13","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1861:1:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"1926:63:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1951:3:13"},{"name":"i","nodeType":"YulIdentifier","src":"1956:1:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1947:3:13"},"nodeType":"YulFunctionCall","src":"1947:11:13"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1970:3:13"},{"name":"i","nodeType":"YulIdentifier","src":"1975:1:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1966:3:13"},"nodeType":"YulFunctionCall","src":"1966:11:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1960:5:13"},"nodeType":"YulFunctionCall","src":"1960:18:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1940:6:13"},"nodeType":"YulFunctionCall","src":"1940:39:13"},"nodeType":"YulExpressionStatement","src":"1940:39:13"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1887:1:13"},{"name":"length","nodeType":"YulIdentifier","src":"1890:6:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1884:2:13"},"nodeType":"YulFunctionCall","src":"1884:13:13"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1898:19:13","statements":[{"nodeType":"YulAssignment","src":"1900:15:13","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1909:1:13"},{"kind":"number","nodeType":"YulLiteral","src":"1912:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1905:3:13"},"nodeType":"YulFunctionCall","src":"1905:10:13"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1900:1:13"}]}]},"pre":{"nodeType":"YulBlock","src":"1880:3:13","statements":[]},"src":"1876:113:13"},{"body":{"nodeType":"YulBlock","src":"2023:76:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2073:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"2078:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2069:3:13"},"nodeType":"YulFunctionCall","src":"2069:16:13"},{"kind":"number","nodeType":"YulLiteral","src":"2087:1:13","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2062:6:13"},"nodeType":"YulFunctionCall","src":"2062:27:13"},"nodeType":"YulExpressionStatement","src":"2062:27:13"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2004:1:13"},{"name":"length","nodeType":"YulIdentifier","src":"2007:6:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2001:2:13"},"nodeType":"YulFunctionCall","src":"2001:13:13"},"nodeType":"YulIf","src":"1998:101:13"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1829:3:13","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1834:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"1839:6:13","type":""}],"src":"1798:307:13"},{"body":{"nodeType":"YulBlock","src":"2159:54:13","statements":[{"nodeType":"YulAssignment","src":"2169:38:13","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2187:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"2194:2:13","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2183:3:13"},"nodeType":"YulFunctionCall","src":"2183:14:13"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2203:2:13","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2199:3:13"},"nodeType":"YulFunctionCall","src":"2199:7:13"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2179:3:13"},"nodeType":"YulFunctionCall","src":"2179:28:13"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2169:6:13"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2142:5:13","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2152:6:13","type":""}],"src":"2111:102:13"},{"body":{"nodeType":"YulBlock","src":"2311:272:13","statements":[{"nodeType":"YulVariableDeclaration","src":"2321:53:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2368:5:13"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2335:32:13"},"nodeType":"YulFunctionCall","src":"2335:39:13"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2325:6:13","type":""}]},{"nodeType":"YulAssignment","src":"2383:78:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2449:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"2454:6:13"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2390:58:13"},"nodeType":"YulFunctionCall","src":"2390:71:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2383:3:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2496:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"2503:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2492:3:13"},"nodeType":"YulFunctionCall","src":"2492:16:13"},{"name":"pos","nodeType":"YulIdentifier","src":"2510:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"2515:6:13"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"2470:21:13"},"nodeType":"YulFunctionCall","src":"2470:52:13"},"nodeType":"YulExpressionStatement","src":"2470:52:13"},{"nodeType":"YulAssignment","src":"2531:46:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2542:3:13"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2569:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2547:21:13"},"nodeType":"YulFunctionCall","src":"2547:29:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2538:3:13"},"nodeType":"YulFunctionCall","src":"2538:39:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2531:3:13"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2292:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2299:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2307:3:13","type":""}],"src":"2219:364:13"},{"body":{"nodeType":"YulBlock","src":"2707:195:13","statements":[{"nodeType":"YulAssignment","src":"2717:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2729:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"2740:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2725:3:13"},"nodeType":"YulFunctionCall","src":"2725:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2717:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2764:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"2775:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2760:3:13"},"nodeType":"YulFunctionCall","src":"2760:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2783:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"2789:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2779:3:13"},"nodeType":"YulFunctionCall","src":"2779:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2753:6:13"},"nodeType":"YulFunctionCall","src":"2753:47:13"},"nodeType":"YulExpressionStatement","src":"2753:47:13"},{"nodeType":"YulAssignment","src":"2809:86:13","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2881:6:13"},{"name":"tail","nodeType":"YulIdentifier","src":"2890:4:13"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2817:63:13"},"nodeType":"YulFunctionCall","src":"2817:78:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2809:4:13"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2679:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2691:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2702:4:13","type":""}],"src":"2589:313:13"},{"body":{"nodeType":"YulBlock","src":"2953:32:13","statements":[{"nodeType":"YulAssignment","src":"2963:16:13","value":{"name":"value","nodeType":"YulIdentifier","src":"2974:5:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2963:7:13"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2935:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2945:7:13","type":""}],"src":"2908:77:13"},{"body":{"nodeType":"YulBlock","src":"3034:79:13","statements":[{"body":{"nodeType":"YulBlock","src":"3091:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3100:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3103:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3093:6:13"},"nodeType":"YulFunctionCall","src":"3093:12:13"},"nodeType":"YulExpressionStatement","src":"3093:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3057:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3082:5:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3064:17:13"},"nodeType":"YulFunctionCall","src":"3064:24:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3054:2:13"},"nodeType":"YulFunctionCall","src":"3054:35:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3047:6:13"},"nodeType":"YulFunctionCall","src":"3047:43:13"},"nodeType":"YulIf","src":"3044:63:13"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3027:5:13","type":""}],"src":"2991:122:13"},{"body":{"nodeType":"YulBlock","src":"3171:87:13","statements":[{"nodeType":"YulAssignment","src":"3181:29:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3203:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3190:12:13"},"nodeType":"YulFunctionCall","src":"3190:20:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3181:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3246:5:13"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3219:26:13"},"nodeType":"YulFunctionCall","src":"3219:33:13"},"nodeType":"YulExpressionStatement","src":"3219:33:13"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3149:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"3157:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3165:5:13","type":""}],"src":"3119:139:13"},{"body":{"nodeType":"YulBlock","src":"3330:263:13","statements":[{"body":{"nodeType":"YulBlock","src":"3376:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3378:77:13"},"nodeType":"YulFunctionCall","src":"3378:79:13"},"nodeType":"YulExpressionStatement","src":"3378:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3351:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"3360:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3347:3:13"},"nodeType":"YulFunctionCall","src":"3347:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"3372:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3343:3:13"},"nodeType":"YulFunctionCall","src":"3343:32:13"},"nodeType":"YulIf","src":"3340:119:13"},{"nodeType":"YulBlock","src":"3469:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"3484:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"3498:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3488:6:13","type":""}]},{"nodeType":"YulAssignment","src":"3513:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3548:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"3559:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3544:3:13"},"nodeType":"YulFunctionCall","src":"3544:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3568:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3523:20:13"},"nodeType":"YulFunctionCall","src":"3523:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3513:6:13"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3300:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3311:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3323:6:13","type":""}],"src":"3264:329:13"},{"body":{"nodeType":"YulBlock","src":"3644:81:13","statements":[{"nodeType":"YulAssignment","src":"3654:65:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3669:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"3676:42:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3665:3:13"},"nodeType":"YulFunctionCall","src":"3665:54:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3654:7:13"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3626:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3636:7:13","type":""}],"src":"3599:126:13"},{"body":{"nodeType":"YulBlock","src":"3776:51:13","statements":[{"nodeType":"YulAssignment","src":"3786:35:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3815:5:13"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3797:17:13"},"nodeType":"YulFunctionCall","src":"3797:24:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3786:7:13"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3758:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3768:7:13","type":""}],"src":"3731:96:13"},{"body":{"nodeType":"YulBlock","src":"3898:53:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3915:3:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3938:5:13"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3920:17:13"},"nodeType":"YulFunctionCall","src":"3920:24:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3908:6:13"},"nodeType":"YulFunctionCall","src":"3908:37:13"},"nodeType":"YulExpressionStatement","src":"3908:37:13"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3886:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3893:3:13","type":""}],"src":"3833:118:13"},{"body":{"nodeType":"YulBlock","src":"4055:124:13","statements":[{"nodeType":"YulAssignment","src":"4065:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4077:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"4088:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4073:3:13"},"nodeType":"YulFunctionCall","src":"4073:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4065:4:13"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4145:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4158:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"4169:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4154:3:13"},"nodeType":"YulFunctionCall","src":"4154:17:13"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4101:43:13"},"nodeType":"YulFunctionCall","src":"4101:71:13"},"nodeType":"YulExpressionStatement","src":"4101:71:13"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4027:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4039:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4050:4:13","type":""}],"src":"3957:222:13"},{"body":{"nodeType":"YulBlock","src":"4228:79:13","statements":[{"body":{"nodeType":"YulBlock","src":"4285:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4294:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4297:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4287:6:13"},"nodeType":"YulFunctionCall","src":"4287:12:13"},"nodeType":"YulExpressionStatement","src":"4287:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4251:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4276:5:13"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4258:17:13"},"nodeType":"YulFunctionCall","src":"4258:24:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4248:2:13"},"nodeType":"YulFunctionCall","src":"4248:35:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4241:6:13"},"nodeType":"YulFunctionCall","src":"4241:43:13"},"nodeType":"YulIf","src":"4238:63:13"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4221:5:13","type":""}],"src":"4185:122:13"},{"body":{"nodeType":"YulBlock","src":"4365:87:13","statements":[{"nodeType":"YulAssignment","src":"4375:29:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4397:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4384:12:13"},"nodeType":"YulFunctionCall","src":"4384:20:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4375:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4440:5:13"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4413:26:13"},"nodeType":"YulFunctionCall","src":"4413:33:13"},"nodeType":"YulExpressionStatement","src":"4413:33:13"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4343:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"4351:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4359:5:13","type":""}],"src":"4313:139:13"},{"body":{"nodeType":"YulBlock","src":"4541:391:13","statements":[{"body":{"nodeType":"YulBlock","src":"4587:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4589:77:13"},"nodeType":"YulFunctionCall","src":"4589:79:13"},"nodeType":"YulExpressionStatement","src":"4589:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4562:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"4571:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4558:3:13"},"nodeType":"YulFunctionCall","src":"4558:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"4583:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4554:3:13"},"nodeType":"YulFunctionCall","src":"4554:32:13"},"nodeType":"YulIf","src":"4551:119:13"},{"nodeType":"YulBlock","src":"4680:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"4695:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"4709:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4699:6:13","type":""}]},{"nodeType":"YulAssignment","src":"4724:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4759:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"4770:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4755:3:13"},"nodeType":"YulFunctionCall","src":"4755:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4779:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4734:20:13"},"nodeType":"YulFunctionCall","src":"4734:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4724:6:13"}]}]},{"nodeType":"YulBlock","src":"4807:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"4822:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"4836:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4826:6:13","type":""}]},{"nodeType":"YulAssignment","src":"4852:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4887:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"4898:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4883:3:13"},"nodeType":"YulFunctionCall","src":"4883:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4907:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4862:20:13"},"nodeType":"YulFunctionCall","src":"4862:53:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4852:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4503:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4514:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4526:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4534:6:13","type":""}],"src":"4458:474:13"},{"body":{"nodeType":"YulBlock","src":"5003:53:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5020:3:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5043:5:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5025:17:13"},"nodeType":"YulFunctionCall","src":"5025:24:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5013:6:13"},"nodeType":"YulFunctionCall","src":"5013:37:13"},"nodeType":"YulExpressionStatement","src":"5013:37:13"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4991:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4998:3:13","type":""}],"src":"4938:118:13"},{"body":{"nodeType":"YulBlock","src":"5160:124:13","statements":[{"nodeType":"YulAssignment","src":"5170:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5182:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"5193:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5178:3:13"},"nodeType":"YulFunctionCall","src":"5178:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5170:4:13"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5250:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5263:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"5274:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5259:3:13"},"nodeType":"YulFunctionCall","src":"5259:17:13"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"5206:43:13"},"nodeType":"YulFunctionCall","src":"5206:71:13"},"nodeType":"YulExpressionStatement","src":"5206:71:13"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5132:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5144:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5155:4:13","type":""}],"src":"5062:222:13"},{"body":{"nodeType":"YulBlock","src":"5379:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5396:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5399:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5389:6:13"},"nodeType":"YulFunctionCall","src":"5389:12:13"},"nodeType":"YulExpressionStatement","src":"5389:12:13"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"5290:117:13"},{"body":{"nodeType":"YulBlock","src":"5441:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5458:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5461:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5451:6:13"},"nodeType":"YulFunctionCall","src":"5451:88:13"},"nodeType":"YulExpressionStatement","src":"5451:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5555:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5558:4:13","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5548:6:13"},"nodeType":"YulFunctionCall","src":"5548:15:13"},"nodeType":"YulExpressionStatement","src":"5548:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5579:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5582:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5572:6:13"},"nodeType":"YulFunctionCall","src":"5572:15:13"},"nodeType":"YulExpressionStatement","src":"5572:15:13"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"5413:180:13"},{"body":{"nodeType":"YulBlock","src":"5642:238:13","statements":[{"nodeType":"YulVariableDeclaration","src":"5652:58:13","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5674:6:13"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"5704:4:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"5682:21:13"},"nodeType":"YulFunctionCall","src":"5682:27:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5670:3:13"},"nodeType":"YulFunctionCall","src":"5670:40:13"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"5656:10:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"5821:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5823:16:13"},"nodeType":"YulFunctionCall","src":"5823:18:13"},"nodeType":"YulExpressionStatement","src":"5823:18:13"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5764:10:13"},{"kind":"number","nodeType":"YulLiteral","src":"5776:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5761:2:13"},"nodeType":"YulFunctionCall","src":"5761:34:13"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5800:10:13"},{"name":"memPtr","nodeType":"YulIdentifier","src":"5812:6:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5797:2:13"},"nodeType":"YulFunctionCall","src":"5797:22:13"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5758:2:13"},"nodeType":"YulFunctionCall","src":"5758:62:13"},"nodeType":"YulIf","src":"5755:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5859:2:13","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5863:10:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5852:6:13"},"nodeType":"YulFunctionCall","src":"5852:22:13"},"nodeType":"YulExpressionStatement","src":"5852:22:13"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"5628:6:13","type":""},{"name":"size","nodeType":"YulTypedName","src":"5636:4:13","type":""}],"src":"5599:281:13"},{"body":{"nodeType":"YulBlock","src":"5927:88:13","statements":[{"nodeType":"YulAssignment","src":"5937:30:13","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"5947:18:13"},"nodeType":"YulFunctionCall","src":"5947:20:13"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5937:6:13"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5996:6:13"},{"name":"size","nodeType":"YulIdentifier","src":"6004:4:13"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"5976:19:13"},"nodeType":"YulFunctionCall","src":"5976:33:13"},"nodeType":"YulExpressionStatement","src":"5976:33:13"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"5911:4:13","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5920:6:13","type":""}],"src":"5886:129:13"},{"body":{"nodeType":"YulBlock","src":"6103:229:13","statements":[{"body":{"nodeType":"YulBlock","src":"6208:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"6210:16:13"},"nodeType":"YulFunctionCall","src":"6210:18:13"},"nodeType":"YulExpressionStatement","src":"6210:18:13"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6180:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"6188:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6177:2:13"},"nodeType":"YulFunctionCall","src":"6177:30:13"},"nodeType":"YulIf","src":"6174:56:13"},{"nodeType":"YulAssignment","src":"6240:25:13","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6252:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"6260:4:13","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6248:3:13"},"nodeType":"YulFunctionCall","src":"6248:17:13"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"6240:4:13"}]},{"nodeType":"YulAssignment","src":"6302:23:13","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"6314:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"6320:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6310:3:13"},"nodeType":"YulFunctionCall","src":"6310:15:13"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"6302:4:13"}]}]},"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"6087:6:13","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"6098:4:13","type":""}],"src":"6021:311:13"},{"body":{"nodeType":"YulBlock","src":"6427:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6444:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6447:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6437:6:13"},"nodeType":"YulFunctionCall","src":"6437:12:13"},"nodeType":"YulExpressionStatement","src":"6437:12:13"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"6338:117:13"},{"body":{"nodeType":"YulBlock","src":"6580:608:13","statements":[{"nodeType":"YulAssignment","src":"6590:90:13","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6672:6:13"}],"functionName":{"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"6615:56:13"},"nodeType":"YulFunctionCall","src":"6615:64:13"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"6599:15:13"},"nodeType":"YulFunctionCall","src":"6599:81:13"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"6590:5:13"}]},{"nodeType":"YulVariableDeclaration","src":"6689:16:13","value":{"name":"array","nodeType":"YulIdentifier","src":"6700:5:13"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"6693:3:13","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6722:5:13"},{"name":"length","nodeType":"YulIdentifier","src":"6729:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6715:6:13"},"nodeType":"YulFunctionCall","src":"6715:21:13"},"nodeType":"YulExpressionStatement","src":"6715:21:13"},{"nodeType":"YulAssignment","src":"6745:23:13","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6756:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"6763:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6752:3:13"},"nodeType":"YulFunctionCall","src":"6752:16:13"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"6745:3:13"}]},{"nodeType":"YulVariableDeclaration","src":"6778:44:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6796:6:13"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6808:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"6816:4:13","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6804:3:13"},"nodeType":"YulFunctionCall","src":"6804:17:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6792:3:13"},"nodeType":"YulFunctionCall","src":"6792:30:13"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"6782:6:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"6850:103:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"6864:77:13"},"nodeType":"YulFunctionCall","src":"6864:79:13"},"nodeType":"YulExpressionStatement","src":"6864:79:13"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"6837:6:13"},{"name":"end","nodeType":"YulIdentifier","src":"6845:3:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6834:2:13"},"nodeType":"YulFunctionCall","src":"6834:15:13"},"nodeType":"YulIf","src":"6831:122:13"},{"body":{"nodeType":"YulBlock","src":"7038:144:13","statements":[{"nodeType":"YulVariableDeclaration","src":"7053:21:13","value":{"name":"src","nodeType":"YulIdentifier","src":"7071:3:13"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"7057:10:13","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7095:3:13"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"7121:10:13"},{"name":"end","nodeType":"YulIdentifier","src":"7133:3:13"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7100:20:13"},"nodeType":"YulFunctionCall","src":"7100:37:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7088:6:13"},"nodeType":"YulFunctionCall","src":"7088:50:13"},"nodeType":"YulExpressionStatement","src":"7088:50:13"},{"nodeType":"YulAssignment","src":"7151:21:13","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7162:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"7167:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7158:3:13"},"nodeType":"YulFunctionCall","src":"7158:14:13"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"7151:3:13"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6991:3:13"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"6996:6:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6988:2:13"},"nodeType":"YulFunctionCall","src":"6988:15:13"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7004:25:13","statements":[{"nodeType":"YulAssignment","src":"7006:21:13","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7017:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"7022:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7013:3:13"},"nodeType":"YulFunctionCall","src":"7013:14:13"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"7006:3:13"}]}]},"pre":{"nodeType":"YulBlock","src":"6966:21:13","statements":[{"nodeType":"YulVariableDeclaration","src":"6968:17:13","value":{"name":"offset","nodeType":"YulIdentifier","src":"6979:6:13"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"6972:3:13","type":""}]}]},"src":"6962:220:13"}]},"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6550:6:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"6558:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"6566:3:13","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"6574:5:13","type":""}],"src":"6478:710:13"},{"body":{"nodeType":"YulBlock","src":"7288:293:13","statements":[{"body":{"nodeType":"YulBlock","src":"7337:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"7339:77:13"},"nodeType":"YulFunctionCall","src":"7339:79:13"},"nodeType":"YulExpressionStatement","src":"7339:79:13"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7316:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"7324:4:13","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7312:3:13"},"nodeType":"YulFunctionCall","src":"7312:17:13"},{"name":"end","nodeType":"YulIdentifier","src":"7331:3:13"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7308:3:13"},"nodeType":"YulFunctionCall","src":"7308:27:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7301:6:13"},"nodeType":"YulFunctionCall","src":"7301:35:13"},"nodeType":"YulIf","src":"7298:122:13"},{"nodeType":"YulVariableDeclaration","src":"7429:34:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7456:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7443:12:13"},"nodeType":"YulFunctionCall","src":"7443:20:13"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7433:6:13","type":""}]},{"nodeType":"YulAssignment","src":"7472:103:13","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7548:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"7556:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7544:3:13"},"nodeType":"YulFunctionCall","src":"7544:17:13"},{"name":"length","nodeType":"YulIdentifier","src":"7563:6:13"},{"name":"end","nodeType":"YulIdentifier","src":"7571:3:13"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7481:62:13"},"nodeType":"YulFunctionCall","src":"7481:94:13"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"7472:5:13"}]}]},"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7266:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"7274:3:13","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"7282:5:13","type":""}],"src":"7211:370:13"},{"body":{"nodeType":"YulBlock","src":"7695:576:13","statements":[{"body":{"nodeType":"YulBlock","src":"7741:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7743:77:13"},"nodeType":"YulFunctionCall","src":"7743:79:13"},"nodeType":"YulExpressionStatement","src":"7743:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7716:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"7725:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7712:3:13"},"nodeType":"YulFunctionCall","src":"7712:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"7737:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7708:3:13"},"nodeType":"YulFunctionCall","src":"7708:32:13"},"nodeType":"YulIf","src":"7705:119:13"},{"nodeType":"YulBlock","src":"7834:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"7849:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"7863:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7853:6:13","type":""}]},{"nodeType":"YulAssignment","src":"7878:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7913:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"7924:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7909:3:13"},"nodeType":"YulFunctionCall","src":"7909:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7933:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7888:20:13"},"nodeType":"YulFunctionCall","src":"7888:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7878:6:13"}]}]},{"nodeType":"YulBlock","src":"7961:303:13","statements":[{"nodeType":"YulVariableDeclaration","src":"7976:46:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8007:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"8018:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8003:3:13"},"nodeType":"YulFunctionCall","src":"8003:18:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7990:12:13"},"nodeType":"YulFunctionCall","src":"7990:32:13"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7980:6:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"8069:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"8071:77:13"},"nodeType":"YulFunctionCall","src":"8071:79:13"},"nodeType":"YulExpressionStatement","src":"8071:79:13"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8041:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"8049:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8038:2:13"},"nodeType":"YulFunctionCall","src":"8038:30:13"},"nodeType":"YulIf","src":"8035:117:13"},{"nodeType":"YulAssignment","src":"8166:88:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8226:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"8237:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8222:3:13"},"nodeType":"YulFunctionCall","src":"8222:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8246:7:13"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"8176:45:13"},"nodeType":"YulFunctionCall","src":"8176:78:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8166:6:13"}]}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7657:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7668:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7680:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7688:6:13","type":""}],"src":"7587:684:13"},{"body":{"nodeType":"YulBlock","src":"8377:519:13","statements":[{"body":{"nodeType":"YulBlock","src":"8423:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8425:77:13"},"nodeType":"YulFunctionCall","src":"8425:79:13"},"nodeType":"YulExpressionStatement","src":"8425:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8398:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"8407:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8394:3:13"},"nodeType":"YulFunctionCall","src":"8394:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"8419:2:13","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8390:3:13"},"nodeType":"YulFunctionCall","src":"8390:32:13"},"nodeType":"YulIf","src":"8387:119:13"},{"nodeType":"YulBlock","src":"8516:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"8531:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"8545:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8535:6:13","type":""}]},{"nodeType":"YulAssignment","src":"8560:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8595:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"8606:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8591:3:13"},"nodeType":"YulFunctionCall","src":"8591:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8615:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"8570:20:13"},"nodeType":"YulFunctionCall","src":"8570:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8560:6:13"}]}]},{"nodeType":"YulBlock","src":"8643:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"8658:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"8672:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8662:6:13","type":""}]},{"nodeType":"YulAssignment","src":"8688:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8723:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"8734:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8719:3:13"},"nodeType":"YulFunctionCall","src":"8719:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8743:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"8698:20:13"},"nodeType":"YulFunctionCall","src":"8698:53:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8688:6:13"}]}]},{"nodeType":"YulBlock","src":"8771:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"8786:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"8800:2:13","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8790:6:13","type":""}]},{"nodeType":"YulAssignment","src":"8816:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8851:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"8862:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8847:3:13"},"nodeType":"YulFunctionCall","src":"8847:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8871:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"8826:20:13"},"nodeType":"YulFunctionCall","src":"8826:53:13"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8816:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8331:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8342:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8354:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8362:6:13","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8370:6:13","type":""}],"src":"8277:619:13"},{"body":{"nodeType":"YulBlock","src":"8974:32:13","statements":[{"nodeType":"YulAssignment","src":"8985:14:13","value":{"kind":"number","nodeType":"YulLiteral","src":"8995:4:13","type":"","value":"0x03"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8985:6:13"}]}]},"name":"array_length_t_array$_t_uint256_$3_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8957:5:13","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"8967:6:13","type":""}],"src":"8902:104:13"},{"body":{"nodeType":"YulBlock","src":"9121:34:13","statements":[{"nodeType":"YulAssignment","src":"9131:18:13","value":{"name":"pos","nodeType":"YulIdentifier","src":"9146:3:13"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"9131:11:13"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_uint256_$3_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9093:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"9098:6:13","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"9109:11:13","type":""}],"src":"9012:143:13"},{"body":{"nodeType":"YulBlock","src":"9231:28:13","statements":[{"nodeType":"YulAssignment","src":"9241:11:13","value":{"name":"ptr","nodeType":"YulIdentifier","src":"9249:3:13"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"9241:4:13"}]}]},"name":"array_dataslot_t_array$_t_uint256_$3_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"9218:3:13","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"9226:4:13","type":""}],"src":"9161:98:13"},{"body":{"nodeType":"YulBlock","src":"9320:53:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9337:3:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9360:5:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9342:17:13"},"nodeType":"YulFunctionCall","src":"9342:24:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9330:6:13"},"nodeType":"YulFunctionCall","src":"9330:37:13"},"nodeType":"YulExpressionStatement","src":"9330:37:13"}]},"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9308:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9315:3:13","type":""}],"src":"9265:108:13"},{"body":{"nodeType":"YulBlock","src":"9459:99:13","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9503:6:13"},{"name":"pos","nodeType":"YulIdentifier","src":"9511:3:13"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"9469:33:13"},"nodeType":"YulFunctionCall","src":"9469:46:13"},"nodeType":"YulExpressionStatement","src":"9469:46:13"},{"nodeType":"YulAssignment","src":"9524:28:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9542:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"9547:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9538:3:13"},"nodeType":"YulFunctionCall","src":"9538:14:13"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"9524:10:13"}]}]},"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"9432:6:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9440:3:13","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"9448:10:13","type":""}],"src":"9379:179:13"},{"body":{"nodeType":"YulBlock","src":"9637:38:13","statements":[{"nodeType":"YulAssignment","src":"9647:22:13","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"9659:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"9664:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9655:3:13"},"nodeType":"YulFunctionCall","src":"9655:14:13"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"9647:4:13"}]}]},"name":"array_nextElement_t_array$_t_uint256_$3_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"9624:3:13","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"9632:4:13","type":""}],"src":"9564:111:13"},{"body":{"nodeType":"YulBlock","src":"9825:582:13","statements":[{"nodeType":"YulVariableDeclaration","src":"9835:66:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9895:5:13"}],"functionName":{"name":"array_length_t_array$_t_uint256_$3_memory_ptr","nodeType":"YulIdentifier","src":"9849:45:13"},"nodeType":"YulFunctionCall","src":"9849:52:13"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9839:6:13","type":""}]},{"nodeType":"YulAssignment","src":"9910:91:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9989:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"9994:6:13"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_uint256_$3_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9917:71:13"},"nodeType":"YulFunctionCall","src":"9917:84:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9910:3:13"}]},{"nodeType":"YulVariableDeclaration","src":"10010:69:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10073:5:13"}],"functionName":{"name":"array_dataslot_t_array$_t_uint256_$3_memory_ptr","nodeType":"YulIdentifier","src":"10025:47:13"},"nodeType":"YulFunctionCall","src":"10025:54:13"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"10014:7:13","type":""}]},{"nodeType":"YulVariableDeclaration","src":"10088:21:13","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"10102:7:13"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"10092:6:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"10178:222:13","statements":[{"nodeType":"YulVariableDeclaration","src":"10192:34:13","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"10219:6:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10213:5:13"},"nodeType":"YulFunctionCall","src":"10213:13:13"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"10196:13:13","type":""}]},{"nodeType":"YulAssignment","src":"10239:70:13","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"10290:13:13"},{"name":"pos","nodeType":"YulIdentifier","src":"10305:3:13"}],"functionName":{"name":"abi_encodeUpdatedPos_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"10246:43:13"},"nodeType":"YulFunctionCall","src":"10246:63:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10239:3:13"}]},{"nodeType":"YulAssignment","src":"10322:68:13","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"10383:6:13"}],"functionName":{"name":"array_nextElement_t_array$_t_uint256_$3_memory_ptr","nodeType":"YulIdentifier","src":"10332:50:13"},"nodeType":"YulFunctionCall","src":"10332:58:13"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"10322:6:13"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10140:1:13"},{"name":"length","nodeType":"YulIdentifier","src":"10143:6:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10137:2:13"},"nodeType":"YulFunctionCall","src":"10137:13:13"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10151:18:13","statements":[{"nodeType":"YulAssignment","src":"10153:14:13","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10162:1:13"},{"kind":"number","nodeType":"YulLiteral","src":"10165:1:13","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10158:3:13"},"nodeType":"YulFunctionCall","src":"10158:9:13"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"10153:1:13"}]}]},"pre":{"nodeType":"YulBlock","src":"10122:14:13","statements":[{"nodeType":"YulVariableDeclaration","src":"10124:10:13","value":{"kind":"number","nodeType":"YulLiteral","src":"10133:1:13","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"10128:1:13","type":""}]}]},"src":"10118:282:13"}]},"name":"abi_encode_t_array$_t_uint256_$3_memory_ptr_to_t_array$_t_uint256_$3_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9812:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9819:3:13","type":""}],"src":"9713:694:13"},{"body":{"nodeType":"YulBlock","src":"10557:170:13","statements":[{"nodeType":"YulAssignment","src":"10567:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10579:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"10590:2:13","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10575:3:13"},"nodeType":"YulFunctionCall","src":"10575:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10567:4:13"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10693:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10706:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"10717:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10702:3:13"},"nodeType":"YulFunctionCall","src":"10702:17:13"}],"functionName":{"name":"abi_encode_t_array$_t_uint256_$3_memory_ptr_to_t_array$_t_uint256_$3_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10603:89:13"},"nodeType":"YulFunctionCall","src":"10603:117:13"},"nodeType":"YulExpressionStatement","src":"10603:117:13"}]},"name":"abi_encode_tuple_t_array$_t_uint256_$3_memory_ptr__to_t_array$_t_uint256_$3_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10529:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10541:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10552:4:13","type":""}],"src":"10413:314:13"},{"body":{"nodeType":"YulBlock","src":"10799:263:13","statements":[{"body":{"nodeType":"YulBlock","src":"10845:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10847:77:13"},"nodeType":"YulFunctionCall","src":"10847:79:13"},"nodeType":"YulExpressionStatement","src":"10847:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10820:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"10829:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10816:3:13"},"nodeType":"YulFunctionCall","src":"10816:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"10841:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10812:3:13"},"nodeType":"YulFunctionCall","src":"10812:32:13"},"nodeType":"YulIf","src":"10809:119:13"},{"nodeType":"YulBlock","src":"10938:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"10953:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"10967:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10957:6:13","type":""}]},{"nodeType":"YulAssignment","src":"10982:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11017:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"11028:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11013:3:13"},"nodeType":"YulFunctionCall","src":"11013:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11037:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10992:20:13"},"nodeType":"YulFunctionCall","src":"10992:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10982:6:13"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10769:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10780:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10792:6:13","type":""}],"src":"10733:329:13"},{"body":{"nodeType":"YulBlock","src":"11108:76:13","statements":[{"body":{"nodeType":"YulBlock","src":"11162:16:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11171:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11174:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11164:6:13"},"nodeType":"YulFunctionCall","src":"11164:12:13"},"nodeType":"YulExpressionStatement","src":"11164:12:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11131:5:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11153:5:13"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"11138:14:13"},"nodeType":"YulFunctionCall","src":"11138:21:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11128:2:13"},"nodeType":"YulFunctionCall","src":"11128:32:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11121:6:13"},"nodeType":"YulFunctionCall","src":"11121:40:13"},"nodeType":"YulIf","src":"11118:60:13"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11101:5:13","type":""}],"src":"11068:116:13"},{"body":{"nodeType":"YulBlock","src":"11239:84:13","statements":[{"nodeType":"YulAssignment","src":"11249:29:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"11271:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11258:12:13"},"nodeType":"YulFunctionCall","src":"11258:20:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"11249:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11311:5:13"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"11287:23:13"},"nodeType":"YulFunctionCall","src":"11287:30:13"},"nodeType":"YulExpressionStatement","src":"11287:30:13"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"11217:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"11225:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"11233:5:13","type":""}],"src":"11190:133:13"},{"body":{"nodeType":"YulBlock","src":"11409:388:13","statements":[{"body":{"nodeType":"YulBlock","src":"11455:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11457:77:13"},"nodeType":"YulFunctionCall","src":"11457:79:13"},"nodeType":"YulExpressionStatement","src":"11457:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11430:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"11439:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11426:3:13"},"nodeType":"YulFunctionCall","src":"11426:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"11451:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11422:3:13"},"nodeType":"YulFunctionCall","src":"11422:32:13"},"nodeType":"YulIf","src":"11419:119:13"},{"nodeType":"YulBlock","src":"11548:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"11563:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"11577:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11567:6:13","type":""}]},{"nodeType":"YulAssignment","src":"11592:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11627:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"11638:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11623:3:13"},"nodeType":"YulFunctionCall","src":"11623:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11647:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11602:20:13"},"nodeType":"YulFunctionCall","src":"11602:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11592:6:13"}]}]},{"nodeType":"YulBlock","src":"11675:115:13","statements":[{"nodeType":"YulVariableDeclaration","src":"11690:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"11704:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11694:6:13","type":""}]},{"nodeType":"YulAssignment","src":"11720:60:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11752:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"11763:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11748:3:13"},"nodeType":"YulFunctionCall","src":"11748:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11772:7:13"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"11730:17:13"},"nodeType":"YulFunctionCall","src":"11730:50:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11720:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11371:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11382:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11394:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11402:6:13","type":""}],"src":"11329:468:13"},{"body":{"nodeType":"YulBlock","src":"11831:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11848:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11851:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11841:6:13"},"nodeType":"YulFunctionCall","src":"11841:88:13"},"nodeType":"YulExpressionStatement","src":"11841:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11945:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11948:4:13","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11938:6:13"},"nodeType":"YulFunctionCall","src":"11938:15:13"},"nodeType":"YulExpressionStatement","src":"11938:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11969:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11972:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11962:6:13"},"nodeType":"YulFunctionCall","src":"11962:15:13"},"nodeType":"YulExpressionStatement","src":"11962:15:13"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"11803:180:13"},{"body":{"nodeType":"YulBlock","src":"12042:62:13","statements":[{"body":{"nodeType":"YulBlock","src":"12076:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x21","nodeType":"YulIdentifier","src":"12078:16:13"},"nodeType":"YulFunctionCall","src":"12078:18:13"},"nodeType":"YulExpressionStatement","src":"12078:18:13"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12065:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"12072:1:13","type":"","value":"3"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12062:2:13"},"nodeType":"YulFunctionCall","src":"12062:12:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12055:6:13"},"nodeType":"YulFunctionCall","src":"12055:20:13"},"nodeType":"YulIf","src":"12052:46:13"}]},"name":"validator_assert_t_enum$_Breed_$2702","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12035:5:13","type":""}],"src":"11989:115:13"},{"body":{"nodeType":"YulBlock","src":"12165:76:13","statements":[{"nodeType":"YulAssignment","src":"12175:16:13","value":{"name":"value","nodeType":"YulIdentifier","src":"12186:5:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"12175:7:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12229:5:13"}],"functionName":{"name":"validator_assert_t_enum$_Breed_$2702","nodeType":"YulIdentifier","src":"12192:36:13"},"nodeType":"YulFunctionCall","src":"12192:43:13"},"nodeType":"YulExpressionStatement","src":"12192:43:13"}]},"name":"cleanup_t_enum$_Breed_$2702","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12147:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"12157:7:13","type":""}],"src":"12110:131:13"},{"body":{"nodeType":"YulBlock","src":"12315:63:13","statements":[{"nodeType":"YulAssignment","src":"12325:47:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12366:5:13"}],"functionName":{"name":"cleanup_t_enum$_Breed_$2702","nodeType":"YulIdentifier","src":"12338:27:13"},"nodeType":"YulFunctionCall","src":"12338:34:13"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"12325:9:13"}]}]},"name":"convert_t_enum$_Breed_$2702_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12295:5:13","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"12305:9:13","type":""}],"src":"12247:131:13"},{"body":{"nodeType":"YulBlock","src":"12457:74:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12474:3:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12518:5:13"}],"functionName":{"name":"convert_t_enum$_Breed_$2702_to_t_uint8","nodeType":"YulIdentifier","src":"12479:38:13"},"nodeType":"YulFunctionCall","src":"12479:45:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12467:6:13"},"nodeType":"YulFunctionCall","src":"12467:58:13"},"nodeType":"YulExpressionStatement","src":"12467:58:13"}]},"name":"abi_encode_t_enum$_Breed_$2702_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12445:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12452:3:13","type":""}],"src":"12384:147:13"},{"body":{"nodeType":"YulBlock","src":"12643:132:13","statements":[{"nodeType":"YulAssignment","src":"12653:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12665:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"12676:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12661:3:13"},"nodeType":"YulFunctionCall","src":"12661:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12653:4:13"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12741:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12754:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"12765:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12750:3:13"},"nodeType":"YulFunctionCall","src":"12750:17:13"}],"functionName":{"name":"abi_encode_t_enum$_Breed_$2702_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"12689:51:13"},"nodeType":"YulFunctionCall","src":"12689:79:13"},"nodeType":"YulExpressionStatement","src":"12689:79:13"}]},"name":"abi_encode_tuple_t_enum$_Breed_$2702__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12615:9:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12627:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12638:4:13","type":""}],"src":"12537:238:13"},{"body":{"nodeType":"YulBlock","src":"12870:28:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12887:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12890:1:13","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12880:6:13"},"nodeType":"YulFunctionCall","src":"12880:12:13"},"nodeType":"YulExpressionStatement","src":"12880:12:13"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"12781:117:13"},{"body":{"nodeType":"YulBlock","src":"12970:241:13","statements":[{"body":{"nodeType":"YulBlock","src":"13075:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"13077:16:13"},"nodeType":"YulFunctionCall","src":"13077:18:13"},"nodeType":"YulExpressionStatement","src":"13077:18:13"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13047:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"13055:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13044:2:13"},"nodeType":"YulFunctionCall","src":"13044:30:13"},"nodeType":"YulIf","src":"13041:56:13"},{"nodeType":"YulAssignment","src":"13107:37:13","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13137:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"13115:21:13"},"nodeType":"YulFunctionCall","src":"13115:29:13"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"13107:4:13"}]},{"nodeType":"YulAssignment","src":"13181:23:13","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"13193:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"13199:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13189:3:13"},"nodeType":"YulFunctionCall","src":"13189:15:13"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"13181:4:13"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"12954:6:13","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"12965:4:13","type":""}],"src":"12904:307:13"},{"body":{"nodeType":"YulBlock","src":"13268:103:13","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"13291:3:13"},{"name":"src","nodeType":"YulIdentifier","src":"13296:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"13301:6:13"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"13278:12:13"},"nodeType":"YulFunctionCall","src":"13278:30:13"},"nodeType":"YulExpressionStatement","src":"13278:30:13"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"13349:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"13354:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13345:3:13"},"nodeType":"YulFunctionCall","src":"13345:16:13"},{"kind":"number","nodeType":"YulLiteral","src":"13363:1:13","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13338:6:13"},"nodeType":"YulFunctionCall","src":"13338:27:13"},"nodeType":"YulExpressionStatement","src":"13338:27:13"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"13250:3:13","type":""},{"name":"dst","nodeType":"YulTypedName","src":"13255:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"13260:6:13","type":""}],"src":"13217:154:13"},{"body":{"nodeType":"YulBlock","src":"13460:327:13","statements":[{"nodeType":"YulAssignment","src":"13470:74:13","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13536:6:13"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"13495:40:13"},"nodeType":"YulFunctionCall","src":"13495:48:13"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"13479:15:13"},"nodeType":"YulFunctionCall","src":"13479:65:13"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"13470:5:13"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"13560:5:13"},{"name":"length","nodeType":"YulIdentifier","src":"13567:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13553:6:13"},"nodeType":"YulFunctionCall","src":"13553:21:13"},"nodeType":"YulExpressionStatement","src":"13553:21:13"},{"nodeType":"YulVariableDeclaration","src":"13583:27:13","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"13598:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"13605:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13594:3:13"},"nodeType":"YulFunctionCall","src":"13594:16:13"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"13587:3:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"13648:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"13650:77:13"},"nodeType":"YulFunctionCall","src":"13650:79:13"},"nodeType":"YulExpressionStatement","src":"13650:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13629:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"13634:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13625:3:13"},"nodeType":"YulFunctionCall","src":"13625:16:13"},{"name":"end","nodeType":"YulIdentifier","src":"13643:3:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13622:2:13"},"nodeType":"YulFunctionCall","src":"13622:25:13"},"nodeType":"YulIf","src":"13619:112:13"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13764:3:13"},{"name":"dst","nodeType":"YulIdentifier","src":"13769:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"13774:6:13"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"13740:23:13"},"nodeType":"YulFunctionCall","src":"13740:41:13"},"nodeType":"YulExpressionStatement","src":"13740:41:13"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"13433:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"13438:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"13446:3:13","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"13454:5:13","type":""}],"src":"13377:410:13"},{"body":{"nodeType":"YulBlock","src":"13867:277:13","statements":[{"body":{"nodeType":"YulBlock","src":"13916:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"13918:77:13"},"nodeType":"YulFunctionCall","src":"13918:79:13"},"nodeType":"YulExpressionStatement","src":"13918:79:13"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13895:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"13903:4:13","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13891:3:13"},"nodeType":"YulFunctionCall","src":"13891:17:13"},{"name":"end","nodeType":"YulIdentifier","src":"13910:3:13"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13887:3:13"},"nodeType":"YulFunctionCall","src":"13887:27:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13880:6:13"},"nodeType":"YulFunctionCall","src":"13880:35:13"},"nodeType":"YulIf","src":"13877:122:13"},{"nodeType":"YulVariableDeclaration","src":"14008:34:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14035:6:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14022:12:13"},"nodeType":"YulFunctionCall","src":"14022:20:13"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"14012:6:13","type":""}]},{"nodeType":"YulAssignment","src":"14051:87:13","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14111:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"14119:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14107:3:13"},"nodeType":"YulFunctionCall","src":"14107:17:13"},{"name":"length","nodeType":"YulIdentifier","src":"14126:6:13"},{"name":"end","nodeType":"YulIdentifier","src":"14134:3:13"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"14060:46:13"},"nodeType":"YulFunctionCall","src":"14060:78:13"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"14051:5:13"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"13845:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"13853:3:13","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"13861:5:13","type":""}],"src":"13806:338:13"},{"body":{"nodeType":"YulBlock","src":"14276:817:13","statements":[{"body":{"nodeType":"YulBlock","src":"14323:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"14325:77:13"},"nodeType":"YulFunctionCall","src":"14325:79:13"},"nodeType":"YulExpressionStatement","src":"14325:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14297:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"14306:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14293:3:13"},"nodeType":"YulFunctionCall","src":"14293:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"14318:3:13","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14289:3:13"},"nodeType":"YulFunctionCall","src":"14289:33:13"},"nodeType":"YulIf","src":"14286:120:13"},{"nodeType":"YulBlock","src":"14416:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"14431:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"14445:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14435:6:13","type":""}]},{"nodeType":"YulAssignment","src":"14460:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14495:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"14506:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14491:3:13"},"nodeType":"YulFunctionCall","src":"14491:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14515:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"14470:20:13"},"nodeType":"YulFunctionCall","src":"14470:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14460:6:13"}]}]},{"nodeType":"YulBlock","src":"14543:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"14558:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"14572:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14562:6:13","type":""}]},{"nodeType":"YulAssignment","src":"14588:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14623:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"14634:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14619:3:13"},"nodeType":"YulFunctionCall","src":"14619:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14643:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"14598:20:13"},"nodeType":"YulFunctionCall","src":"14598:53:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"14588:6:13"}]}]},{"nodeType":"YulBlock","src":"14671:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"14686:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"14700:2:13","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14690:6:13","type":""}]},{"nodeType":"YulAssignment","src":"14716:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14751:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"14762:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14747:3:13"},"nodeType":"YulFunctionCall","src":"14747:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14771:7:13"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"14726:20:13"},"nodeType":"YulFunctionCall","src":"14726:53:13"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"14716:6:13"}]}]},{"nodeType":"YulBlock","src":"14799:287:13","statements":[{"nodeType":"YulVariableDeclaration","src":"14814:46:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14845:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"14856:2:13","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14841:3:13"},"nodeType":"YulFunctionCall","src":"14841:18:13"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14828:12:13"},"nodeType":"YulFunctionCall","src":"14828:32:13"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14818:6:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"14907:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"14909:77:13"},"nodeType":"YulFunctionCall","src":"14909:79:13"},"nodeType":"YulExpressionStatement","src":"14909:79:13"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14879:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"14887:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14876:2:13"},"nodeType":"YulFunctionCall","src":"14876:30:13"},"nodeType":"YulIf","src":"14873:117:13"},{"nodeType":"YulAssignment","src":"15004:72:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15048:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"15059:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15044:3:13"},"nodeType":"YulFunctionCall","src":"15044:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15068:7:13"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"15014:29:13"},"nodeType":"YulFunctionCall","src":"15014:62:13"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"15004:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14222:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14233:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14245:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14253:6:13","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14261:6:13","type":""},{"name":"value3","nodeType":"YulTypedName","src":"14269:6:13","type":""}],"src":"14150:943:13"},{"body":{"nodeType":"YulBlock","src":"15182:391:13","statements":[{"body":{"nodeType":"YulBlock","src":"15228:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"15230:77:13"},"nodeType":"YulFunctionCall","src":"15230:79:13"},"nodeType":"YulExpressionStatement","src":"15230:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15203:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"15212:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15199:3:13"},"nodeType":"YulFunctionCall","src":"15199:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"15224:2:13","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15195:3:13"},"nodeType":"YulFunctionCall","src":"15195:32:13"},"nodeType":"YulIf","src":"15192:119:13"},{"nodeType":"YulBlock","src":"15321:117:13","statements":[{"nodeType":"YulVariableDeclaration","src":"15336:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"15350:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15340:6:13","type":""}]},{"nodeType":"YulAssignment","src":"15365:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15400:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"15411:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15396:3:13"},"nodeType":"YulFunctionCall","src":"15396:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15420:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"15375:20:13"},"nodeType":"YulFunctionCall","src":"15375:53:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15365:6:13"}]}]},{"nodeType":"YulBlock","src":"15448:118:13","statements":[{"nodeType":"YulVariableDeclaration","src":"15463:16:13","value":{"kind":"number","nodeType":"YulLiteral","src":"15477:2:13","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15467:6:13","type":""}]},{"nodeType":"YulAssignment","src":"15493:63:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15528:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"15539:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15524:3:13"},"nodeType":"YulFunctionCall","src":"15524:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15548:7:13"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"15503:20:13"},"nodeType":"YulFunctionCall","src":"15503:53:13"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"15493:6:13"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15144:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15155:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15167:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15175:6:13","type":""}],"src":"15099:474:13"},{"body":{"nodeType":"YulBlock","src":"15607:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15624:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15627:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15617:6:13"},"nodeType":"YulFunctionCall","src":"15617:88:13"},"nodeType":"YulExpressionStatement","src":"15617:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15721:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15724:4:13","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15714:6:13"},"nodeType":"YulFunctionCall","src":"15714:15:13"},"nodeType":"YulExpressionStatement","src":"15714:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15745:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15748:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15738:6:13"},"nodeType":"YulFunctionCall","src":"15738:15:13"},"nodeType":"YulExpressionStatement","src":"15738:15:13"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"15579:180:13"},{"body":{"nodeType":"YulBlock","src":"15816:269:13","statements":[{"nodeType":"YulAssignment","src":"15826:22:13","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15840:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"15846:1:13","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"15836:3:13"},"nodeType":"YulFunctionCall","src":"15836:12:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"15826:6:13"}]},{"nodeType":"YulVariableDeclaration","src":"15857:38:13","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"15887:4:13"},{"kind":"number","nodeType":"YulLiteral","src":"15893:1:13","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15883:3:13"},"nodeType":"YulFunctionCall","src":"15883:12:13"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"15861:18:13","type":""}]},{"body":{"nodeType":"YulBlock","src":"15934:51:13","statements":[{"nodeType":"YulAssignment","src":"15948:27:13","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"15962:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"15970:4:13","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15958:3:13"},"nodeType":"YulFunctionCall","src":"15958:17:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"15948:6:13"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"15914:18:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15907:6:13"},"nodeType":"YulFunctionCall","src":"15907:26:13"},"nodeType":"YulIf","src":"15904:81:13"},{"body":{"nodeType":"YulBlock","src":"16037:42:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"16051:16:13"},"nodeType":"YulFunctionCall","src":"16051:18:13"},"nodeType":"YulExpressionStatement","src":"16051:18:13"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"16001:18:13"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16024:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"16032:2:13","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16021:2:13"},"nodeType":"YulFunctionCall","src":"16021:14:13"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15998:2:13"},"nodeType":"YulFunctionCall","src":"15998:38:13"},"nodeType":"YulIf","src":"15995:84:13"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"15800:4:13","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"15809:6:13","type":""}],"src":"15765:320:13"},{"body":{"nodeType":"YulBlock","src":"16197:114:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16219:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"16227:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16215:3:13"},"nodeType":"YulFunctionCall","src":"16215:14:13"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"16231:34:13","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16208:6:13"},"nodeType":"YulFunctionCall","src":"16208:58:13"},"nodeType":"YulExpressionStatement","src":"16208:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16287:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"16295:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16283:3:13"},"nodeType":"YulFunctionCall","src":"16283:15:13"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"16300:3:13","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16276:6:13"},"nodeType":"YulFunctionCall","src":"16276:28:13"},"nodeType":"YulExpressionStatement","src":"16276:28:13"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16189:6:13","type":""}],"src":"16091:220:13"},{"body":{"nodeType":"YulBlock","src":"16463:220:13","statements":[{"nodeType":"YulAssignment","src":"16473:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16539:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"16544:2:13","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16480:58:13"},"nodeType":"YulFunctionCall","src":"16480:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16473:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16645:3:13"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"16556:88:13"},"nodeType":"YulFunctionCall","src":"16556:93:13"},"nodeType":"YulExpressionStatement","src":"16556:93:13"},{"nodeType":"YulAssignment","src":"16658:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16669:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"16674:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16665:3:13"},"nodeType":"YulFunctionCall","src":"16665:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16658:3:13"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16451:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16459:3:13","type":""}],"src":"16317:366:13"},{"body":{"nodeType":"YulBlock","src":"16860:248:13","statements":[{"nodeType":"YulAssignment","src":"16870:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16882:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"16893:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16878:3:13"},"nodeType":"YulFunctionCall","src":"16878:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16870:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16917:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"16928:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16913:3:13"},"nodeType":"YulFunctionCall","src":"16913:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16936:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"16942:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16932:3:13"},"nodeType":"YulFunctionCall","src":"16932:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16906:6:13"},"nodeType":"YulFunctionCall","src":"16906:47:13"},"nodeType":"YulExpressionStatement","src":"16906:47:13"},{"nodeType":"YulAssignment","src":"16962:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17096:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16970:124:13"},"nodeType":"YulFunctionCall","src":"16970:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16962:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16840:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16855:4:13","type":""}],"src":"16689:419:13"},{"body":{"nodeType":"YulBlock","src":"17220:142:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17242:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"17250:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17238:3:13"},"nodeType":"YulFunctionCall","src":"17238:14:13"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"17254:34:13","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17231:6:13"},"nodeType":"YulFunctionCall","src":"17231:58:13"},"nodeType":"YulExpressionStatement","src":"17231:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17310:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"17318:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17306:3:13"},"nodeType":"YulFunctionCall","src":"17306:15:13"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"17323:31:13","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17299:6:13"},"nodeType":"YulFunctionCall","src":"17299:56:13"},"nodeType":"YulExpressionStatement","src":"17299:56:13"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17212:6:13","type":""}],"src":"17114:248:13"},{"body":{"nodeType":"YulBlock","src":"17514:220:13","statements":[{"nodeType":"YulAssignment","src":"17524:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17590:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"17595:2:13","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17531:58:13"},"nodeType":"YulFunctionCall","src":"17531:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17524:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17696:3:13"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulIdentifier","src":"17607:88:13"},"nodeType":"YulFunctionCall","src":"17607:93:13"},"nodeType":"YulExpressionStatement","src":"17607:93:13"},{"nodeType":"YulAssignment","src":"17709:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17720:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"17725:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17716:3:13"},"nodeType":"YulFunctionCall","src":"17716:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17709:3:13"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17502:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17510:3:13","type":""}],"src":"17368:366:13"},{"body":{"nodeType":"YulBlock","src":"17911:248:13","statements":[{"nodeType":"YulAssignment","src":"17921:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17933:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"17944:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17929:3:13"},"nodeType":"YulFunctionCall","src":"17929:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17921:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17968:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"17979:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17964:3:13"},"nodeType":"YulFunctionCall","src":"17964:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17987:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"17993:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17983:3:13"},"nodeType":"YulFunctionCall","src":"17983:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17957:6:13"},"nodeType":"YulFunctionCall","src":"17957:47:13"},"nodeType":"YulExpressionStatement","src":"17957:47:13"},{"nodeType":"YulAssignment","src":"18013:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18147:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18021:124:13"},"nodeType":"YulFunctionCall","src":"18021:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18013:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17891:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17906:4:13","type":""}],"src":"17740:419:13"},{"body":{"nodeType":"YulBlock","src":"18291:206:13","statements":[{"nodeType":"YulAssignment","src":"18301:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18313:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"18324:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18309:3:13"},"nodeType":"YulFunctionCall","src":"18309:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18301:4:13"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18381:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18394:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"18405:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18390:3:13"},"nodeType":"YulFunctionCall","src":"18390:17:13"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18337:43:13"},"nodeType":"YulFunctionCall","src":"18337:71:13"},"nodeType":"YulExpressionStatement","src":"18337:71:13"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18462:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18475:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"18486:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18471:3:13"},"nodeType":"YulFunctionCall","src":"18471:18:13"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18418:43:13"},"nodeType":"YulFunctionCall","src":"18418:72:13"},"nodeType":"YulExpressionStatement","src":"18418:72:13"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18255:9:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18267:6:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18275:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18286:4:13","type":""}],"src":"18165:332:13"},{"body":{"nodeType":"YulBlock","src":"18609:126:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18631:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"18639:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18627:3:13"},"nodeType":"YulFunctionCall","src":"18627:14:13"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"18643:34:13","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18620:6:13"},"nodeType":"YulFunctionCall","src":"18620:58:13"},"nodeType":"YulExpressionStatement","src":"18620:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18699:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"18707:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18695:3:13"},"nodeType":"YulFunctionCall","src":"18695:15:13"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"18712:15:13","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18688:6:13"},"nodeType":"YulFunctionCall","src":"18688:40:13"},"nodeType":"YulExpressionStatement","src":"18688:40:13"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18601:6:13","type":""}],"src":"18503:232:13"},{"body":{"nodeType":"YulBlock","src":"18887:220:13","statements":[{"nodeType":"YulAssignment","src":"18897:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18963:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"18968:2:13","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18904:58:13"},"nodeType":"YulFunctionCall","src":"18904:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18897:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19069:3:13"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulIdentifier","src":"18980:88:13"},"nodeType":"YulFunctionCall","src":"18980:93:13"},"nodeType":"YulExpressionStatement","src":"18980:93:13"},{"nodeType":"YulAssignment","src":"19082:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19093:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"19098:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19089:3:13"},"nodeType":"YulFunctionCall","src":"19089:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19082:3:13"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18875:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18883:3:13","type":""}],"src":"18741:366:13"},{"body":{"nodeType":"YulBlock","src":"19284:248:13","statements":[{"nodeType":"YulAssignment","src":"19294:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19306:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"19317:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19302:3:13"},"nodeType":"YulFunctionCall","src":"19302:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19294:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19341:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"19352:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19337:3:13"},"nodeType":"YulFunctionCall","src":"19337:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19360:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"19366:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19356:3:13"},"nodeType":"YulFunctionCall","src":"19356:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19330:6:13"},"nodeType":"YulFunctionCall","src":"19330:47:13"},"nodeType":"YulExpressionStatement","src":"19330:47:13"},{"nodeType":"YulAssignment","src":"19386:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19520:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19394:124:13"},"nodeType":"YulFunctionCall","src":"19394:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19386:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19264:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19279:4:13","type":""}],"src":"19113:419:13"},{"body":{"nodeType":"YulBlock","src":"19644:68:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19666:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"19674:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19662:3:13"},"nodeType":"YulFunctionCall","src":"19662:14:13"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"19678:26:13","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19655:6:13"},"nodeType":"YulFunctionCall","src":"19655:50:13"},"nodeType":"YulExpressionStatement","src":"19655:50:13"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19636:6:13","type":""}],"src":"19538:174:13"},{"body":{"nodeType":"YulBlock","src":"19864:220:13","statements":[{"nodeType":"YulAssignment","src":"19874:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19940:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"19945:2:13","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19881:58:13"},"nodeType":"YulFunctionCall","src":"19881:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19874:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20046:3:13"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"19957:88:13"},"nodeType":"YulFunctionCall","src":"19957:93:13"},"nodeType":"YulExpressionStatement","src":"19957:93:13"},{"nodeType":"YulAssignment","src":"20059:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20070:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"20075:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20066:3:13"},"nodeType":"YulFunctionCall","src":"20066:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20059:3:13"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19852:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19860:3:13","type":""}],"src":"19718:366:13"},{"body":{"nodeType":"YulBlock","src":"20261:248:13","statements":[{"nodeType":"YulAssignment","src":"20271:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20283:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"20294:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20279:3:13"},"nodeType":"YulFunctionCall","src":"20279:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20271:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20318:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"20329:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20314:3:13"},"nodeType":"YulFunctionCall","src":"20314:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20337:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"20343:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20333:3:13"},"nodeType":"YulFunctionCall","src":"20333:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20307:6:13"},"nodeType":"YulFunctionCall","src":"20307:47:13"},"nodeType":"YulExpressionStatement","src":"20307:47:13"},{"nodeType":"YulAssignment","src":"20363:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20497:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20371:124:13"},"nodeType":"YulFunctionCall","src":"20371:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20363:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20241:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20256:4:13","type":""}],"src":"20090:419:13"},{"body":{"nodeType":"YulBlock","src":"20621:122:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20643:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"20651:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20639:3:13"},"nodeType":"YulFunctionCall","src":"20639:14:13"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"20655:34:13","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20632:6:13"},"nodeType":"YulFunctionCall","src":"20632:58:13"},"nodeType":"YulExpressionStatement","src":"20632:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20711:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"20719:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20707:3:13"},"nodeType":"YulFunctionCall","src":"20707:15:13"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"20724:11:13","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20700:6:13"},"nodeType":"YulFunctionCall","src":"20700:36:13"},"nodeType":"YulExpressionStatement","src":"20700:36:13"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20613:6:13","type":""}],"src":"20515:228:13"},{"body":{"nodeType":"YulBlock","src":"20895:220:13","statements":[{"nodeType":"YulAssignment","src":"20905:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20971:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"20976:2:13","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20912:58:13"},"nodeType":"YulFunctionCall","src":"20912:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20905:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21077:3:13"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"20988:88:13"},"nodeType":"YulFunctionCall","src":"20988:93:13"},"nodeType":"YulExpressionStatement","src":"20988:93:13"},{"nodeType":"YulAssignment","src":"21090:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21101:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"21106:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21097:3:13"},"nodeType":"YulFunctionCall","src":"21097:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21090:3:13"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20883:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20891:3:13","type":""}],"src":"20749:366:13"},{"body":{"nodeType":"YulBlock","src":"21292:248:13","statements":[{"nodeType":"YulAssignment","src":"21302:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21314:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"21325:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21310:3:13"},"nodeType":"YulFunctionCall","src":"21310:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21302:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21349:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"21360:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21345:3:13"},"nodeType":"YulFunctionCall","src":"21345:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21368:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"21374:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21364:3:13"},"nodeType":"YulFunctionCall","src":"21364:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21338:6:13"},"nodeType":"YulFunctionCall","src":"21338:47:13"},"nodeType":"YulExpressionStatement","src":"21338:47:13"},{"nodeType":"YulAssignment","src":"21394:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21528:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21402:124:13"},"nodeType":"YulFunctionCall","src":"21402:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21394:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21272:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21287:4:13","type":""}],"src":"21121:419:13"},{"body":{"nodeType":"YulBlock","src":"21574:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21591:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21594:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21584:6:13"},"nodeType":"YulFunctionCall","src":"21584:88:13"},"nodeType":"YulExpressionStatement","src":"21584:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21688:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21691:4:13","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21681:6:13"},"nodeType":"YulFunctionCall","src":"21681:15:13"},"nodeType":"YulExpressionStatement","src":"21681:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21712:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21715:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21705:6:13"},"nodeType":"YulFunctionCall","src":"21705:15:13"},"nodeType":"YulExpressionStatement","src":"21705:15:13"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"21546:180:13"},{"body":{"nodeType":"YulBlock","src":"21760:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21777:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21780:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21770:6:13"},"nodeType":"YulFunctionCall","src":"21770:88:13"},"nodeType":"YulExpressionStatement","src":"21770:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21874:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21877:4:13","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21867:6:13"},"nodeType":"YulFunctionCall","src":"21867:15:13"},"nodeType":"YulExpressionStatement","src":"21867:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21898:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21901:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21891:6:13"},"nodeType":"YulFunctionCall","src":"21891:15:13"},"nodeType":"YulExpressionStatement","src":"21891:15:13"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"21732:180:13"},{"body":{"nodeType":"YulBlock","src":"21962:261:13","statements":[{"nodeType":"YulAssignment","src":"21972:25:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21995:1:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21977:17:13"},"nodeType":"YulFunctionCall","src":"21977:20:13"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"21972:1:13"}]},{"nodeType":"YulAssignment","src":"22006:25:13","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"22029:1:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"22011:17:13"},"nodeType":"YulFunctionCall","src":"22011:20:13"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"22006:1:13"}]},{"body":{"nodeType":"YulBlock","src":"22169:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"22171:16:13"},"nodeType":"YulFunctionCall","src":"22171:18:13"},"nodeType":"YulExpressionStatement","src":"22171:18:13"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22090:1:13"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"22097:66:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"22165:1:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22093:3:13"},"nodeType":"YulFunctionCall","src":"22093:74:13"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"22087:2:13"},"nodeType":"YulFunctionCall","src":"22087:81:13"},"nodeType":"YulIf","src":"22084:107:13"},{"nodeType":"YulAssignment","src":"22201:16:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22212:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"22215:1:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22208:3:13"},"nodeType":"YulFunctionCall","src":"22208:9:13"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"22201:3:13"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"21949:1:13","type":""},{"name":"y","nodeType":"YulTypedName","src":"21952:1:13","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"21958:3:13","type":""}],"src":"21918:305:13"},{"body":{"nodeType":"YulBlock","src":"22272:190:13","statements":[{"nodeType":"YulAssignment","src":"22282:33:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22309:5:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"22291:17:13"},"nodeType":"YulFunctionCall","src":"22291:24:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"22282:5:13"}]},{"body":{"nodeType":"YulBlock","src":"22405:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"22407:16:13"},"nodeType":"YulFunctionCall","src":"22407:18:13"},"nodeType":"YulExpressionStatement","src":"22407:18:13"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22330:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"22337:66:13","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"22327:2:13"},"nodeType":"YulFunctionCall","src":"22327:77:13"},"nodeType":"YulIf","src":"22324:103:13"},{"nodeType":"YulAssignment","src":"22436:20:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22447:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"22454:1:13","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22443:3:13"},"nodeType":"YulFunctionCall","src":"22443:13:13"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"22436:3:13"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22258:5:13","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"22268:3:13","type":""}],"src":"22229:233:13"},{"body":{"nodeType":"YulBlock","src":"22513:32:13","statements":[{"nodeType":"YulAssignment","src":"22523:16:13","value":{"name":"value","nodeType":"YulIdentifier","src":"22534:5:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"22523:7:13"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22495:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"22505:7:13","type":""}],"src":"22468:77:13"},{"body":{"nodeType":"YulBlock","src":"22616:53:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22633:3:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22656:5:13"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"22638:17:13"},"nodeType":"YulFunctionCall","src":"22638:24:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22626:6:13"},"nodeType":"YulFunctionCall","src":"22626:37:13"},"nodeType":"YulExpressionStatement","src":"22626:37:13"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22604:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"22611:3:13","type":""}],"src":"22551:118:13"},{"body":{"nodeType":"YulBlock","src":"22719:57:13","statements":[{"nodeType":"YulAssignment","src":"22729:41:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22744:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"22751:18:13","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22740:3:13"},"nodeType":"YulFunctionCall","src":"22740:30:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"22729:7:13"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22701:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"22711:7:13","type":""}],"src":"22675:101:13"},{"body":{"nodeType":"YulBlock","src":"22845:52:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22862:3:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22884:5:13"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"22867:16:13"},"nodeType":"YulFunctionCall","src":"22867:23:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22855:6:13"},"nodeType":"YulFunctionCall","src":"22855:36:13"},"nodeType":"YulExpressionStatement","src":"22855:36:13"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22833:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"22840:3:13","type":""}],"src":"22782:115:13"},{"body":{"nodeType":"YulBlock","src":"22947:45:13","statements":[{"nodeType":"YulAssignment","src":"22957:29:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22972:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"22979:6:13","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"22968:3:13"},"nodeType":"YulFunctionCall","src":"22968:18:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"22957:7:13"}]}]},"name":"cleanup_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22929:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"22939:7:13","type":""}],"src":"22903:89:13"},{"body":{"nodeType":"YulBlock","src":"23061:52:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23078:3:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23100:5:13"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"23083:16:13"},"nodeType":"YulFunctionCall","src":"23083:23:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23071:6:13"},"nodeType":"YulFunctionCall","src":"23071:36:13"},"nodeType":"YulExpressionStatement","src":"23071:36:13"}]},"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23049:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"23056:3:13","type":""}],"src":"22998:115:13"},{"body":{"nodeType":"YulBlock","src":"23163:49:13","statements":[{"nodeType":"YulAssignment","src":"23173:33:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23188:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"23195:10:13","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"23184:3:13"},"nodeType":"YulFunctionCall","src":"23184:22:13"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"23173:7:13"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23145:5:13","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"23155:7:13","type":""}],"src":"23119:93:13"},{"body":{"nodeType":"YulBlock","src":"23281:52:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23298:3:13"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23320:5:13"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"23303:16:13"},"nodeType":"YulFunctionCall","src":"23303:23:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23291:6:13"},"nodeType":"YulFunctionCall","src":"23291:36:13"},"nodeType":"YulExpressionStatement","src":"23291:36:13"}]},"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23269:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"23276:3:13","type":""}],"src":"23218:115:13"},{"body":{"nodeType":"YulBlock","src":"23541:446:13","statements":[{"nodeType":"YulAssignment","src":"23551:27:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23563:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"23574:3:13","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23559:3:13"},"nodeType":"YulFunctionCall","src":"23559:19:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23551:4:13"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23632:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23645:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"23656:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23641:3:13"},"nodeType":"YulFunctionCall","src":"23641:17:13"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"23588:43:13"},"nodeType":"YulFunctionCall","src":"23588:71:13"},"nodeType":"YulExpressionStatement","src":"23588:71:13"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23711:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23724:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"23735:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23720:3:13"},"nodeType":"YulFunctionCall","src":"23720:18:13"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"23669:41:13"},"nodeType":"YulFunctionCall","src":"23669:70:13"},"nodeType":"YulExpressionStatement","src":"23669:70:13"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"23791:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23804:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"23815:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23800:3:13"},"nodeType":"YulFunctionCall","src":"23800:18:13"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"23749:41:13"},"nodeType":"YulFunctionCall","src":"23749:70:13"},"nodeType":"YulExpressionStatement","src":"23749:70:13"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"23871:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23884:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"23895:2:13","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23880:3:13"},"nodeType":"YulFunctionCall","src":"23880:18:13"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"23829:41:13"},"nodeType":"YulFunctionCall","src":"23829:70:13"},"nodeType":"YulExpressionStatement","src":"23829:70:13"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"23951:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23964:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"23975:3:13","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23960:3:13"},"nodeType":"YulFunctionCall","src":"23960:19:13"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"23909:41:13"},"nodeType":"YulFunctionCall","src":"23909:71:13"},"nodeType":"YulExpressionStatement","src":"23909:71:13"}]},"name":"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23481:9:13","type":""},{"name":"value4","nodeType":"YulTypedName","src":"23493:6:13","type":""},{"name":"value3","nodeType":"YulTypedName","src":"23501:6:13","type":""},{"name":"value2","nodeType":"YulTypedName","src":"23509:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23517:6:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23525:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23536:4:13","type":""}],"src":"23339:648:13"},{"body":{"nodeType":"YulBlock","src":"24056:80:13","statements":[{"nodeType":"YulAssignment","src":"24066:22:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24081:6:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24075:5:13"},"nodeType":"YulFunctionCall","src":"24075:13:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"24066:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24124:5:13"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"24097:26:13"},"nodeType":"YulFunctionCall","src":"24097:33:13"},"nodeType":"YulExpressionStatement","src":"24097:33:13"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"24034:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"24042:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"24050:5:13","type":""}],"src":"23993:143:13"},{"body":{"nodeType":"YulBlock","src":"24219:274:13","statements":[{"body":{"nodeType":"YulBlock","src":"24265:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"24267:77:13"},"nodeType":"YulFunctionCall","src":"24267:79:13"},"nodeType":"YulExpressionStatement","src":"24267:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"24240:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"24249:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24236:3:13"},"nodeType":"YulFunctionCall","src":"24236:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"24261:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"24232:3:13"},"nodeType":"YulFunctionCall","src":"24232:32:13"},"nodeType":"YulIf","src":"24229:119:13"},{"nodeType":"YulBlock","src":"24358:128:13","statements":[{"nodeType":"YulVariableDeclaration","src":"24373:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"24387:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"24377:6:13","type":""}]},{"nodeType":"YulAssignment","src":"24402:74:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24448:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"24459:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24444:3:13"},"nodeType":"YulFunctionCall","src":"24444:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"24468:7:13"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"24412:31:13"},"nodeType":"YulFunctionCall","src":"24412:64:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"24402:6:13"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24189:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"24200:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"24212:6:13","type":""}],"src":"24142:351:13"},{"body":{"nodeType":"YulBlock","src":"24527:152:13","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24544:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24547:77:13","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24537:6:13"},"nodeType":"YulFunctionCall","src":"24537:88:13"},"nodeType":"YulExpressionStatement","src":"24537:88:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24641:1:13","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"24644:4:13","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24634:6:13"},"nodeType":"YulFunctionCall","src":"24634:15:13"},"nodeType":"YulExpressionStatement","src":"24634:15:13"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24665:1:13","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24668:4:13","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24658:6:13"},"nodeType":"YulFunctionCall","src":"24658:15:13"},"nodeType":"YulExpressionStatement","src":"24658:15:13"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"24499:180:13"},{"body":{"nodeType":"YulBlock","src":"24719:142:13","statements":[{"nodeType":"YulAssignment","src":"24729:25:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"24752:1:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"24734:17:13"},"nodeType":"YulFunctionCall","src":"24734:20:13"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"24729:1:13"}]},{"nodeType":"YulAssignment","src":"24763:25:13","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"24786:1:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"24768:17:13"},"nodeType":"YulFunctionCall","src":"24768:20:13"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"24763:1:13"}]},{"body":{"nodeType":"YulBlock","src":"24810:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"24812:16:13"},"nodeType":"YulFunctionCall","src":"24812:18:13"},"nodeType":"YulExpressionStatement","src":"24812:18:13"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"24807:1:13"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"24800:6:13"},"nodeType":"YulFunctionCall","src":"24800:9:13"},"nodeType":"YulIf","src":"24797:35:13"},{"nodeType":"YulAssignment","src":"24841:14:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"24850:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"24853:1:13"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"24846:3:13"},"nodeType":"YulFunctionCall","src":"24846:9:13"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"24841:1:13"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"24708:1:13","type":""},{"name":"y","nodeType":"YulTypedName","src":"24711:1:13","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"24717:1:13","type":""}],"src":"24685:176:13"},{"body":{"nodeType":"YulBlock","src":"24973:118:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24995:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"25003:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24991:3:13"},"nodeType":"YulFunctionCall","src":"24991:14:13"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"25007:34:13","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24984:6:13"},"nodeType":"YulFunctionCall","src":"24984:58:13"},"nodeType":"YulExpressionStatement","src":"24984:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"25063:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"25071:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25059:3:13"},"nodeType":"YulFunctionCall","src":"25059:15:13"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"25076:7:13","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25052:6:13"},"nodeType":"YulFunctionCall","src":"25052:32:13"},"nodeType":"YulExpressionStatement","src":"25052:32:13"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24965:6:13","type":""}],"src":"24867:224:13"},{"body":{"nodeType":"YulBlock","src":"25243:220:13","statements":[{"nodeType":"YulAssignment","src":"25253:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25319:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"25324:2:13","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25260:58:13"},"nodeType":"YulFunctionCall","src":"25260:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25253:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25425:3:13"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"25336:88:13"},"nodeType":"YulFunctionCall","src":"25336:93:13"},"nodeType":"YulExpressionStatement","src":"25336:93:13"},{"nodeType":"YulAssignment","src":"25438:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25449:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"25454:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25445:3:13"},"nodeType":"YulFunctionCall","src":"25445:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25438:3:13"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25231:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25239:3:13","type":""}],"src":"25097:366:13"},{"body":{"nodeType":"YulBlock","src":"25640:248:13","statements":[{"nodeType":"YulAssignment","src":"25650:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25662:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"25673:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25658:3:13"},"nodeType":"YulFunctionCall","src":"25658:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25650:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25697:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"25708:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25693:3:13"},"nodeType":"YulFunctionCall","src":"25693:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25716:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"25722:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25712:3:13"},"nodeType":"YulFunctionCall","src":"25712:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25686:6:13"},"nodeType":"YulFunctionCall","src":"25686:47:13"},"nodeType":"YulExpressionStatement","src":"25686:47:13"},{"nodeType":"YulAssignment","src":"25742:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25876:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25750:124:13"},"nodeType":"YulFunctionCall","src":"25750:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25742:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25620:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25635:4:13","type":""}],"src":"25469:419:13"},{"body":{"nodeType":"YulBlock","src":"26000:117:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26022:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"26030:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26018:3:13"},"nodeType":"YulFunctionCall","src":"26018:14:13"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"26034:34:13","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26011:6:13"},"nodeType":"YulFunctionCall","src":"26011:58:13"},"nodeType":"YulExpressionStatement","src":"26011:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26090:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"26098:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26086:3:13"},"nodeType":"YulFunctionCall","src":"26086:15:13"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"26103:6:13","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26079:6:13"},"nodeType":"YulFunctionCall","src":"26079:31:13"},"nodeType":"YulExpressionStatement","src":"26079:31:13"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"25992:6:13","type":""}],"src":"25894:223:13"},{"body":{"nodeType":"YulBlock","src":"26269:220:13","statements":[{"nodeType":"YulAssignment","src":"26279:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26345:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"26350:2:13","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26286:58:13"},"nodeType":"YulFunctionCall","src":"26286:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26279:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26451:3:13"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"26362:88:13"},"nodeType":"YulFunctionCall","src":"26362:93:13"},"nodeType":"YulExpressionStatement","src":"26362:93:13"},{"nodeType":"YulAssignment","src":"26464:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26475:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"26480:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26471:3:13"},"nodeType":"YulFunctionCall","src":"26471:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26464:3:13"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26257:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26265:3:13","type":""}],"src":"26123:366:13"},{"body":{"nodeType":"YulBlock","src":"26666:248:13","statements":[{"nodeType":"YulAssignment","src":"26676:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26688:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"26699:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26684:3:13"},"nodeType":"YulFunctionCall","src":"26684:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26676:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26723:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"26734:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26719:3:13"},"nodeType":"YulFunctionCall","src":"26719:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26742:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"26748:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26738:3:13"},"nodeType":"YulFunctionCall","src":"26738:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26712:6:13"},"nodeType":"YulFunctionCall","src":"26712:47:13"},"nodeType":"YulExpressionStatement","src":"26712:47:13"},{"nodeType":"YulAssignment","src":"26768:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26902:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26776:124:13"},"nodeType":"YulFunctionCall","src":"26776:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26768:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26646:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26661:4:13","type":""}],"src":"26495:419:13"},{"body":{"nodeType":"YulBlock","src":"27026:69:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27048:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"27056:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27044:3:13"},"nodeType":"YulFunctionCall","src":"27044:14:13"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"27060:27:13","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27037:6:13"},"nodeType":"YulFunctionCall","src":"27037:51:13"},"nodeType":"YulExpressionStatement","src":"27037:51:13"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27018:6:13","type":""}],"src":"26920:175:13"},{"body":{"nodeType":"YulBlock","src":"27247:220:13","statements":[{"nodeType":"YulAssignment","src":"27257:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27323:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"27328:2:13","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27264:58:13"},"nodeType":"YulFunctionCall","src":"27264:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27257:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27429:3:13"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"27340:88:13"},"nodeType":"YulFunctionCall","src":"27340:93:13"},"nodeType":"YulExpressionStatement","src":"27340:93:13"},{"nodeType":"YulAssignment","src":"27442:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27453:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"27458:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27449:3:13"},"nodeType":"YulFunctionCall","src":"27449:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27442:3:13"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"27235:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27243:3:13","type":""}],"src":"27101:366:13"},{"body":{"nodeType":"YulBlock","src":"27644:248:13","statements":[{"nodeType":"YulAssignment","src":"27654:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27666:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"27677:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27662:3:13"},"nodeType":"YulFunctionCall","src":"27662:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27654:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27701:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"27712:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27697:3:13"},"nodeType":"YulFunctionCall","src":"27697:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27720:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"27726:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27716:3:13"},"nodeType":"YulFunctionCall","src":"27716:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27690:6:13"},"nodeType":"YulFunctionCall","src":"27690:47:13"},"nodeType":"YulExpressionStatement","src":"27690:47:13"},{"nodeType":"YulAssignment","src":"27746:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27880:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27754:124:13"},"nodeType":"YulFunctionCall","src":"27754:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27746:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27624:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27639:4:13","type":""}],"src":"27473:419:13"},{"body":{"nodeType":"YulBlock","src":"28004:131:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28026:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"28034:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28022:3:13"},"nodeType":"YulFunctionCall","src":"28022:14:13"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"28038:34:13","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28015:6:13"},"nodeType":"YulFunctionCall","src":"28015:58:13"},"nodeType":"YulExpressionStatement","src":"28015:58:13"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28094:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"28102:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28090:3:13"},"nodeType":"YulFunctionCall","src":"28090:15:13"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"28107:20:13","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28083:6:13"},"nodeType":"YulFunctionCall","src":"28083:45:13"},"nodeType":"YulExpressionStatement","src":"28083:45:13"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27996:6:13","type":""}],"src":"27898:237:13"},{"body":{"nodeType":"YulBlock","src":"28287:220:13","statements":[{"nodeType":"YulAssignment","src":"28297:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28363:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"28368:2:13","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28304:58:13"},"nodeType":"YulFunctionCall","src":"28304:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28297:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28469:3:13"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"28380:88:13"},"nodeType":"YulFunctionCall","src":"28380:93:13"},"nodeType":"YulExpressionStatement","src":"28380:93:13"},{"nodeType":"YulAssignment","src":"28482:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28493:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"28498:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28489:3:13"},"nodeType":"YulFunctionCall","src":"28489:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28482:3:13"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28275:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28283:3:13","type":""}],"src":"28141:366:13"},{"body":{"nodeType":"YulBlock","src":"28684:248:13","statements":[{"nodeType":"YulAssignment","src":"28694:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28706:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"28717:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28702:3:13"},"nodeType":"YulFunctionCall","src":"28702:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28694:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28741:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"28752:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28737:3:13"},"nodeType":"YulFunctionCall","src":"28737:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28760:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"28766:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28756:3:13"},"nodeType":"YulFunctionCall","src":"28756:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28730:6:13"},"nodeType":"YulFunctionCall","src":"28730:47:13"},"nodeType":"YulExpressionStatement","src":"28730:47:13"},{"nodeType":"YulAssignment","src":"28786:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28920:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28794:124:13"},"nodeType":"YulFunctionCall","src":"28794:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28786:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28664:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28679:4:13","type":""}],"src":"28513:419:13"},{"body":{"nodeType":"YulBlock","src":"28983:146:13","statements":[{"nodeType":"YulAssignment","src":"28993:25:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"29016:1:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"28998:17:13"},"nodeType":"YulFunctionCall","src":"28998:20:13"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"28993:1:13"}]},{"nodeType":"YulAssignment","src":"29027:25:13","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"29050:1:13"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"29032:17:13"},"nodeType":"YulFunctionCall","src":"29032:20:13"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"29027:1:13"}]},{"body":{"nodeType":"YulBlock","src":"29074:22:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"29076:16:13"},"nodeType":"YulFunctionCall","src":"29076:18:13"},"nodeType":"YulExpressionStatement","src":"29076:18:13"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"29068:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"29071:1:13"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"29065:2:13"},"nodeType":"YulFunctionCall","src":"29065:8:13"},"nodeType":"YulIf","src":"29062:34:13"},{"nodeType":"YulAssignment","src":"29106:17:13","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"29118:1:13"},{"name":"y","nodeType":"YulIdentifier","src":"29121:1:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29114:3:13"},"nodeType":"YulFunctionCall","src":"29114:9:13"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"29106:4:13"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"28969:1:13","type":""},{"name":"y","nodeType":"YulTypedName","src":"28972:1:13","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"28978:4:13","type":""}],"src":"28938:191:13"},{"body":{"nodeType":"YulBlock","src":"29193:40:13","statements":[{"nodeType":"YulAssignment","src":"29204:22:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29220:5:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"29214:5:13"},"nodeType":"YulFunctionCall","src":"29214:12:13"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"29204:6:13"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29176:5:13","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"29186:6:13","type":""}],"src":"29135:98:13"},{"body":{"nodeType":"YulBlock","src":"29334:73:13","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29351:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"29356:6:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29344:6:13"},"nodeType":"YulFunctionCall","src":"29344:19:13"},"nodeType":"YulExpressionStatement","src":"29344:19:13"},{"nodeType":"YulAssignment","src":"29372:29:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29391:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"29396:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29387:3:13"},"nodeType":"YulFunctionCall","src":"29387:14:13"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"29372:11:13"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29306:3:13","type":""},{"name":"length","nodeType":"YulTypedName","src":"29311:6:13","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"29322:11:13","type":""}],"src":"29239:168:13"},{"body":{"nodeType":"YulBlock","src":"29503:270:13","statements":[{"nodeType":"YulVariableDeclaration","src":"29513:52:13","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29559:5:13"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"29527:31:13"},"nodeType":"YulFunctionCall","src":"29527:38:13"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"29517:6:13","type":""}]},{"nodeType":"YulAssignment","src":"29574:77:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29639:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"29644:6:13"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29581:57:13"},"nodeType":"YulFunctionCall","src":"29581:70:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29574:3:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"29686:5:13"},{"kind":"number","nodeType":"YulLiteral","src":"29693:4:13","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29682:3:13"},"nodeType":"YulFunctionCall","src":"29682:16:13"},{"name":"pos","nodeType":"YulIdentifier","src":"29700:3:13"},{"name":"length","nodeType":"YulIdentifier","src":"29705:6:13"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"29660:21:13"},"nodeType":"YulFunctionCall","src":"29660:52:13"},"nodeType":"YulExpressionStatement","src":"29660:52:13"},{"nodeType":"YulAssignment","src":"29721:46:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29732:3:13"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"29759:6:13"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"29737:21:13"},"nodeType":"YulFunctionCall","src":"29737:29:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29728:3:13"},"nodeType":"YulFunctionCall","src":"29728:39:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29721:3:13"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"29484:5:13","type":""},{"name":"pos","nodeType":"YulTypedName","src":"29491:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29499:3:13","type":""}],"src":"29413:360:13"},{"body":{"nodeType":"YulBlock","src":"29979:440:13","statements":[{"nodeType":"YulAssignment","src":"29989:27:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30001:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"30012:3:13","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29997:3:13"},"nodeType":"YulFunctionCall","src":"29997:19:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29989:4:13"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"30070:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30083:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"30094:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30079:3:13"},"nodeType":"YulFunctionCall","src":"30079:17:13"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"30026:43:13"},"nodeType":"YulFunctionCall","src":"30026:71:13"},"nodeType":"YulExpressionStatement","src":"30026:71:13"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"30151:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30164:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"30175:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30160:3:13"},"nodeType":"YulFunctionCall","src":"30160:18:13"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"30107:43:13"},"nodeType":"YulFunctionCall","src":"30107:72:13"},"nodeType":"YulExpressionStatement","src":"30107:72:13"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"30233:6:13"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30246:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"30257:2:13","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30242:3:13"},"nodeType":"YulFunctionCall","src":"30242:18:13"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"30189:43:13"},"nodeType":"YulFunctionCall","src":"30189:72:13"},"nodeType":"YulExpressionStatement","src":"30189:72:13"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30282:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"30293:2:13","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30278:3:13"},"nodeType":"YulFunctionCall","src":"30278:18:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30302:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"30308:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30298:3:13"},"nodeType":"YulFunctionCall","src":"30298:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30271:6:13"},"nodeType":"YulFunctionCall","src":"30271:48:13"},"nodeType":"YulExpressionStatement","src":"30271:48:13"},{"nodeType":"YulAssignment","src":"30328:84:13","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"30398:6:13"},{"name":"tail","nodeType":"YulIdentifier","src":"30407:4:13"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30336:61:13"},"nodeType":"YulFunctionCall","src":"30336:76:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30328:4:13"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29927:9:13","type":""},{"name":"value3","nodeType":"YulTypedName","src":"29939:6:13","type":""},{"name":"value2","nodeType":"YulTypedName","src":"29947:6:13","type":""},{"name":"value1","nodeType":"YulTypedName","src":"29955:6:13","type":""},{"name":"value0","nodeType":"YulTypedName","src":"29963:6:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29974:4:13","type":""}],"src":"29779:640:13"},{"body":{"nodeType":"YulBlock","src":"30487:79:13","statements":[{"nodeType":"YulAssignment","src":"30497:22:13","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"30512:6:13"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"30506:5:13"},"nodeType":"YulFunctionCall","src":"30506:13:13"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"30497:5:13"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"30554:5:13"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"30528:25:13"},"nodeType":"YulFunctionCall","src":"30528:32:13"},"nodeType":"YulExpressionStatement","src":"30528:32:13"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"30465:6:13","type":""},{"name":"end","nodeType":"YulTypedName","src":"30473:3:13","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"30481:5:13","type":""}],"src":"30425:141:13"},{"body":{"nodeType":"YulBlock","src":"30648:273:13","statements":[{"body":{"nodeType":"YulBlock","src":"30694:83:13","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"30696:77:13"},"nodeType":"YulFunctionCall","src":"30696:79:13"},"nodeType":"YulExpressionStatement","src":"30696:79:13"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"30669:7:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"30678:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30665:3:13"},"nodeType":"YulFunctionCall","src":"30665:23:13"},{"kind":"number","nodeType":"YulLiteral","src":"30690:2:13","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"30661:3:13"},"nodeType":"YulFunctionCall","src":"30661:32:13"},"nodeType":"YulIf","src":"30658:119:13"},{"nodeType":"YulBlock","src":"30787:127:13","statements":[{"nodeType":"YulVariableDeclaration","src":"30802:15:13","value":{"kind":"number","nodeType":"YulLiteral","src":"30816:1:13","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"30806:6:13","type":""}]},{"nodeType":"YulAssignment","src":"30831:73:13","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30876:9:13"},{"name":"offset","nodeType":"YulIdentifier","src":"30887:6:13"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30872:3:13"},"nodeType":"YulFunctionCall","src":"30872:22:13"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"30896:7:13"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"30841:30:13"},"nodeType":"YulFunctionCall","src":"30841:63:13"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"30831:6:13"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30618:9:13","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"30629:7:13","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"30641:6:13","type":""}],"src":"30572:349:13"},{"body":{"nodeType":"YulBlock","src":"31033:76:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31055:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"31063:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31051:3:13"},"nodeType":"YulFunctionCall","src":"31051:14:13"},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"31067:34:13","type":"","value":"ERC721: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31044:6:13"},"nodeType":"YulFunctionCall","src":"31044:58:13"},"nodeType":"YulExpressionStatement","src":"31044:58:13"}]},"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"31025:6:13","type":""}],"src":"30927:182:13"},{"body":{"nodeType":"YulBlock","src":"31261:220:13","statements":[{"nodeType":"YulAssignment","src":"31271:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31337:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"31342:2:13","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31278:58:13"},"nodeType":"YulFunctionCall","src":"31278:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31271:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31443:3:13"}],"functionName":{"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulIdentifier","src":"31354:88:13"},"nodeType":"YulFunctionCall","src":"31354:93:13"},"nodeType":"YulExpressionStatement","src":"31354:93:13"},{"nodeType":"YulAssignment","src":"31456:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31467:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"31472:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31463:3:13"},"nodeType":"YulFunctionCall","src":"31463:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31456:3:13"}]}]},"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31249:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31257:3:13","type":""}],"src":"31115:366:13"},{"body":{"nodeType":"YulBlock","src":"31658:248:13","statements":[{"nodeType":"YulAssignment","src":"31668:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31680:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"31691:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31676:3:13"},"nodeType":"YulFunctionCall","src":"31676:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31668:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31715:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"31726:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31711:3:13"},"nodeType":"YulFunctionCall","src":"31711:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31734:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"31740:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31730:3:13"},"nodeType":"YulFunctionCall","src":"31730:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31704:6:13"},"nodeType":"YulFunctionCall","src":"31704:47:13"},"nodeType":"YulExpressionStatement","src":"31704:47:13"},{"nodeType":"YulAssignment","src":"31760:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31894:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31768:124:13"},"nodeType":"YulFunctionCall","src":"31768:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31760:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31638:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31653:4:13","type":""}],"src":"31487:419:13"},{"body":{"nodeType":"YulBlock","src":"32018:72:13","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32040:6:13"},{"kind":"number","nodeType":"YulLiteral","src":"32048:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32036:3:13"},"nodeType":"YulFunctionCall","src":"32036:14:13"},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","kind":"string","nodeType":"YulLiteral","src":"32052:30:13","type":"","value":"ERC721: token already minted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32029:6:13"},"nodeType":"YulFunctionCall","src":"32029:54:13"},"nodeType":"YulExpressionStatement","src":"32029:54:13"}]},"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"32010:6:13","type":""}],"src":"31912:178:13"},{"body":{"nodeType":"YulBlock","src":"32242:220:13","statements":[{"nodeType":"YulAssignment","src":"32252:74:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32318:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"32323:2:13","type":"","value":"28"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32259:58:13"},"nodeType":"YulFunctionCall","src":"32259:67:13"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"32252:3:13"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32424:3:13"}],"functionName":{"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulIdentifier","src":"32335:88:13"},"nodeType":"YulFunctionCall","src":"32335:93:13"},"nodeType":"YulExpressionStatement","src":"32335:93:13"},{"nodeType":"YulAssignment","src":"32437:19:13","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32448:3:13"},{"kind":"number","nodeType":"YulLiteral","src":"32453:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32444:3:13"},"nodeType":"YulFunctionCall","src":"32444:12:13"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"32437:3:13"}]}]},"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"32230:3:13","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"32238:3:13","type":""}],"src":"32096:366:13"},{"body":{"nodeType":"YulBlock","src":"32639:248:13","statements":[{"nodeType":"YulAssignment","src":"32649:26:13","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32661:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"32672:2:13","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32657:3:13"},"nodeType":"YulFunctionCall","src":"32657:18:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32649:4:13"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32696:9:13"},{"kind":"number","nodeType":"YulLiteral","src":"32707:1:13","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32692:3:13"},"nodeType":"YulFunctionCall","src":"32692:17:13"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32715:4:13"},{"name":"headStart","nodeType":"YulIdentifier","src":"32721:9:13"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32711:3:13"},"nodeType":"YulFunctionCall","src":"32711:20:13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32685:6:13"},"nodeType":"YulFunctionCall","src":"32685:47:13"},"nodeType":"YulExpressionStatement","src":"32685:47:13"},{"nodeType":"YulAssignment","src":"32741:139:13","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32875:4:13"}],"functionName":{"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32749:124:13"},"nodeType":"YulFunctionCall","src":"32749:131:13"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32741:4:13"}]}]},"name":"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32619:9:13","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32634:4:13","type":""}],"src":"32468:419:13"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_uint256_$3_memory_ptr(value) -> length {\n\n        length := 0x03\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$3_memory_ptr_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function array_dataslot_t_array$_t_uint256_$3_memory_ptr(ptr) -> data {\n        data := ptr\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$3_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[3] -> uint256[3]\n    function abi_encode_t_array$_t_uint256_$3_memory_ptr_to_t_array$_t_uint256_$3_memory_ptr_fromStack(value, pos)  {\n        let length := array_length_t_array$_t_uint256_$3_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$3_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$3_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$3_memory_ptr(srcPtr)\n        }\n\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$3_memory_ptr__to_t_array$_t_uint256_$3_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_array$_t_uint256_$3_memory_ptr_to_t_array$_t_uint256_$3_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function validator_assert_t_enum$_Breed_$2702(value) {\n        if iszero(lt(value, 3)) { panic_error_0x21() }\n    }\n\n    function cleanup_t_enum$_Breed_$2702(value) -> cleaned {\n        cleaned := value validator_assert_t_enum$_Breed_$2702(value)\n    }\n\n    function convert_t_enum$_Breed_$2702_to_t_uint8(value) -> converted {\n        converted := cleanup_t_enum$_Breed_$2702(value)\n    }\n\n    function abi_encode_t_enum$_Breed_$2702_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_enum$_Breed_$2702_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_enum$_Breed_$2702__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_enum$_Breed_$2702_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function abi_encode_t_uint16_to_t_uint16_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint16(value))\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function abi_encode_t_uint32_to_t_uint32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function mod_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: mint to the zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: token already minted\")\n\n    }\n\n    function abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)\n        store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":13,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"10":[{"length":32,"start":1726},{"length":32,"start":1810}],"2705":[{"length":32,"start":2855}],"2707":[{"length":32,"start":2948}],"2709":[{"length":32,"start":2915}],"2711":[{"length":32,"start":2983}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101215760003560e01c80636352211e116100ad578063a51cccf311610071578063a51cccf31461031a578063aa1524911461034a578063b88d4fde14610368578063c87b56dd14610384578063e985e9c5146103b457610121565b80636352211e1461025057806370a082311461028057806395d89b41146102b0578063a22cb465146102ce578063a36f573b146102ea57610121565b80630b21a83b116100f45780630b21a83b146101c05780631fe543e3146101de57806323b872dd146101fa57806342842e0e146102165780635dacf5f41461023257610121565b806301ffc9a71461012657806306fdde0314610156578063081812fc14610174578063095ea7b3146101a4575b600080fd5b610140600480360381019061013b9190611b6f565b6103e4565b60405161014d9190611bb7565b60405180910390f35b61015e6104c6565b60405161016b9190611c6b565b60405180910390f35b61018e60048036038101906101899190611cc3565b610558565b60405161019b9190611d31565b60405180910390f35b6101be60048036038101906101b99190611d78565b61059e565b005b6101c86106b6565b6040516101d59190611dc7565b60405180910390f35b6101f860048036038101906101f39190611f2a565b6106bc565b005b610214600480360381019061020f9190611f86565b61077c565b005b610230600480360381019061022b9190611f86565b6107dc565b005b61023a6107fc565b6040516102479190612084565b60405180910390f35b61026a60048036038101906102659190611cc3565b610827565b6040516102779190611d31565b60405180910390f35b61029a6004803603810190610295919061209f565b6108ae565b6040516102a79190611dc7565b60405180910390f35b6102b8610966565b6040516102c59190611c6b565b60405180910390f35b6102e860048036038101906102e391906120f8565b6109f8565b005b61030460048036038101906102ff9190611cc3565b610a0e565b6040516103119190611d31565b60405180910390f35b610334600480360381019061032f9190611cc3565b610a41565b60405161034191906121af565b60405180910390f35b610352610b23565b60405161035f9190611dc7565b60405180910390f35b610382600480360381019061037d919061227f565b610c91565b005b61039e60048036038101906103999190611cc3565b610cf3565b6040516103ab9190611c6b565b60405180910390f35b6103ce60048036038101906103c99190612302565b610cfa565b6040516103db9190611bb7565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104af57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104bf57506104be82610d8e565b5b9050919050565b6060600080546104d590612371565b80601f016020809104026020016040519081016040528092919081815260200182805461050190612371565b801561054e5780601f106105235761010080835404028352916020019161054e565b820191906000526020600020905b81548152906001019060200180831161053157829003601f168201915b5050505050905090565b600061056382610df8565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105a982610827565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561061a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061190612415565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610639610e43565b73ffffffffffffffffffffffffffffffffffffffff161480610668575061066781610662610e43565b610cfa565b5b6106a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069e906124a7565b60405180910390fd5b6106b18383610e4b565b505050565b60075481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461076e57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016107659291906124c7565b60405180910390fd5b6107788282610f04565b5050565b61078d610787610e43565b82610f8e565b6107cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c390612562565b60405180910390fd5b6107d7838383611023565b505050565b6107f783838360405180602001604052806000815250610c91565b505050565b610804611ae1565b6040518060600160405280600a8152602001601e81526020016064815250905090565b6000806108338361131d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089c906125ce565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561091f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091690612660565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461097590612371565b80601f01602080910402602001604051908101604052809291908181526020018280546109a190612371565b80156109ee5780601f106109c3576101008083540402835291602001916109ee565b820191906000526020600020905b8154815290600101906020018083116109d157829003601f168201915b5050505050905090565b610a0a610a03610e43565b838361135a565b5050565b60066020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600090506000610a526107fc565b905060005b6003811015610aeb57828510158015610a915750818160038110610a7e57610a7d612680565b5b602002015183610a8e91906126de565b85105b15610ab357806002811115610aa957610aa8612138565b5b9350505050610b1e565b818160038110610ac657610ac5612680565b5b602002015183610ad691906126de565b92508080610ae390612734565b915050610a57565b506040517f12806c9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610be89594939291906127f5565b602060405180830381600087803b158015610c0257600080fd5b505af1158015610c16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3a919061285d565b9050336006600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090565b610ca2610c9c610e43565b83610f8e565b610ce1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd890612562565b60405180910390fd5b610ced848484846114c7565b50505050565b6060919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610e0181611523565b610e40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e37906125ce565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610ebe83610827565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006006600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060075490506000606484600081518110610f5b57610f5a612680565b5b6020026020010151610f6d91906128b9565b90506000610f7a82610a41565b9050610f868484611564565b505050505050565b600080610f9a83610827565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610fdc5750610fdb8185610cfa565b5b8061101a57508373ffffffffffffffffffffffffffffffffffffffff1661100284610558565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661104382610827565b73ffffffffffffffffffffffffffffffffffffffff1614611099576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110909061295c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611109576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611100906129ee565b60405180910390fd5b6111168383836001611582565b8273ffffffffffffffffffffffffffffffffffffffff1661113682610827565b73ffffffffffffffffffffffffffffffffffffffff161461118c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111839061295c565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461131883838360016116a8565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156113c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c090612a5a565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516114ba9190611bb7565b60405180910390a3505050565b6114d2848484611023565b6114de848484846116ae565b61151d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151490612aec565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff166115458361131d565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b61157e828260405180602001604052806000815250611845565b5050565b60018111156116a257600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146116165780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461160e9190612b0c565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146116a15780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461169991906126de565b925050819055505b5b50505050565b50505050565b60006116cf8473ffffffffffffffffffffffffffffffffffffffff166118a0565b15611838578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026116f8610e43565b8786866040518563ffffffff1660e01b815260040161171a9493929190612b95565b602060405180830381600087803b15801561173457600080fd5b505af192505050801561176557506040513d601f19601f820116820180604052508101906117629190612bf6565b60015b6117e8573d8060008114611795576040519150601f19603f3d011682016040523d82523d6000602084013e61179a565b606091505b506000815114156117e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d790612aec565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061183d565b600190505b949350505050565b61184f83836118c3565b61185c60008484846116ae565b61189b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189290612aec565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611933576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192a90612c6f565b60405180910390fd5b61193c81611523565b1561197c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197390612cdb565b60405180910390fd5b61198a600083836001611582565b61199381611523565b156119d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ca90612cdb565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611add6000838360016116a8565b5050565b6040518060600160405280600390602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611b4c81611b17565b8114611b5757600080fd5b50565b600081359050611b6981611b43565b92915050565b600060208284031215611b8557611b84611b0d565b5b6000611b9384828501611b5a565b91505092915050565b60008115159050919050565b611bb181611b9c565b82525050565b6000602082019050611bcc6000830184611ba8565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611c0c578082015181840152602081019050611bf1565b83811115611c1b576000848401525b50505050565b6000601f19601f8301169050919050565b6000611c3d82611bd2565b611c478185611bdd565b9350611c57818560208601611bee565b611c6081611c21565b840191505092915050565b60006020820190508181036000830152611c858184611c32565b905092915050565b6000819050919050565b611ca081611c8d565b8114611cab57600080fd5b50565b600081359050611cbd81611c97565b92915050565b600060208284031215611cd957611cd8611b0d565b5b6000611ce784828501611cae565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d1b82611cf0565b9050919050565b611d2b81611d10565b82525050565b6000602082019050611d466000830184611d22565b92915050565b611d5581611d10565b8114611d6057600080fd5b50565b600081359050611d7281611d4c565b92915050565b60008060408385031215611d8f57611d8e611b0d565b5b6000611d9d85828601611d63565b9250506020611dae85828601611cae565b9150509250929050565b611dc181611c8d565b82525050565b6000602082019050611ddc6000830184611db8565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e1f82611c21565b810181811067ffffffffffffffff82111715611e3e57611e3d611de7565b5b80604052505050565b6000611e51611b03565b9050611e5d8282611e16565b919050565b600067ffffffffffffffff821115611e7d57611e7c611de7565b5b602082029050602081019050919050565b600080fd5b6000611ea6611ea184611e62565b611e47565b90508083825260208201905060208402830185811115611ec957611ec8611e8e565b5b835b81811015611ef25780611ede8882611cae565b845260208401935050602081019050611ecb565b5050509392505050565b600082601f830112611f1157611f10611de2565b5b8135611f21848260208601611e93565b91505092915050565b60008060408385031215611f4157611f40611b0d565b5b6000611f4f85828601611cae565b925050602083013567ffffffffffffffff811115611f7057611f6f611b12565b5b611f7c85828601611efc565b9150509250929050565b600080600060608486031215611f9f57611f9e611b0d565b5b6000611fad86828701611d63565b9350506020611fbe86828701611d63565b9250506040611fcf86828701611cae565b9150509250925092565b600060039050919050565b600081905092915050565b6000819050919050565b61200281611c8d565b82525050565b60006120148383611ff9565b60208301905092915050565b6000602082019050919050565b61203681611fd9565b6120408184611fe4565b925061204b82611fef565b8060005b8381101561207c5781516120638782612008565b965061206e83612020565b92505060018101905061204f565b505050505050565b6000606082019050612099600083018461202d565b92915050565b6000602082840312156120b5576120b4611b0d565b5b60006120c384828501611d63565b91505092915050565b6120d581611b9c565b81146120e057600080fd5b50565b6000813590506120f2816120cc565b92915050565b6000806040838503121561210f5761210e611b0d565b5b600061211d85828601611d63565b925050602061212e858286016120e3565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061217857612177612138565b5b50565b600081905061218982612167565b919050565b60006121998261217b565b9050919050565b6121a98161218e565b82525050565b60006020820190506121c460008301846121a0565b92915050565b600080fd5b600067ffffffffffffffff8211156121ea576121e9611de7565b5b6121f382611c21565b9050602081019050919050565b82818337600083830152505050565b600061222261221d846121cf565b611e47565b90508281526020810184848401111561223e5761223d6121ca565b5b612249848285612200565b509392505050565b600082601f83011261226657612265611de2565b5b813561227684826020860161220f565b91505092915050565b6000806000806080858703121561229957612298611b0d565b5b60006122a787828801611d63565b94505060206122b887828801611d63565b93505060406122c987828801611cae565b925050606085013567ffffffffffffffff8111156122ea576122e9611b12565b5b6122f687828801612251565b91505092959194509250565b6000806040838503121561231957612318611b0d565b5b600061232785828601611d63565b925050602061233885828601611d63565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061238957607f821691505b6020821081141561239d5761239c612342565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006123ff602183611bdd565b915061240a826123a3565b604082019050919050565b6000602082019050818103600083015261242e816123f2565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612491603d83611bdd565b915061249c82612435565b604082019050919050565b600060208201905081810360008301526124c081612484565b9050919050565b60006040820190506124dc6000830185611d22565b6124e96020830184611d22565b9392505050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b600061254c602d83611bdd565b9150612557826124f0565b604082019050919050565b6000602082019050818103600083015261257b8161253f565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006125b8601883611bdd565b91506125c382612582565b602082019050919050565b600060208201905081810360008301526125e7816125ab565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061264a602983611bdd565b9150612655826125ee565b604082019050919050565b600060208201905081810360008301526126798161263d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126e982611c8d565b91506126f483611c8d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612729576127286126af565b5b828201905092915050565b600061273f82611c8d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612772576127716126af565b5b600182019050919050565b6000819050919050565b6127908161277d565b82525050565b600067ffffffffffffffff82169050919050565b6127b381612796565b82525050565b600061ffff82169050919050565b6127d0816127b9565b82525050565b600063ffffffff82169050919050565b6127ef816127d6565b82525050565b600060a08201905061280a6000830188612787565b61281760208301876127aa565b61282460408301866127c7565b61283160608301856127e6565b61283e60808301846127e6565b9695505050505050565b60008151905061285781611c97565b92915050565b60006020828403121561287357612872611b0d565b5b600061288184828501612848565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006128c482611c8d565b91506128cf83611c8d565b9250826128df576128de61288a565b5b828206905092915050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612946602583611bdd565b9150612951826128ea565b604082019050919050565b6000602082019050818103600083015261297581612939565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006129d8602483611bdd565b91506129e38261297c565b604082019050919050565b60006020820190508181036000830152612a07816129cb565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612a44601983611bdd565b9150612a4f82612a0e565b602082019050919050565b60006020820190508181036000830152612a7381612a37565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612ad6603283611bdd565b9150612ae182612a7a565b604082019050919050565b60006020820190508181036000830152612b0581612ac9565b9050919050565b6000612b1782611c8d565b9150612b2283611c8d565b925082821015612b3557612b346126af565b5b828203905092915050565b600081519050919050565b600082825260208201905092915050565b6000612b6782612b40565b612b718185612b4b565b9350612b81818560208601611bee565b612b8a81611c21565b840191505092915050565b6000608082019050612baa6000830187611d22565b612bb76020830186611d22565b612bc46040830185611db8565b8181036060830152612bd68184612b5c565b905095945050505050565b600081519050612bf081611b43565b92915050565b600060208284031215612c0c57612c0b611b0d565b5b6000612c1a84828501612be1565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612c59602083611bdd565b9150612c6482612c23565b602082019050919050565b60006020820190508181036000830152612c8881612c4c565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612cc5601c83611bdd565b9150612cd082612c8f565b602082019050919050565b60006020820190508181036000830152612cf481612cb8565b905091905056fea264697066735822122049c321713b151e0adb671b80d665d11c035b381ddeefcff324980e72362a88fd64736f6c63430008080033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x121 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xA51CCCF3 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xA51CCCF3 EQ PUSH2 0x31A JUMPI DUP1 PUSH4 0xAA152491 EQ PUSH2 0x34A JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x368 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x384 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x3B4 JUMPI PUSH2 0x121 JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x2B0 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x2CE JUMPI DUP1 PUSH4 0xA36F573B EQ PUSH2 0x2EA JUMPI PUSH2 0x121 JUMP JUMPDEST DUP1 PUSH4 0xB21A83B GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0xB21A83B EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x1DE JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0x5DACF5F4 EQ PUSH2 0x232 JUMPI PUSH2 0x121 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1A4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x140 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x13B SWAP2 SWAP1 PUSH2 0x1B6F JUMP JUMPDEST PUSH2 0x3E4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14D SWAP2 SWAP1 PUSH2 0x1BB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15E PUSH2 0x4C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16B SWAP2 SWAP1 PUSH2 0x1C6B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x189 SWAP2 SWAP1 PUSH2 0x1CC3 JUMP JUMPDEST PUSH2 0x558 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x19B SWAP2 SWAP1 PUSH2 0x1D31 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1BE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1B9 SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST PUSH2 0x59E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C8 PUSH2 0x6B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D5 SWAP2 SWAP1 PUSH2 0x1DC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x1F2A JUMP JUMPDEST PUSH2 0x6BC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x214 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20F SWAP2 SWAP1 PUSH2 0x1F86 JUMP JUMPDEST PUSH2 0x77C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0x1F86 JUMP JUMPDEST PUSH2 0x7DC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x23A PUSH2 0x7FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x247 SWAP2 SWAP1 PUSH2 0x2084 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x26A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x265 SWAP2 SWAP1 PUSH2 0x1CC3 JUMP JUMPDEST PUSH2 0x827 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x277 SWAP2 SWAP1 PUSH2 0x1D31 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x29A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x295 SWAP2 SWAP1 PUSH2 0x209F JUMP JUMPDEST PUSH2 0x8AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A7 SWAP2 SWAP1 PUSH2 0x1DC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B8 PUSH2 0x966 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C5 SWAP2 SWAP1 PUSH2 0x1C6B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E3 SWAP2 SWAP1 PUSH2 0x20F8 JUMP JUMPDEST PUSH2 0x9F8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x304 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2FF SWAP2 SWAP1 PUSH2 0x1CC3 JUMP JUMPDEST PUSH2 0xA0E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x311 SWAP2 SWAP1 PUSH2 0x1D31 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x334 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x32F SWAP2 SWAP1 PUSH2 0x1CC3 JUMP JUMPDEST PUSH2 0xA41 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x341 SWAP2 SWAP1 PUSH2 0x21AF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x352 PUSH2 0xB23 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x35F SWAP2 SWAP1 PUSH2 0x1DC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x382 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x37D SWAP2 SWAP1 PUSH2 0x227F JUMP JUMPDEST PUSH2 0xC91 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x39E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x399 SWAP2 SWAP1 PUSH2 0x1CC3 JUMP JUMPDEST PUSH2 0xCF3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3AB SWAP2 SWAP1 PUSH2 0x1C6B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3CE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3C9 SWAP2 SWAP1 PUSH2 0x2302 JUMP JUMPDEST PUSH2 0xCFA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3DB SWAP2 SWAP1 PUSH2 0x1BB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x4AF JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x4BF JUMPI POP PUSH2 0x4BE DUP3 PUSH2 0xD8E JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x4D5 SWAP1 PUSH2 0x2371 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x501 SWAP1 PUSH2 0x2371 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x54E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x523 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x54E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x531 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x563 DUP3 PUSH2 0xDF8 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5A9 DUP3 PUSH2 0x827 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x61A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x611 SWAP1 PUSH2 0x2415 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x639 PUSH2 0xE43 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x668 JUMPI POP PUSH2 0x667 DUP2 PUSH2 0x662 PUSH2 0xE43 JUMP JUMPDEST PUSH2 0xCFA JUMP JUMPDEST JUMPDEST PUSH2 0x6A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x69E SWAP1 PUSH2 0x24A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x6B1 DUP4 DUP4 PUSH2 0xE4B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x76E JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x765 SWAP3 SWAP2 SWAP1 PUSH2 0x24C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x778 DUP3 DUP3 PUSH2 0xF04 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x78D PUSH2 0x787 PUSH2 0xE43 JUMP JUMPDEST DUP3 PUSH2 0xF8E JUMP JUMPDEST PUSH2 0x7CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7C3 SWAP1 PUSH2 0x2562 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7D7 DUP4 DUP4 DUP4 PUSH2 0x1023 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x7F7 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xC91 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x804 PUSH2 0x1AE1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x64 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x833 DUP4 PUSH2 0x131D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x8A5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x89C SWAP1 PUSH2 0x25CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x91F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x916 SWAP1 PUSH2 0x2660 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x975 SWAP1 PUSH2 0x2371 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9A1 SWAP1 PUSH2 0x2371 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x9EE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x9C3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x9EE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x9D1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xA0A PUSH2 0xA03 PUSH2 0xE43 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x135A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 PUSH2 0xA52 PUSH2 0x7FC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xAEB JUMPI DUP3 DUP6 LT ISZERO DUP1 ISZERO PUSH2 0xA91 JUMPI POP DUP2 DUP2 PUSH1 0x3 DUP2 LT PUSH2 0xA7E JUMPI PUSH2 0xA7D PUSH2 0x2680 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP4 PUSH2 0xA8E SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST DUP6 LT JUMPDEST ISZERO PUSH2 0xAB3 JUMPI DUP1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xAA9 JUMPI PUSH2 0xAA8 PUSH2 0x2138 JUMP JUMPDEST JUMPDEST SWAP4 POP POP POP POP PUSH2 0xB1E JUMP JUMPDEST DUP2 DUP2 PUSH1 0x3 DUP2 LT PUSH2 0xAC6 JUMPI PUSH2 0xAC5 PUSH2 0x2680 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL ADD MLOAD DUP4 PUSH2 0xAD6 SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST SWAP3 POP DUP1 DUP1 PUSH2 0xAE3 SWAP1 PUSH2 0x2734 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xA57 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x12806C9D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBE8 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x27F5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC02 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC16 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC3A SWAP2 SWAP1 PUSH2 0x285D JUMP JUMPDEST SWAP1 POP CALLER PUSH1 0x6 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0xCA2 PUSH2 0xC9C PUSH2 0xE43 JUMP JUMPDEST DUP4 PUSH2 0xF8E JUMP JUMPDEST PUSH2 0xCE1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCD8 SWAP1 PUSH2 0x2562 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xCED DUP5 DUP5 DUP5 DUP5 PUSH2 0x14C7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE01 DUP2 PUSH2 0x1523 JUMP JUMPDEST PUSH2 0xE40 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE37 SWAP1 PUSH2 0x25CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xEBE DUP4 PUSH2 0x827 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x7 SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x64 DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xF5B JUMPI PUSH2 0xF5A PUSH2 0x2680 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xF6D SWAP2 SWAP1 PUSH2 0x28B9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xF7A DUP3 PUSH2 0xA41 JUMP JUMPDEST SWAP1 POP PUSH2 0xF86 DUP5 DUP5 PUSH2 0x1564 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xF9A DUP4 PUSH2 0x827 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xFDC JUMPI POP PUSH2 0xFDB DUP2 DUP6 PUSH2 0xCFA JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x101A JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1002 DUP5 PUSH2 0x558 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1043 DUP3 PUSH2 0x827 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1099 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1090 SWAP1 PUSH2 0x295C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1109 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1100 SWAP1 PUSH2 0x29EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1116 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1582 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1136 DUP3 PUSH2 0x827 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x118C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1183 SWAP1 PUSH2 0x295C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1318 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x16A8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x13C9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13C0 SWAP1 PUSH2 0x2A5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x14BA SWAP2 SWAP1 PUSH2 0x1BB7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x14D2 DUP5 DUP5 DUP5 PUSH2 0x1023 JUMP JUMPDEST PUSH2 0x14DE DUP5 DUP5 DUP5 DUP5 PUSH2 0x16AE JUMP JUMPDEST PUSH2 0x151D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1514 SWAP1 PUSH2 0x2AEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1545 DUP4 PUSH2 0x131D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x157E DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1845 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x16A2 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1616 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x160E SWAP2 SWAP1 PUSH2 0x2B0C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x16A1 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1699 SWAP2 SWAP1 PUSH2 0x26DE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x16CF DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x18A0 JUMP JUMPDEST ISZERO PUSH2 0x1838 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x16F8 PUSH2 0xE43 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x171A SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B95 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1734 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1765 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1762 SWAP2 SWAP1 PUSH2 0x2BF6 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x17E8 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1795 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x179A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x17E0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17D7 SWAP1 PUSH2 0x2AEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x183D JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x184F DUP4 DUP4 PUSH2 0x18C3 JUMP JUMPDEST PUSH2 0x185C PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x16AE JUMP JUMPDEST PUSH2 0x189B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1892 SWAP1 PUSH2 0x2AEC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1933 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x192A SWAP1 PUSH2 0x2C6F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x193C DUP2 PUSH2 0x1523 JUMP JUMPDEST ISZERO PUSH2 0x197C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1973 SWAP1 PUSH2 0x2CDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x198A PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1582 JUMP JUMPDEST PUSH2 0x1993 DUP2 PUSH2 0x1523 JUMP JUMPDEST ISZERO PUSH2 0x19D3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19CA SWAP1 PUSH2 0x2CDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1ADD PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x16A8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B4C DUP2 PUSH2 0x1B17 JUMP JUMPDEST DUP2 EQ PUSH2 0x1B57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1B69 DUP2 PUSH2 0x1B43 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B85 JUMPI PUSH2 0x1B84 PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B93 DUP5 DUP3 DUP6 ADD PUSH2 0x1B5A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BB1 DUP2 PUSH2 0x1B9C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1BCC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1BA8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C0C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1BF1 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1C1B JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C3D DUP3 PUSH2 0x1BD2 JUMP JUMPDEST PUSH2 0x1C47 DUP2 DUP6 PUSH2 0x1BDD JUMP JUMPDEST SWAP4 POP PUSH2 0x1C57 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1BEE JUMP JUMPDEST PUSH2 0x1C60 DUP2 PUSH2 0x1C21 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C85 DUP2 DUP5 PUSH2 0x1C32 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1CA0 DUP2 PUSH2 0x1C8D JUMP JUMPDEST DUP2 EQ PUSH2 0x1CAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1CBD DUP2 PUSH2 0x1C97 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CD9 JUMPI PUSH2 0x1CD8 PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1CE7 DUP5 DUP3 DUP6 ADD PUSH2 0x1CAE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D1B DUP3 PUSH2 0x1CF0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1D2B DUP2 PUSH2 0x1D10 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1D46 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1D22 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1D55 DUP2 PUSH2 0x1D10 JUMP JUMPDEST DUP2 EQ PUSH2 0x1D60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1D72 DUP2 PUSH2 0x1D4C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D8F JUMPI PUSH2 0x1D8E PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1D9D DUP6 DUP3 DUP7 ADD PUSH2 0x1D63 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1DAE DUP6 DUP3 DUP7 ADD PUSH2 0x1CAE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1DC1 DUP2 PUSH2 0x1C8D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1DDC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1DB8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1E1F DUP3 PUSH2 0x1C21 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1E3E JUMPI PUSH2 0x1E3D PUSH2 0x1DE7 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E51 PUSH2 0x1B03 JUMP JUMPDEST SWAP1 POP PUSH2 0x1E5D DUP3 DUP3 PUSH2 0x1E16 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1E7D JUMPI PUSH2 0x1E7C PUSH2 0x1DE7 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1EA6 PUSH2 0x1EA1 DUP5 PUSH2 0x1E62 JUMP JUMPDEST PUSH2 0x1E47 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x1EC9 JUMPI PUSH2 0x1EC8 PUSH2 0x1E8E JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1EF2 JUMPI DUP1 PUSH2 0x1EDE DUP9 DUP3 PUSH2 0x1CAE JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1ECB JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1F11 JUMPI PUSH2 0x1F10 PUSH2 0x1DE2 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1F21 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1E93 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F41 JUMPI PUSH2 0x1F40 PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1F4F DUP6 DUP3 DUP7 ADD PUSH2 0x1CAE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F70 JUMPI PUSH2 0x1F6F PUSH2 0x1B12 JUMP JUMPDEST JUMPDEST PUSH2 0x1F7C DUP6 DUP3 DUP7 ADD PUSH2 0x1EFC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F9F JUMPI PUSH2 0x1F9E PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1FAD DUP7 DUP3 DUP8 ADD PUSH2 0x1D63 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1FBE DUP7 DUP3 DUP8 ADD PUSH2 0x1D63 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1FCF DUP7 DUP3 DUP8 ADD PUSH2 0x1CAE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2002 DUP2 PUSH2 0x1C8D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2014 DUP4 DUP4 PUSH2 0x1FF9 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2036 DUP2 PUSH2 0x1FD9 JUMP JUMPDEST PUSH2 0x2040 DUP2 DUP5 PUSH2 0x1FE4 JUMP JUMPDEST SWAP3 POP PUSH2 0x204B DUP3 PUSH2 0x1FEF JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x207C JUMPI DUP2 MLOAD PUSH2 0x2063 DUP8 DUP3 PUSH2 0x2008 JUMP JUMPDEST SWAP7 POP PUSH2 0x206E DUP4 PUSH2 0x2020 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x204F JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2099 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x202D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20B5 JUMPI PUSH2 0x20B4 PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20C3 DUP5 DUP3 DUP6 ADD PUSH2 0x1D63 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x20D5 DUP2 PUSH2 0x1B9C JUMP JUMPDEST DUP2 EQ PUSH2 0x20E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x20F2 DUP2 PUSH2 0x20CC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x210F JUMPI PUSH2 0x210E PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x211D DUP6 DUP3 DUP7 ADD PUSH2 0x1D63 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x212E DUP6 DUP3 DUP7 ADD PUSH2 0x20E3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x2178 JUMPI PUSH2 0x2177 PUSH2 0x2138 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x2189 DUP3 PUSH2 0x2167 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2199 DUP3 PUSH2 0x217B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21A9 DUP2 PUSH2 0x218E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x21C4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x21A0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x21EA JUMPI PUSH2 0x21E9 PUSH2 0x1DE7 JUMP JUMPDEST JUMPDEST PUSH2 0x21F3 DUP3 PUSH2 0x1C21 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2222 PUSH2 0x221D DUP5 PUSH2 0x21CF JUMP JUMPDEST PUSH2 0x1E47 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x223E JUMPI PUSH2 0x223D PUSH2 0x21CA JUMP JUMPDEST JUMPDEST PUSH2 0x2249 DUP5 DUP3 DUP6 PUSH2 0x2200 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2266 JUMPI PUSH2 0x2265 PUSH2 0x1DE2 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2276 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x220F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2299 JUMPI PUSH2 0x2298 PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x22A7 DUP8 DUP3 DUP9 ADD PUSH2 0x1D63 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x22B8 DUP8 DUP3 DUP9 ADD PUSH2 0x1D63 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x22C9 DUP8 DUP3 DUP9 ADD PUSH2 0x1CAE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x22EA JUMPI PUSH2 0x22E9 PUSH2 0x1B12 JUMP JUMPDEST JUMPDEST PUSH2 0x22F6 DUP8 DUP3 DUP9 ADD PUSH2 0x2251 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2319 JUMPI PUSH2 0x2318 PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2327 DUP6 DUP3 DUP7 ADD PUSH2 0x1D63 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2338 DUP6 DUP3 DUP7 ADD PUSH2 0x1D63 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2389 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x239D JUMPI PUSH2 0x239C PUSH2 0x2342 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23FF PUSH1 0x21 DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x240A DUP3 PUSH2 0x23A3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x242E DUP2 PUSH2 0x23F2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2491 PUSH1 0x3D DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x249C DUP3 PUSH2 0x2435 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x24C0 DUP2 PUSH2 0x2484 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x24DC PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1D22 JUMP JUMPDEST PUSH2 0x24E9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1D22 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x254C PUSH1 0x2D DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x2557 DUP3 PUSH2 0x24F0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x257B DUP2 PUSH2 0x253F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25B8 PUSH1 0x18 DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x25C3 DUP3 PUSH2 0x2582 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x25E7 DUP2 PUSH2 0x25AB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x264A PUSH1 0x29 DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x2655 DUP3 PUSH2 0x25EE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2679 DUP2 PUSH2 0x263D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x26E9 DUP3 PUSH2 0x1C8D JUMP JUMPDEST SWAP2 POP PUSH2 0x26F4 DUP4 PUSH2 0x1C8D JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x2729 JUMPI PUSH2 0x2728 PUSH2 0x26AF JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x273F DUP3 PUSH2 0x1C8D JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x2772 JUMPI PUSH2 0x2771 PUSH2 0x26AF JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2790 DUP2 PUSH2 0x277D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x27B3 DUP2 PUSH2 0x2796 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x27D0 DUP2 PUSH2 0x27B9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x27EF DUP2 PUSH2 0x27D6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x280A PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x2787 JUMP JUMPDEST PUSH2 0x2817 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x27AA JUMP JUMPDEST PUSH2 0x2824 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x27C7 JUMP JUMPDEST PUSH2 0x2831 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x27E6 JUMP JUMPDEST PUSH2 0x283E PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x27E6 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2857 DUP2 PUSH2 0x1C97 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2873 JUMPI PUSH2 0x2872 PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2881 DUP5 DUP3 DUP6 ADD PUSH2 0x2848 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x28C4 DUP3 PUSH2 0x1C8D JUMP JUMPDEST SWAP2 POP PUSH2 0x28CF DUP4 PUSH2 0x1C8D JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x28DF JUMPI PUSH2 0x28DE PUSH2 0x288A JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2946 PUSH1 0x25 DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x2951 DUP3 PUSH2 0x28EA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2975 DUP2 PUSH2 0x2939 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29D8 PUSH1 0x24 DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x29E3 DUP3 PUSH2 0x297C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A07 DUP2 PUSH2 0x29CB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A44 PUSH1 0x19 DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x2A4F DUP3 PUSH2 0x2A0E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A73 DUP2 PUSH2 0x2A37 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AD6 PUSH1 0x32 DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x2AE1 DUP3 PUSH2 0x2A7A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2B05 DUP2 PUSH2 0x2AC9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B17 DUP3 PUSH2 0x1C8D JUMP JUMPDEST SWAP2 POP PUSH2 0x2B22 DUP4 PUSH2 0x1C8D JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x2B35 JUMPI PUSH2 0x2B34 PUSH2 0x26AF JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B67 DUP3 PUSH2 0x2B40 JUMP JUMPDEST PUSH2 0x2B71 DUP2 DUP6 PUSH2 0x2B4B JUMP JUMPDEST SWAP4 POP PUSH2 0x2B81 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1BEE JUMP JUMPDEST PUSH2 0x2B8A DUP2 PUSH2 0x1C21 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2BAA PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1D22 JUMP JUMPDEST PUSH2 0x2BB7 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1D22 JUMP JUMPDEST PUSH2 0x2BC4 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1DB8 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2BD6 DUP2 DUP5 PUSH2 0x2B5C JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2BF0 DUP2 PUSH2 0x1B43 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2C0C JUMPI PUSH2 0x2C0B PUSH2 0x1B0D JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2C1A DUP5 DUP3 DUP6 ADD PUSH2 0x2BE1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C59 PUSH1 0x20 DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x2C64 DUP3 PUSH2 0x2C23 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2C88 DUP2 PUSH2 0x2C4C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CC5 PUSH1 0x1C DUP4 PUSH2 0x1BDD JUMP JUMPDEST SWAP2 POP PUSH2 0x2CD0 DUP3 PUSH2 0x2C8F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2CF4 DUP2 PUSH2 0x2CB8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x49 0xC3 0x21 PUSH18 0x3B151E0ADB671B80D665D11C035B381DDEEF 0xCF RETURN 0x24 SWAP9 0xE PUSH19 0x362A88FD64736F6C6343000808003300000000 ","sourceMap":"301:2821:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1126:29:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6618:256:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4612:326:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5004:179;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2911:115:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2190:219:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1044:54:12;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2425:480;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1630:327;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5249:314:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3032:88:12;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4388:162:2;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1570:300;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;1126:29:12:-;;;;:::o;6618:256:0:-;6731:14;6717:28;;:10;:28;;;6713:109;;6788:10;6800:14;6762:53;;;;;;;;;;;;:::i;:::-;;;;;;;;6713:109;6827:42;6846:9;6857:11;6827:18;:42::i;:::-;6618:256;;:::o;4612:326:2:-;4801:41;4820:12;:10;:12::i;:::-;4834:7;4801:18;:41::i;:::-;4793:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;:::-;4612:326;;;:::o;5004:179::-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;2911:115:12:-;2957:17;;:::i;:::-;2986:33;;;;;;;;2994:2;2986:33;;;;2998:2;2986:33;;;;1206:3;2986:33;;;;;2911:115;:::o;2190:219:2:-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;1929:204::-;2001:7;2045:1;2028:19;;:5;:19;;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;4169:153::-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;1044:54:12:-;;;;;;;;;;;;;;;;;;;;;;:::o;2425:480::-;2496:5;2513:21;2537:1;2513:25;;2548:29;2580:16;:14;:16::i;:::-;2548:48;;2610:9;2606:243;2629:18;2625:1;:22;2606:243;;;2685:13;2672:9;:26;;:72;;;;;2730:11;2742:1;2730:14;;;;;;;:::i;:::-;;;;;;2714:13;:30;;;;:::i;:::-;2702:9;:42;2672:72;2668:126;;;2777:1;2771:8;;;;;;;;:::i;:::-;;2764:15;;;;;;;2668:126;2824:11;2836:1;2824:14;;;;;;;:::i;:::-;;;;;;2807:31;;;;;:::i;:::-;;;2649:3;;;;;:::i;:::-;;;;2606:243;;;;2865:33;;;;;;;;;;;;;;2425:480;;;;:::o;1630:327::-;1668:17;1709:16;:35;;;1758:9;1781:16;964:1;1846:18;1007:1;1709:188;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1697:200;;1940:10;1907:19;:30;1927:9;1907:30;;;;;;;;;;;;:43;;;;;;;;;;;;;;;;;;1630:327;:::o;5249:314:2:-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;3032:88:12:-;3097:13;3032:88;;;:::o;4388:162:2:-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;829:155:9:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;13466:133:2:-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13466:133;:::o;640:96:7:-;693:7;719:10;712:17;;640:96;:::o;12768:171:2:-;12869:2;12842:15;:24;12858:7;12842:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12924:7;12920:2;12886:46;;12895:23;12910:7;12895:14;:23::i;:::-;12886:46;;;;;;;;;;;;12768:171;;:::o;1963:456:12:-;2068:16;2087:19;:30;2107:9;2087:30;;;;;;;;;;;;;;;;;;;;;2068:49;;2127:18;2148:14;;2127:35;;2223:17;1206:3;2243:11;2255:1;2243:14;;;;;;;;:::i;:::-;;;;;;;;:33;;;;:::i;:::-;2223:53;;2322:14;2339:32;2361:9;2339:21;:32::i;:::-;2322:49;;2381:31;2391:8;2401:10;2381:9;:31::i;:::-;2058:361;;;;1963:456;;:::o;7540:261:2:-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11423:1233::-;11577:4;11550:31;;:23;11565:7;11550:14;:23::i;:::-;:31;;;11542:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11655:1;11641:16;;:2;:16;;;;11633:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;11851:31;;:23;11866:7;11851:14;:23::i;:::-;:31;;;11843:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11993:15;:24;12009:7;11993:24;;;;;;;;;;;;11986:31;;;;;;;;;;;12480:1;12461:9;:15;12471:4;12461:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12512:1;12495:9;:13;12505:2;12495:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12552:2;12533:7;:16;12541:7;12533:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12589:7;12585:2;12570:27;;12579:4;12570:27;;;;;;;;;;;;12608:41;12628:4;12634:2;12638:7;12647:1;12608:19;:41::i;:::-;11423:1233;;;:::o;6838:115::-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;13075:307::-;13225:8;13216:17;;:5;:17;;;;13208:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13311:8;13273:18;:25;13292:5;13273:25;;;;;;;;;;;;;;;:35;13299:8;13273:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13356:8;13334:41;;13349:5;13334:41;;;13366:8;13334:41;;;;;;:::i;:::-;;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;7256:126::-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;8131:108::-;8206:26;8216:2;8220:7;8206:26;;;;;;;;;;;;:9;:26::i;:::-;8131:108;;:::o;15698:396::-;15882:1;15870:9;:13;15866:222;;;15919:1;15903:18;;:4;:18;;;15899:85;;15960:9;15941;:15;15951:4;15941:15;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;15899:85;16015:1;16001:16;;:2;:16;;;15997:81;;16054:9;16037;:13;16047:2;16037:13;;;;;;;;;;;;;;;;:26;;;;;;;:::i;:::-;;;;;;;;15997:81;15866:222;15698:396;;;;:::o;16800:153::-;;;;;:::o;14151:831::-;14300:4;14320:15;:2;:13;;;:15::i;:::-;14316:660;;;14371:2;14355:36;;;14392:12;:10;:12::i;:::-;14406:4;14412:7;14421:4;14355:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14610:1;14593:6;:13;:18;14589:321;;;14635:60;;;;;;;;;;:::i;:::-;;;;;;;;14589:321;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;14486:41;;;14476:51;;;:6;:51;;;;14469:58;;;;;14316:660;14961:4;14954:11;;14151:831;;;;;;;:::o;8460:309::-;8584:18;8590:2;8594:7;8584:5;:18::i;:::-;8633:53;8664:1;8668:2;8672:7;8681:4;8633:22;:53::i;:::-;8612:150;;;;;;;;;;;;:::i;:::-;;;;;;;;;8460:309;;;:::o;1175:320:6:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;9091:920:2:-;9184:1;9170:16;;:2;:16;;;;9162:61;;;;;;;;;;;;:::i;:::-;;;;;;;;;9242:16;9250:7;9242;:16::i;:::-;9241:17;9233:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9302:48;9331:1;9335:2;9339:7;9348:1;9302:20;:48::i;:::-;9446:16;9454:7;9446;:16::i;:::-;9445:17;9437:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9854:1;9837:9;:13;9847:2;9837:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;9895:2;9876:7;:16;9884:7;9876:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;9938:7;9934:2;9913:33;;9930:1;9913:33;;;;;;;;;;;;9957:47;9985:1;9989:2;9993:7;10002:1;9957:19;:47::i;:::-;9091:920;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7:75:13:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:307::-;1866:1;1876:113;1890:6;1887:1;1884:13;1876:113;;;1975:1;1970:3;1966:11;1960:18;1956:1;1951:3;1947:11;1940:39;1912:2;1909:1;1905:10;1900:15;;1876:113;;;2007:6;2004:1;2001:13;1998:101;;;2087:1;2078:6;2073:3;2069:16;2062:27;1998:101;1847:258;1798:307;;;:::o;2111:102::-;2152:6;2203:2;2199:7;2194:2;2187:5;2183:14;2179:28;2169:38;;2111:102;;;:::o;2219:364::-;2307:3;2335:39;2368:5;2335:39;:::i;:::-;2390:71;2454:6;2449:3;2390:71;:::i;:::-;2383:78;;2470:52;2515:6;2510:3;2503:4;2496:5;2492:16;2470:52;:::i;:::-;2547:29;2569:6;2547:29;:::i;:::-;2542:3;2538:39;2531:46;;2311:272;2219:364;;;;:::o;2589:313::-;2702:4;2740:2;2729:9;2725:18;2717:26;;2789:9;2783:4;2779:20;2775:1;2764:9;2760:17;2753:47;2817:78;2890:4;2881:6;2817:78;:::i;:::-;2809:86;;2589:313;;;;:::o;2908:77::-;2945:7;2974:5;2963:16;;2908:77;;;:::o;2991:122::-;3064:24;3082:5;3064:24;:::i;:::-;3057:5;3054:35;3044:63;;3103:1;3100;3093:12;3044:63;2991:122;:::o;3119:139::-;3165:5;3203:6;3190:20;3181:29;;3219:33;3246:5;3219:33;:::i;:::-;3119:139;;;;:::o;3264:329::-;3323:6;3372:2;3360:9;3351:7;3347:23;3343:32;3340:119;;;3378:79;;:::i;:::-;3340:119;3498:1;3523:53;3568:7;3559:6;3548:9;3544:22;3523:53;:::i;:::-;3513:63;;3469:117;3264:329;;;;:::o;3599:126::-;3636:7;3676:42;3669:5;3665:54;3654:65;;3599:126;;;:::o;3731:96::-;3768:7;3797:24;3815:5;3797:24;:::i;:::-;3786:35;;3731:96;;;:::o;3833:118::-;3920:24;3938:5;3920:24;:::i;:::-;3915:3;3908:37;3833:118;;:::o;3957:222::-;4050:4;4088:2;4077:9;4073:18;4065:26;;4101:71;4169:1;4158:9;4154:17;4145:6;4101:71;:::i;:::-;3957:222;;;;:::o;4185:122::-;4258:24;4276:5;4258:24;:::i;:::-;4251:5;4248:35;4238:63;;4297:1;4294;4287:12;4238:63;4185:122;:::o;4313:139::-;4359:5;4397:6;4384:20;4375:29;;4413:33;4440:5;4413:33;:::i;:::-;4313:139;;;;:::o;4458:474::-;4526:6;4534;4583:2;4571:9;4562:7;4558:23;4554:32;4551:119;;;4589:79;;:::i;:::-;4551:119;4709:1;4734:53;4779:7;4770:6;4759:9;4755:22;4734:53;:::i;:::-;4724:63;;4680:117;4836:2;4862:53;4907:7;4898:6;4887:9;4883:22;4862:53;:::i;:::-;4852:63;;4807:118;4458:474;;;;;:::o;4938:118::-;5025:24;5043:5;5025:24;:::i;:::-;5020:3;5013:37;4938:118;;:::o;5062:222::-;5155:4;5193:2;5182:9;5178:18;5170:26;;5206:71;5274:1;5263:9;5259:17;5250:6;5206:71;:::i;:::-;5062:222;;;;:::o;5290:117::-;5399:1;5396;5389:12;5413:180;5461:77;5458:1;5451:88;5558:4;5555:1;5548:15;5582:4;5579:1;5572:15;5599:281;5682:27;5704:4;5682:27;:::i;:::-;5674:6;5670:40;5812:6;5800:10;5797:22;5776:18;5764:10;5761:34;5758:62;5755:88;;;5823:18;;:::i;:::-;5755:88;5863:10;5859:2;5852:22;5642:238;5599:281;;:::o;5886:129::-;5920:6;5947:20;;:::i;:::-;5937:30;;5976:33;6004:4;5996:6;5976:33;:::i;:::-;5886:129;;;:::o;6021:311::-;6098:4;6188:18;6180:6;6177:30;6174:56;;;6210:18;;:::i;:::-;6174:56;6260:4;6252:6;6248:17;6240:25;;6320:4;6314;6310:15;6302:23;;6021:311;;;:::o;6338:117::-;6447:1;6444;6437:12;6478:710;6574:5;6599:81;6615:64;6672:6;6615:64;:::i;:::-;6599:81;:::i;:::-;6590:90;;6700:5;6729:6;6722:5;6715:21;6763:4;6756:5;6752:16;6745:23;;6816:4;6808:6;6804:17;6796:6;6792:30;6845:3;6837:6;6834:15;6831:122;;;6864:79;;:::i;:::-;6831:122;6979:6;6962:220;6996:6;6991:3;6988:15;6962:220;;;7071:3;7100:37;7133:3;7121:10;7100:37;:::i;:::-;7095:3;7088:50;7167:4;7162:3;7158:14;7151:21;;7038:144;7022:4;7017:3;7013:14;7006:21;;6962:220;;;6966:21;6580:608;;6478:710;;;;;:::o;7211:370::-;7282:5;7331:3;7324:4;7316:6;7312:17;7308:27;7298:122;;7339:79;;:::i;:::-;7298:122;7456:6;7443:20;7481:94;7571:3;7563:6;7556:4;7548:6;7544:17;7481:94;:::i;:::-;7472:103;;7288:293;7211:370;;;;:::o;7587:684::-;7680:6;7688;7737:2;7725:9;7716:7;7712:23;7708:32;7705:119;;;7743:79;;:::i;:::-;7705:119;7863:1;7888:53;7933:7;7924:6;7913:9;7909:22;7888:53;:::i;:::-;7878:63;;7834:117;8018:2;8007:9;8003:18;7990:32;8049:18;8041:6;8038:30;8035:117;;;8071:79;;:::i;:::-;8035:117;8176:78;8246:7;8237:6;8226:9;8222:22;8176:78;:::i;:::-;8166:88;;7961:303;7587:684;;;;;:::o;8277:619::-;8354:6;8362;8370;8419:2;8407:9;8398:7;8394:23;8390:32;8387:119;;;8425:79;;:::i;:::-;8387:119;8545:1;8570:53;8615:7;8606:6;8595:9;8591:22;8570:53;:::i;:::-;8560:63;;8516:117;8672:2;8698:53;8743:7;8734:6;8723:9;8719:22;8698:53;:::i;:::-;8688:63;;8643:118;8800:2;8826:53;8871:7;8862:6;8851:9;8847:22;8826:53;:::i;:::-;8816:63;;8771:118;8277:619;;;;;:::o;8902:104::-;8967:6;8995:4;8985:14;;8902:104;;;:::o;9012:143::-;9109:11;9146:3;9131:18;;9012:143;;;;:::o;9161:98::-;9226:4;9249:3;9241:11;;9161:98;;;:::o;9265:108::-;9342:24;9360:5;9342:24;:::i;:::-;9337:3;9330:37;9265:108;;:::o;9379:179::-;9448:10;9469:46;9511:3;9503:6;9469:46;:::i;:::-;9547:4;9542:3;9538:14;9524:28;;9379:179;;;;:::o;9564:111::-;9632:4;9664;9659:3;9655:14;9647:22;;9564:111;;;:::o;9713:694::-;9849:52;9895:5;9849:52;:::i;:::-;9917:84;9994:6;9989:3;9917:84;:::i;:::-;9910:91;;10025:54;10073:5;10025:54;:::i;:::-;10102:7;10133:1;10118:282;10143:6;10140:1;10137:13;10118:282;;;10219:6;10213:13;10246:63;10305:3;10290:13;10246:63;:::i;:::-;10239:70;;10332:58;10383:6;10332:58;:::i;:::-;10322:68;;10178:222;10165:1;10162;10158:9;10153:14;;10118:282;;;10122:14;9825:582;;;9713:694;;:::o;10413:314::-;10552:4;10590:2;10579:9;10575:18;10567:26;;10603:117;10717:1;10706:9;10702:17;10693:6;10603:117;:::i;:::-;10413:314;;;;:::o;10733:329::-;10792:6;10841:2;10829:9;10820:7;10816:23;10812:32;10809:119;;;10847:79;;:::i;:::-;10809:119;10967:1;10992:53;11037:7;11028:6;11017:9;11013:22;10992:53;:::i;:::-;10982:63;;10938:117;10733:329;;;;:::o;11068:116::-;11138:21;11153:5;11138:21;:::i;:::-;11131:5;11128:32;11118:60;;11174:1;11171;11164:12;11118:60;11068:116;:::o;11190:133::-;11233:5;11271:6;11258:20;11249:29;;11287:30;11311:5;11287:30;:::i;:::-;11190:133;;;;:::o;11329:468::-;11394:6;11402;11451:2;11439:9;11430:7;11426:23;11422:32;11419:119;;;11457:79;;:::i;:::-;11419:119;11577:1;11602:53;11647:7;11638:6;11627:9;11623:22;11602:53;:::i;:::-;11592:63;;11548:117;11704:2;11730:50;11772:7;11763:6;11752:9;11748:22;11730:50;:::i;:::-;11720:60;;11675:115;11329:468;;;;;:::o;11803:180::-;11851:77;11848:1;11841:88;11948:4;11945:1;11938:15;11972:4;11969:1;11962:15;11989:115;12072:1;12065:5;12062:12;12052:46;;12078:18;;:::i;:::-;12052:46;11989:115;:::o;12110:131::-;12157:7;12186:5;12175:16;;12192:43;12229:5;12192:43;:::i;:::-;12110:131;;;:::o;12247:::-;12305:9;12338:34;12366:5;12338:34;:::i;:::-;12325:47;;12247:131;;;:::o;12384:147::-;12479:45;12518:5;12479:45;:::i;:::-;12474:3;12467:58;12384:147;;:::o;12537:238::-;12638:4;12676:2;12665:9;12661:18;12653:26;;12689:79;12765:1;12754:9;12750:17;12741:6;12689:79;:::i;:::-;12537:238;;;;:::o;12781:117::-;12890:1;12887;12880:12;12904:307;12965:4;13055:18;13047:6;13044:30;13041:56;;;13077:18;;:::i;:::-;13041:56;13115:29;13137:6;13115:29;:::i;:::-;13107:37;;13199:4;13193;13189:15;13181:23;;12904:307;;;:::o;13217:154::-;13301:6;13296:3;13291;13278:30;13363:1;13354:6;13349:3;13345:16;13338:27;13217:154;;;:::o;13377:410::-;13454:5;13479:65;13495:48;13536:6;13495:48;:::i;:::-;13479:65;:::i;:::-;13470:74;;13567:6;13560:5;13553:21;13605:4;13598:5;13594:16;13643:3;13634:6;13629:3;13625:16;13622:25;13619:112;;;13650:79;;:::i;:::-;13619:112;13740:41;13774:6;13769:3;13764;13740:41;:::i;:::-;13460:327;13377:410;;;;;:::o;13806:338::-;13861:5;13910:3;13903:4;13895:6;13891:17;13887:27;13877:122;;13918:79;;:::i;:::-;13877:122;14035:6;14022:20;14060:78;14134:3;14126:6;14119:4;14111:6;14107:17;14060:78;:::i;:::-;14051:87;;13867:277;13806:338;;;;:::o;14150:943::-;14245:6;14253;14261;14269;14318:3;14306:9;14297:7;14293:23;14289:33;14286:120;;;14325:79;;:::i;:::-;14286:120;14445:1;14470:53;14515:7;14506:6;14495:9;14491:22;14470:53;:::i;:::-;14460:63;;14416:117;14572:2;14598:53;14643:7;14634:6;14623:9;14619:22;14598:53;:::i;:::-;14588:63;;14543:118;14700:2;14726:53;14771:7;14762:6;14751:9;14747:22;14726:53;:::i;:::-;14716:63;;14671:118;14856:2;14845:9;14841:18;14828:32;14887:18;14879:6;14876:30;14873:117;;;14909:79;;:::i;:::-;14873:117;15014:62;15068:7;15059:6;15048:9;15044:22;15014:62;:::i;:::-;15004:72;;14799:287;14150:943;;;;;;;:::o;15099:474::-;15167:6;15175;15224:2;15212:9;15203:7;15199:23;15195:32;15192:119;;;15230:79;;:::i;:::-;15192:119;15350:1;15375:53;15420:7;15411:6;15400:9;15396:22;15375:53;:::i;:::-;15365:63;;15321:117;15477:2;15503:53;15548:7;15539:6;15528:9;15524:22;15503:53;:::i;:::-;15493:63;;15448:118;15099:474;;;;;:::o;15579:180::-;15627:77;15624:1;15617:88;15724:4;15721:1;15714:15;15748:4;15745:1;15738:15;15765:320;15809:6;15846:1;15840:4;15836:12;15826:22;;15893:1;15887:4;15883:12;15914:18;15904:81;;15970:4;15962:6;15958:17;15948:27;;15904:81;16032:2;16024:6;16021:14;16001:18;15998:38;15995:84;;;16051:18;;:::i;:::-;15995:84;15816:269;15765:320;;;:::o;16091:220::-;16231:34;16227:1;16219:6;16215:14;16208:58;16300:3;16295:2;16287:6;16283:15;16276:28;16091:220;:::o;16317:366::-;16459:3;16480:67;16544:2;16539:3;16480:67;:::i;:::-;16473:74;;16556:93;16645:3;16556:93;:::i;:::-;16674:2;16669:3;16665:12;16658:19;;16317:366;;;:::o;16689:419::-;16855:4;16893:2;16882:9;16878:18;16870:26;;16942:9;16936:4;16932:20;16928:1;16917:9;16913:17;16906:47;16970:131;17096:4;16970:131;:::i;:::-;16962:139;;16689:419;;;:::o;17114:248::-;17254:34;17250:1;17242:6;17238:14;17231:58;17323:31;17318:2;17310:6;17306:15;17299:56;17114:248;:::o;17368:366::-;17510:3;17531:67;17595:2;17590:3;17531:67;:::i;:::-;17524:74;;17607:93;17696:3;17607:93;:::i;:::-;17725:2;17720:3;17716:12;17709:19;;17368:366;;;:::o;17740:419::-;17906:4;17944:2;17933:9;17929:18;17921:26;;17993:9;17987:4;17983:20;17979:1;17968:9;17964:17;17957:47;18021:131;18147:4;18021:131;:::i;:::-;18013:139;;17740:419;;;:::o;18165:332::-;18286:4;18324:2;18313:9;18309:18;18301:26;;18337:71;18405:1;18394:9;18390:17;18381:6;18337:71;:::i;:::-;18418:72;18486:2;18475:9;18471:18;18462:6;18418:72;:::i;:::-;18165:332;;;;;:::o;18503:232::-;18643:34;18639:1;18631:6;18627:14;18620:58;18712:15;18707:2;18699:6;18695:15;18688:40;18503:232;:::o;18741:366::-;18883:3;18904:67;18968:2;18963:3;18904:67;:::i;:::-;18897:74;;18980:93;19069:3;18980:93;:::i;:::-;19098:2;19093:3;19089:12;19082:19;;18741:366;;;:::o;19113:419::-;19279:4;19317:2;19306:9;19302:18;19294:26;;19366:9;19360:4;19356:20;19352:1;19341:9;19337:17;19330:47;19394:131;19520:4;19394:131;:::i;:::-;19386:139;;19113:419;;;:::o;19538:174::-;19678:26;19674:1;19666:6;19662:14;19655:50;19538:174;:::o;19718:366::-;19860:3;19881:67;19945:2;19940:3;19881:67;:::i;:::-;19874:74;;19957:93;20046:3;19957:93;:::i;:::-;20075:2;20070:3;20066:12;20059:19;;19718:366;;;:::o;20090:419::-;20256:4;20294:2;20283:9;20279:18;20271:26;;20343:9;20337:4;20333:20;20329:1;20318:9;20314:17;20307:47;20371:131;20497:4;20371:131;:::i;:::-;20363:139;;20090:419;;;:::o;20515:228::-;20655:34;20651:1;20643:6;20639:14;20632:58;20724:11;20719:2;20711:6;20707:15;20700:36;20515:228;:::o;20749:366::-;20891:3;20912:67;20976:2;20971:3;20912:67;:::i;:::-;20905:74;;20988:93;21077:3;20988:93;:::i;:::-;21106:2;21101:3;21097:12;21090:19;;20749:366;;;:::o;21121:419::-;21287:4;21325:2;21314:9;21310:18;21302:26;;21374:9;21368:4;21364:20;21360:1;21349:9;21345:17;21338:47;21402:131;21528:4;21402:131;:::i;:::-;21394:139;;21121:419;;;:::o;21546:180::-;21594:77;21591:1;21584:88;21691:4;21688:1;21681:15;21715:4;21712:1;21705:15;21732:180;21780:77;21777:1;21770:88;21877:4;21874:1;21867:15;21901:4;21898:1;21891:15;21918:305;21958:3;21977:20;21995:1;21977:20;:::i;:::-;21972:25;;22011:20;22029:1;22011:20;:::i;:::-;22006:25;;22165:1;22097:66;22093:74;22090:1;22087:81;22084:107;;;22171:18;;:::i;:::-;22084:107;22215:1;22212;22208:9;22201:16;;21918:305;;;;:::o;22229:233::-;22268:3;22291:24;22309:5;22291:24;:::i;:::-;22282:33;;22337:66;22330:5;22327:77;22324:103;;;22407:18;;:::i;:::-;22324:103;22454:1;22447:5;22443:13;22436:20;;22229:233;;;:::o;22468:77::-;22505:7;22534:5;22523:16;;22468:77;;;:::o;22551:118::-;22638:24;22656:5;22638:24;:::i;:::-;22633:3;22626:37;22551:118;;:::o;22675:101::-;22711:7;22751:18;22744:5;22740:30;22729:41;;22675:101;;;:::o;22782:115::-;22867:23;22884:5;22867:23;:::i;:::-;22862:3;22855:36;22782:115;;:::o;22903:89::-;22939:7;22979:6;22972:5;22968:18;22957:29;;22903:89;;;:::o;22998:115::-;23083:23;23100:5;23083:23;:::i;:::-;23078:3;23071:36;22998:115;;:::o;23119:93::-;23155:7;23195:10;23188:5;23184:22;23173:33;;23119:93;;;:::o;23218:115::-;23303:23;23320:5;23303:23;:::i;:::-;23298:3;23291:36;23218:115;;:::o;23339:648::-;23536:4;23574:3;23563:9;23559:19;23551:27;;23588:71;23656:1;23645:9;23641:17;23632:6;23588:71;:::i;:::-;23669:70;23735:2;23724:9;23720:18;23711:6;23669:70;:::i;:::-;23749;23815:2;23804:9;23800:18;23791:6;23749:70;:::i;:::-;23829;23895:2;23884:9;23880:18;23871:6;23829:70;:::i;:::-;23909:71;23975:3;23964:9;23960:19;23951:6;23909:71;:::i;:::-;23339:648;;;;;;;;:::o;23993:143::-;24050:5;24081:6;24075:13;24066:22;;24097:33;24124:5;24097:33;:::i;:::-;23993:143;;;;:::o;24142:351::-;24212:6;24261:2;24249:9;24240:7;24236:23;24232:32;24229:119;;;24267:79;;:::i;:::-;24229:119;24387:1;24412:64;24468:7;24459:6;24448:9;24444:22;24412:64;:::i;:::-;24402:74;;24358:128;24142:351;;;;:::o;24499:180::-;24547:77;24544:1;24537:88;24644:4;24641:1;24634:15;24668:4;24665:1;24658:15;24685:176;24717:1;24734:20;24752:1;24734:20;:::i;:::-;24729:25;;24768:20;24786:1;24768:20;:::i;:::-;24763:25;;24807:1;24797:35;;24812:18;;:::i;:::-;24797:35;24853:1;24850;24846:9;24841:14;;24685:176;;;;:::o;24867:224::-;25007:34;25003:1;24995:6;24991:14;24984:58;25076:7;25071:2;25063:6;25059:15;25052:32;24867:224;:::o;25097:366::-;25239:3;25260:67;25324:2;25319:3;25260:67;:::i;:::-;25253:74;;25336:93;25425:3;25336:93;:::i;:::-;25454:2;25449:3;25445:12;25438:19;;25097:366;;;:::o;25469:419::-;25635:4;25673:2;25662:9;25658:18;25650:26;;25722:9;25716:4;25712:20;25708:1;25697:9;25693:17;25686:47;25750:131;25876:4;25750:131;:::i;:::-;25742:139;;25469:419;;;:::o;25894:223::-;26034:34;26030:1;26022:6;26018:14;26011:58;26103:6;26098:2;26090:6;26086:15;26079:31;25894:223;:::o;26123:366::-;26265:3;26286:67;26350:2;26345:3;26286:67;:::i;:::-;26279:74;;26362:93;26451:3;26362:93;:::i;:::-;26480:2;26475:3;26471:12;26464:19;;26123:366;;;:::o;26495:419::-;26661:4;26699:2;26688:9;26684:18;26676:26;;26748:9;26742:4;26738:20;26734:1;26723:9;26719:17;26712:47;26776:131;26902:4;26776:131;:::i;:::-;26768:139;;26495:419;;;:::o;26920:175::-;27060:27;27056:1;27048:6;27044:14;27037:51;26920:175;:::o;27101:366::-;27243:3;27264:67;27328:2;27323:3;27264:67;:::i;:::-;27257:74;;27340:93;27429:3;27340:93;:::i;:::-;27458:2;27453:3;27449:12;27442:19;;27101:366;;;:::o;27473:419::-;27639:4;27677:2;27666:9;27662:18;27654:26;;27726:9;27720:4;27716:20;27712:1;27701:9;27697:17;27690:47;27754:131;27880:4;27754:131;:::i;:::-;27746:139;;27473:419;;;:::o;27898:237::-;28038:34;28034:1;28026:6;28022:14;28015:58;28107:20;28102:2;28094:6;28090:15;28083:45;27898:237;:::o;28141:366::-;28283:3;28304:67;28368:2;28363:3;28304:67;:::i;:::-;28297:74;;28380:93;28469:3;28380:93;:::i;:::-;28498:2;28493:3;28489:12;28482:19;;28141:366;;;:::o;28513:419::-;28679:4;28717:2;28706:9;28702:18;28694:26;;28766:9;28760:4;28756:20;28752:1;28741:9;28737:17;28730:47;28794:131;28920:4;28794:131;:::i;:::-;28786:139;;28513:419;;;:::o;28938:191::-;28978:4;28998:20;29016:1;28998:20;:::i;:::-;28993:25;;29032:20;29050:1;29032:20;:::i;:::-;29027:25;;29071:1;29068;29065:8;29062:34;;;29076:18;;:::i;:::-;29062:34;29121:1;29118;29114:9;29106:17;;28938:191;;;;:::o;29135:98::-;29186:6;29220:5;29214:12;29204:22;;29135:98;;;:::o;29239:168::-;29322:11;29356:6;29351:3;29344:19;29396:4;29391:3;29387:14;29372:29;;29239:168;;;;:::o;29413:360::-;29499:3;29527:38;29559:5;29527:38;:::i;:::-;29581:70;29644:6;29639:3;29581:70;:::i;:::-;29574:77;;29660:52;29705:6;29700:3;29693:4;29686:5;29682:16;29660:52;:::i;:::-;29737:29;29759:6;29737:29;:::i;:::-;29732:3;29728:39;29721:46;;29503:270;29413:360;;;;:::o;29779:640::-;29974:4;30012:3;30001:9;29997:19;29989:27;;30026:71;30094:1;30083:9;30079:17;30070:6;30026:71;:::i;:::-;30107:72;30175:2;30164:9;30160:18;30151:6;30107:72;:::i;:::-;30189;30257:2;30246:9;30242:18;30233:6;30189:72;:::i;:::-;30308:9;30302:4;30298:20;30293:2;30282:9;30278:18;30271:48;30336:76;30407:4;30398:6;30336:76;:::i;:::-;30328:84;;29779:640;;;;;;;:::o;30425:141::-;30481:5;30512:6;30506:13;30497:22;;30528:32;30554:5;30528:32;:::i;:::-;30425:141;;;;:::o;30572:349::-;30641:6;30690:2;30678:9;30669:7;30665:23;30661:32;30658:119;;;30696:79;;:::i;:::-;30658:119;30816:1;30841:63;30896:7;30887:6;30876:9;30872:22;30841:63;:::i;:::-;30831:73;;30787:127;30572:349;;;;:::o;30927:182::-;31067:34;31063:1;31055:6;31051:14;31044:58;30927:182;:::o;31115:366::-;31257:3;31278:67;31342:2;31337:3;31278:67;:::i;:::-;31271:74;;31354:93;31443:3;31354:93;:::i;:::-;31472:2;31467:3;31463:12;31456:19;;31115:366;;;:::o;31487:419::-;31653:4;31691:2;31680:9;31676:18;31668:26;;31740:9;31734:4;31730:20;31726:1;31715:9;31711:17;31704:47;31768:131;31894:4;31768:131;:::i;:::-;31760:139;;31487:419;;;:::o;31912:178::-;32052:30;32048:1;32040:6;32036:14;32029:54;31912:178;:::o;32096:366::-;32238:3;32259:67;32323:2;32318:3;32259:67;:::i;:::-;32252:74;;32335:93;32424:3;32335:93;:::i;:::-;32453:2;32448:3;32444:12;32437:19;;32096:366;;;:::o;32468:419::-;32634:4;32672:2;32661:9;32657:18;32649:26;;32721:9;32715:4;32711:20;32707:1;32696:9;32692:17;32685:47;32749:131;32875:4;32749:131;:::i;:::-;32741:139;;32468:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2313800","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2924","getApproved(uint256)":"5300","getBreedFromModdedRng(uint256)":"infinite","getChanceArray()":"infinite","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"3025","rawFulfillRandomWords(uint256,uint256[])":"infinite","requestNft()":"infinite","s_requestIdToSender(uint256)":"2950","s_tokenCounter()":"2452","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"797","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"},"internal":{"fulfillRandomWords(uint256,uint256[] memory)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","getBreedFromModdedRng(uint256)":"a51cccf3","getChanceArray()":"5dacf5f4","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3","requestNft()":"aa152491","s_requestIdToSender(uint256)":"a36f573b","s_tokenCounter()":"0b21a83b","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RandomIpfsNft__RangeOutOfBounds\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"moddedRng\",\"type\":\"uint256\"}],\"name\":\"getBreedFromModdedRng\",\"outputs\":[{\"internalType\":\"enum RandomIpfsNft.Breed\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChanceArray\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requestIdToSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RandomIpfsNft.sol\":\"RandomIpfsNft\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/RandomIpfsNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\nerror RandomIpfsNft__RangeOutOfBounds();\\n\\ncontract RandomIpfsNft is VRFConsumerBaseV2, ERC721 {\\n    // when we mint an NFT, we will trigger a Chainlinkg VRF call to get us a random number\\n    // using that number, we will get a random NFT\\n    // Pug, Shiba Inu, St. Bernard\\n    // Shiba Inu super rare\\n    // Pug kinda rare\\n    // St. Bernanrd common\\n\\n    // Type Declaration\\n    enum Breed{\\n        SHIBA_INU,\\n        PUG,\\n        ST_BERNARD\\n    }\\n\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    // Chainlink VRF Helpers\\n    mapping(uint256 => address) public s_requestIdToSender;\\n\\n    // NFT variables\\n    uint256 public s_tokenCounter;\\n    uint256 internal constant MAX_CHANCE_VALUE = 100;\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) ERC721(\\\"Random IPFS NFT\\\", \\\"RIN\\\") {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_subscriptionId = subscriptionId;\\n        i_gasLane = gasLane;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function requestNft() public returns (uint256 requestId) {\\n        requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        s_requestIdToSender[requestId] = msg.sender;\\n    }\\n\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\n        address dogOwner = s_requestIdToSender[requestId];\\n        uint256 newTokenId = s_tokenCounter;\\n        // What does the token look like?\\n        \\n        uint256 moddedRng = randomWords[0] % MAX_CHANCE_VALUE;\\n        // Get number between 0-99\\n\\n        Breed dogBreed = getBreedFromModdedRng(moddedRng);\\n        _safeMint(dogOwner, newTokenId);\\n    }\\n\\n    function getBreedFromModdedRng(uint256 moddedRng) public pure returns (Breed) {\\n        uint256 cumulativeSum = 0;\\n        uint256[3] memory chanceArray = getChanceArray();\\n        for(uint256 i = 0; i < chanceArray.length; i++) {\\n            if (moddedRng >= cumulativeSum && moddedRng < cumulativeSum + chanceArray[i]) {\\n                return Breed(i);\\n            }\\n            cumulativeSum += chanceArray[i];\\n        }\\n        revert RandomIpfsNft__RangeOutOfBounds();\\n    }\\n\\n    function getChanceArray() public pure returns(uint256[3] memory) {\\n        return [10, 30, MAX_CHANCE_VALUE];\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n\\n    }\\n}\",\"keccak256\":\"0xbe7860aa773e4b3c756acb794a5470b58b0595b41b87fa8301366d490d7c9934\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":179,"contract":"contracts/RandomIpfsNft.sol:RandomIpfsNft","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":181,"contract":"contracts/RandomIpfsNft.sol:RandomIpfsNft","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":185,"contract":"contracts/RandomIpfsNft.sol:RandomIpfsNft","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":189,"contract":"contracts/RandomIpfsNft.sol:RandomIpfsNft","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":193,"contract":"contracts/RandomIpfsNft.sol:RandomIpfsNft","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":199,"contract":"contracts/RandomIpfsNft.sol:RandomIpfsNft","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":2721,"contract":"contracts/RandomIpfsNft.sol:RandomIpfsNft","label":"s_requestIdToSender","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_address)"},{"astId":2723,"contract":"contracts/RandomIpfsNft.sol:RandomIpfsNft","label":"s_tokenCounter","offset":0,"slot":"7","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}